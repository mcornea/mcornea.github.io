<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>remote-lab.net</title>
 <link href="http://remote-lab.net:4000/atom.xml" rel="self"/>
 <link href="http://remote-lab.net:4000/"/>
 <updated>2017-01-10T20:53:39+00:00</updated>
 <id>http://remote-lab.net:4000</id>
 <author>
   <name>Marius Cornea</name>
   <email>marius@remote-lab.net</email>
 </author>

 
 <entry>
   <title>LEMP stack HA cluster deployment with Ansible</title>
   <link href="http://remote-lab.net:4000/ansible-lemp-ha-cluster"/>
   <updated>2016-03-26T10:21:31+00:00</updated>
   <id>http://remote-lab.net:4000/ansible-lemp-ha-cluster</id>
   <content type="html">&lt;p&gt;I’ve been playing with Ansible lately and I was thinking of a good practice exercise. The first thing that came to mind was an HA cluster since clustered nodes get almost identical configuration and most probably you want to use a config management system to deploy and don’t touch them with any manual configuration.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I chose to deploy a cluster that serves as the infrastructure for a LEMP stack (Linux, Nginx, MariaDB, PHP). 
This post will cover the setup details, a brief description of the Ansible roles that I used and some challenges that I faced.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://remote-lab.net:4000/public/images/lempha.jpg&quot;&gt;&lt;img src=&quot;http://remote-lab.net:4000/public/images/lempha.jpg&quot; alt=&quot;LEMP stack HA cluster&quot; width=&quot;800&quot; height=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;cluster-components&quot;&gt;Cluster components:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;3 x CentOS 7 nodes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each node has 2 interfaces connected to one public network and one internal network. The public network is used for serving requests coming from the Internet. The internal one is used for communication such as database or file replication or communications between the loadbalancer and the backend servers.
   They are built as monolithic nodes, each one running all the services but it should be fairly easy to break them down based on roles.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Keepalived: Virtual IP (VIP) address manager&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the eventuality of the node holding the VIP going down Keepalived brings up the VIP on another node in the cluster. We’re going to make use of 2 x VIPs - one public VIP that is going to face the public network and will serve HTTP requests. A 2nd VIP on the internal network which serves the database requests.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HAProxy: Loadbalancer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Keepalived VIPs are used by HAProxy to expose the backends services. The public VIP has configured the 3 x Nginx servers as backends and provides roundrobin loadbalancing between them. The internal VIP has configured the 3 x MariaDB servers as backends. It is going to forward requests in an “active/passive” manner. This means that requests hitting the internal VIP will be routed to a single backend server. In the eventuality of the server going down then requests are routed to the next available backend server.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MariaDB Galera cluster&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The nodes form a multi-master synchronous MariaDB Galera cluster thus ensuring DB data consistency accross all nodes in the cluster.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Nginx + php-fpm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’re going to use Nginx + php-fpm for running PHP applications. These can, of course, be interchanged with any other web server. The Nginx root directory is set to /var/www which is mounted from a GlusterFS volume.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GlusterFS replicated volume&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The gluster volume is set up as a 3 replicas volume backed up by 3 bricks, one brick per each node.&lt;/p&gt;

&lt;h2 id=&quot;how-it-works&quot;&gt;How it works:&lt;/h2&gt;

&lt;p&gt;Let’s have a quick look at the flow that happens when you load a page in your browser:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;request hits the public VIP&lt;/li&gt;
  &lt;li&gt;haproxy routes the request to one the nginx servers&lt;/li&gt;
  &lt;li&gt;nginx uses php-fpm to run the php code stored in /var/www&lt;/li&gt;
  &lt;li&gt;the php script is loaded from one of the gluster bricks&lt;/li&gt;
  &lt;li&gt;the code is evaluated and it runs a database query&lt;/li&gt;
  &lt;li&gt;the query hits the internal vip&lt;/li&gt;
  &lt;li&gt;haproxy routes the query to the active backend database server&lt;/li&gt;
  &lt;li&gt;the database query is run and the result is returned to the client&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;deploy&quot;&gt;Deploy!&lt;/h2&gt;

&lt;p&gt;Below are the Ansible roles that I used for provisioning:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;base&lt;/p&gt;

    &lt;p&gt;simple role that installs common tools such as vim or git. In my case it also sets SELinux to permissive. Shame on me because I still haven’t learnt SELinux :)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;firewall&lt;/p&gt;

    &lt;p&gt;deploys and configures shorewall. It creates a firewall with 2 zones - one for the public network and one for the internal network. It also automatically allows all traffic between the nodes IP addresses and makes custom rules adjustable via group variables.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;db&lt;/p&gt;

    &lt;p&gt;deploys and configures the Galera cluster&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;loadbalancer&lt;/p&gt;

    &lt;p&gt;deploys and configures HAProxy and Keepalived combo&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;storage&lt;/p&gt;

    &lt;p&gt;creates the gluster bricks and volume and mounts it to /var/www&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;web&lt;/p&gt;

    &lt;p&gt;deploys and configures nginx + php-fpm&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I struggled a bit with the db role since I needed to serialize actions and I couldn’t find a straightforward way of doing it. For example when a database server configuration change occurs you need to restart the mariadb service on each node individually and wait for it to get back in sync with the cluster. In order to do this I made a poor use of host variables. I’m pretty sure there must be a better way of achieving this and it’s something that I’m looking to improve.&lt;/p&gt;

&lt;p&gt;You can check the playbook &lt;a href=&quot;https://github.com/remoteur/infra.remote-lab.net/tree/master/lemp-ha-cluster&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’m quite impressed by Ansible’s learning curve. I don’t use it on a daily basis but every time I do I get the feeling that I can do complex tasks in a short timeframe which is awesome.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>HA Openstack deployment using RDO-Manager</title>
   <link href="http://remote-lab.net:4000/rdo-manager-ha-openstack-deployment"/>
   <updated>2015-10-17T19:21:31+00:00</updated>
   <id>http://remote-lab.net:4000/rdo-manager-ha-openstack-deployment</id>
   <content type="html">&lt;p&gt;In this post I’ll describe the steps needed to deploy an Openstack environment with 3 HA Controllers and 2 Nova compute nodes in a virtual environment.&lt;/p&gt;

&lt;p&gt;The setup was created by following the &lt;a href=&quot;https://repos.fedorapeople.org/repos/openstack-m/rdo-manager-docs/liberty/&quot;&gt;RDO-Manager Liberty docs&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;assumptions&quot;&gt;Assumptions:&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;The instack-virt-setup script has created 5 VMs (export NODE_COUNT=5) &lt;br /&gt;
  Instructions page: Environment Setup -&amp;gt; Virtual Environment&lt;/li&gt;
  &lt;li&gt;You have completed the undercloud installation by using the default undercloud.conf
  Instructions page: Undercloud Installation -&amp;gt; Installing the Undercloud&lt;/li&gt;
  &lt;li&gt;You have completed images build and upload steps, nodes registration and introspection, flavors creation and configured the nameserver for the control plane network.&lt;br /&gt;
  Instructions page: Basic deployment&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;infrastructure&quot;&gt;Infrastructure&lt;/h2&gt;

&lt;p&gt;At this point the undercloud has all the required pieces to start deploying the overcloud. As with any kind of infrastructure deployment which involves more than one machine we need to make sure we understand how the components interact with each other.&lt;/p&gt;

&lt;p&gt;Below is a diagram that shows the components created by the instack-virt-setup script and how we want to consume them in our deployment.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://remote-lab.net:4000/public/images/instack.png&quot;&gt;&lt;img src=&quot;http://remote-lab.net:4000/public/images/instack.png&quot; alt=&quot;Virtual infrastructure&quot; width=&quot;700&quot; height=&quot;450&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;instack VM: this is the VM that runs the undercloud. It’s got 2 nics: one connected to the libvirt default network which provides Internet connectivity and another one connected to the brbm bridge. The latter is connected to the provisioning network.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;brbm OVS bridge: this will act as a L2 switch for interconnecting the undercloud with the overcloud nodes. By default the OVS ports are trunks, forwarding frames with any vlan tag.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;baremetal_brbm VMs: these are the VMs that will run the overcloud nodes. Their number depends on how many you specified in the NODE_COUNT variable. All these VMs get created with a single nic connected to the brbm bridge by default.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before going further let’s take a minute and verify these settings on the undercloud:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/47483abe424cae4521d6.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;We can see that eth1(2nd nic) is bridged to br-ctlplane which has 192.0.2.1/24 as IP address. As you can see in the neutron subnet details it also acts as a default gateway for the ctlplane net (the provisioning network). This is because we want the undercloud machine to act as a router since it’s the single exit point to the Internet in the virtual environment. In addition there is also a masquerade rule which translates the source address for packets coming from the provisioning network. We can also see that a neutron port already exists in the provisioning network. This is actually the dhcp agent which will provide DHCP services for the overcloud nodes during the deployment.&lt;/p&gt;

&lt;h2 id=&quot;overcloud-planning&quot;&gt;Overcloud planning&lt;/h2&gt;

&lt;p&gt;Now we can move forward to the overcloud deployment planning. We would like to deploy an Openstack environment with the following characteristics:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HA control plane with 3 x controller nodes&lt;/li&gt;
  &lt;li&gt;2 x Nova compute nodes&lt;/li&gt;
  &lt;li&gt;Achieve service isolation by binding them on separate networks running on top of different vlans&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s first make a copy of the tripleo-heat-templates tree in our home directory and use it for doing any modifications and run the deployment. As the docs mention use this approach with caution as you will need to rebase any local changes on updates to the openstack-tripleo-heat-templates package.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;stack@instack:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;mkdir the-cloud
&lt;span class=&quot;gp&quot;&gt;stack@instack:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;cp -r /usr/share/openstack-tripleo-heat-templates/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; the-cloud/&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To enable network isolation we need to prepare the nic templates and an environment file which describe how the network interface configuration files on the overcloud nodes will be created. Thankfully, predefined templates for a single nic with vlan isolation environment are provided. Each role has its own template as not all the roles require connectivity to all the networks. Let’s take as example the controller role which requires connectivity to all the networks:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/4e9fe56ac88de5ba002a.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;We can see a bunch of parameters which describe things such as network subnets, vlan IDs, router address, etc. Some of them have default values(such as the vlan IDs which we’re going to use in our deployment) and some of them don’t thus we’ll have to provide them in the environment file.&lt;/p&gt;

&lt;p&gt;Going forward to the resources section we can see how the interfaces get created and the IP addresses assignment is done. Basically it first creates an OVS bridge having the name passed in the bridge_name parameter (defaults to br-ex). It then gets the DNS servers addresses from the DnsServers parameter (we’ll set it later in the environment file).  In the next step it assigns an IP address from the ctlplane network to the br-ex bridge. Next it adds a static route for the Nova metadata service via the EC2MetadataIp parameter(which we’ll pass in the environment file). Going further to the members section we can see nic1 as type interface which means it’s going to bridge nic1(first connected nic, in our case eth0) to the br-ex bridge. In the next steps it creates the vlan interfaces, taking as parameters the vlan IDs and the subnets for each of the networks. For the external network it adds a static route to 0.0.0.0/0 (default route) via the ExternalInterfaceDefaultRoute parameter (passed later in the environment file).&lt;/p&gt;

&lt;p&gt;You can go ahead and also check the nic templates for the other roles. You’ll see that the main difference is that they don’t have connections to all the vlans and the default route is set through the ControlPlaneDefaultRoute(set in the environment file) which is actually the undercloud’s IP address on the provisioning network.&lt;/p&gt;

&lt;p&gt;Let’s go to the next step and create the network environment file:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/c69d57a17d76f88452ee.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Here we set the networks subnets, allocation pools together with other parameters which were previously described in the template walkthrough.&lt;/p&gt;

&lt;p&gt;More thorough details on the network isolation bits can be found on the docs page:
&lt;a href=&quot;https://repos.fedorapeople.org/repos/openstack-m/rdo-manager-docs/liberty/advanced_deployment/network_isolation.html&quot;&gt;Network Isolation Docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We’ve seen earlier that the undercloud is used as a router for the provisioning network. Now that we want to have the overcloud provisioned with an external network which also requires Internet connectivity we must set an additional interface on the undercloud. This has to match the external network vlan id and the ExternalInterfaceDefaultRoute parameter set in the environment file. This step is also required because, during the overcloud deployment, the undercloud will try to reach the public VIP of the overcloud for post config initialization.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/01cd42ca76e77ecc1b35.js&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;deploy&quot;&gt;Deploy!&lt;/h2&gt;

&lt;p&gt;We’re almost ready for deployment. Let’s build the deploy command and fire it up:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/6884e0cb1c5177a21571.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Some explanations on the command arguments:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;control-scale: number of controller nodes&lt;/li&gt;
  &lt;li&gt;compute-scale: number of compute nodes&lt;/li&gt;
  &lt;li&gt;libvirt-type: virtualization type; since we’re running hypervisors on VMs we’ll use qemu&lt;/li&gt;
  &lt;li&gt;ntp-server: HA deployments require an NTP server for time syncronization&lt;/li&gt;
  &lt;li&gt;templates: location of the Heat templates directory&lt;/li&gt;
  &lt;li&gt;puppet-pacemaker.yaml: enables Pacemaker as cluster resource manager; required in HA environments&lt;/li&gt;
  &lt;li&gt;network-isolation.yaml : enables the creation of Neutron ports in the isolated networks&lt;/li&gt;
  &lt;li&gt;net-single-nic-with-vlans.yaml: enables the use of single-nic-vlans templates&lt;/li&gt;
  &lt;li&gt;network-environment.yaml: the environment file we have built earlier&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To monitor the deployment progress I usually run in a separate terminal:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;watch -n1 &lt;span class=&quot;s1&quot;&gt;'heat stack-list -n | grep PROGRESS'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This way I can see if any nested stack gets stuck for long time, comparing the current time with the timestamps of the the stacks.&lt;/p&gt;

&lt;p&gt;I also watch  the output of nova list. During the early stages of the deployment you should see the instances being in spawning state:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/955dcaf2960fcb8a6889.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;This usually means that the nodes are booted in the deploy stage and transferring the overcloud image to disk. Once it gets written the nodes will reboot, the nova instances will show as active, they’ll load the image from disk and you’ll be able to reach them via ssh.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/f98756e2e77c696e6554.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;SSH access can be done by using the undercloud stack user private key and heat-admin as remote user. Let’s jump in overcloud-controller-0 and see what’s happening there:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;stack@instack:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ssh heat-admin@192.0.2.14&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can check the os-collect-config and /var/log/messages for deployment logs or errors:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;heat-admin@overcloud-controller-0 ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo journalctl -fl -u os-collect-config 
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;heat-admin@overcloud-controller-0 ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo tail -f /var/log/messages &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You may check the actual result of the controller nic template showed earlier. This will end up in the /etc/os-net-config/config.json file which is used by os-net-config to build the ifcfg scripts in /etc/sysconfig/network-scripts.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/d382c5442649bf276a90.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Once the deployment is done you will get a resulting overcloudrc file that you just need to source and then you’ll have the overcloud Openstack at your disposal.&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/920109a31083942ba5e1.js&quot;&gt; &lt;/script&gt;

</content>
 </entry>
 
 <entry>
   <title>Graphing car metrics into the cloud with Raspberry Pi, OBD and Graphite</title>
   <link href="http://remote-lab.net:4000/raspberry-pi-car-automation"/>
   <updated>2015-04-19T19:44:40+00:00</updated>
   <id>http://remote-lab.net:4000/graphing-car-metrics-into-the-cloud-with-raspberry-pi</id>
   <content type="html">&lt;p&gt;In this post we’ll see how you can grab car sensors data and turn them into some good loking and easy to watch graphs.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;motivation&quot;&gt;Motivation:&lt;/h2&gt;
&lt;p&gt;I’ve recently changed my car’s stock air filter with a performance one which really improved the car’s responsiveness. While driving back from Romania to Czech Republic I was thinking that this can’t just come for free and I wanted to see how it impacts the car’s working parameters. First thing I noticed has changed was the fuel consumption. Since the car board computer only provides instantaneous and average fuel consumption numbers I can’t really get to do an analysis of how it changed in time. Numbers are good but, at least for me, it’s hard to interpret them as absolute values and I need to get the whole picture where they stand. The first thought that came to mind was to turn metrics like rpm, speed and instantaneous fuel consumption into easy to read graphs. This would at least get me some more insight with historical data of the car’s working parameters.&lt;/p&gt;

&lt;p&gt;So there kicked my doer spirit and I started thinking of ways of doing it. What did I need:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Data source&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I knew most of the cars have a diagnosis port called OBD which is used for reading data from most of the existing sensors in your car.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Data destination&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once I got all the sensor data I needed to graph it somehow. This would be the easiest task since I had already used Graphite before and knew how easy sending the data and getting the graphs done was.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Data processor&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that I have the data source and destination I also needed the device that processes/forwards it. I had a Raspberry Pi standing on my desk for 2 or more years without turning it on so I thought that would be the ideal time to start using it.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Put everything together&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point we have the system’s individual components but we need to connect them somehow to get functionality out of it. After doing some searches I found out that there were some cheap Bluetooth OBD readers on the market and decided to go with that. Since I was going to use Bluetooth for connecting the Raspberry Pi to the OBD reader I also needed a USB Bluetooth dongle.
The last step in getting the system done would be to get the Raspberry Pi connected to Graphite. Since I’m a cloudy guy I’m going to run Graphite on my Openstack lab so this means I’m going to need an Internet connection on the Pi. First thing that came to mind was getting a USB 3G modem. After doing some reading I found out that most of these modems require external power. I wanted to keep cabling as clean as possible by powering the Pi from the car’s USB port so I went for another approach. The solution I came up was to use my phone’s tethering capabilities and get the Pi connected via WiFi. By doing this I also required a USB WiFi dongle.&lt;/p&gt;

&lt;h2 id=&quot;diagram-of-how-this-is-going-to-work&quot;&gt;Diagram of how this is going to work:&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://remote-lab.net:4000/public/images/car_odb.png&quot;&gt;&lt;img src=&quot;http://remote-lab.net:4000/public/images/car_odb.png&quot; alt=&quot;Car OBD&quot; width=&quot;500&quot; height=&quot;350&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;bill-of-materials&quot;&gt;Bill of materials:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Raspberry Pi Model B&lt;/li&gt;
  &lt;li&gt;Kingston 32GB SDHC Memory Card Class 10&lt;/li&gt;
  &lt;li&gt;MicroUSB cable&lt;/li&gt;
  &lt;li&gt;Asus USB-BT400 Bluetooth dongle&lt;/li&gt;
  &lt;li&gt;Edimax EW-7811Un WiFi dongle&lt;/li&gt;
  &lt;li&gt;Elm327 OBDII Bluetooth Scanner&lt;/li&gt;
  &lt;li&gt;3G Tethering capable phone&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;before-getting-started&quot;&gt;Before getting started:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Get your Raspberry Pi installed.&lt;/li&gt;
  &lt;li&gt;Make sure it’s connected via WiFi to the mobile phone&lt;/li&gt;
  &lt;li&gt;Find its IP address and connect to it via SSH&lt;/li&gt;
  &lt;li&gt;Install graphite and grafana. You can use these Ansible roles here: 
https://github.com/remoteur/ansible-graphs&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tldr-lets-get-started&quot;&gt;TL;DR. Let’s get started:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Connect the OBDII reader to your car&lt;/li&gt;
  &lt;li&gt;Log in by SSH to the Pi&lt;/li&gt;
  &lt;li&gt;Discover the OBDII mac address or read it from the case:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;hcitool scan
Scanning ...
00:0D:18:00:00:01 OBDII&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Add the MAC address to the Bluetooth conf file.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cat /etc/bluetooth/rfcomm.conf
rfcomm99 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;nb&quot;&gt;bind &lt;/span&gt;yes;
       device 00:0D:18:00:00:01;
       channel 1;
       comment &lt;span class=&quot;s2&quot;&gt;&quot;ELM327 based OBD II test tool&quot;&lt;/span&gt;;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Write init script that will manage the Bluetooth connection through the /dev/rfcomm99 device.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cat /etc/init.d/elm327
&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;### BEGIN INIT INFO&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Provides: elm327&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Required-Start:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Required-Stop:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Should-Start:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Should-Stop: $null&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Default-Start: 3 5&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Default-Stop: 0 1 2 6&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Short-Description: Start elm327&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Description: starts the elm327 bluetooth device&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;### END INIT INFO&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;DevNum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;99       &lt;span class=&quot;c&quot;&gt;# DevNum is depending on the rfcom settings /etc/bluetooth/rfcom.cfg&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
&lt;/span&gt;start&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     rfcomm &lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$DevNum&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
stop&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     rfcomm release &lt;span class=&quot;nv&quot;&gt;$DevNum&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
status&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    rfcomm show &lt;span class=&quot;nv&quot;&gt;$DevNum&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    cat&lt;span class=&quot;sh&quot;&gt;&amp;lt;&amp;lt;EOF
Usage:
    $0 [ start | stop | status ]

EOF
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Create the device by running the init script&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo /etc/init.d/elm327 start&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Install obd python module via pip&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo pip install obd&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Write a script that reads sensor values and sends them to the graphite instance:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;platform&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;socket&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;obd&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;CARBON_SERVER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'graph.remote-lab.net'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CARBON_PORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2003&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DELAY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# secs&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#    print 'sending message:\n%s' % message&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CARBON_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CARBON_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_rpms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RPM&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SPEED&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OBD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/dev/rfcomm99&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rpms&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_rpms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'system.&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s.rpm &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rpms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'system.&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s.speed &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;send_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DELAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Run the script and you should start seeing the metrics graphed by Graphite. I’m using Grafana as a Graphite frontend and here’s how the graphs look like after a ride:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://remote-lab.net:4000/public/images/car_stats.png&quot;&gt;&lt;img src=&quot;http://remote-lab.net:4000/public/images/car_stats.png&quot; alt=&quot;Car OBD&quot; width=&quot;500&quot; height=&quot;350&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see that I only captured the RPM and speed sensor. The equation for calculating the instantaneous fuel consumptions includes a sensor that seems to be missing from my car or at least I don’t know how to read it. I need to dig further to see how I can get it.&lt;/p&gt;

&lt;p&gt;I think this is a great example that demonstrates how easily you can leverage a physical measurement by software today. I really like it mostly because I have a general feeling that during our lifetime we could be missing important bits just because we’re not analyzing enough the world around us. As humans we have a limited set of receptors(sensors) and I guess making use of the available compute power on a general scale might at least show us some unknown patterns in the world arounds us.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Live demo:&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe width=&quot;854&quot; height=&quot;510&quot; src=&quot;https://www.youtube.com/embed/g8cWz-SpWIo&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

</content>
 </entry>
 
 <entry>
   <title>Getting started with Docker and the wonders of Open Source</title>
   <link href="http://remote-lab.net:4000/getting-started-with-docker"/>
   <updated>2015-04-05T22:07:40+00:00</updated>
   <id>http://remote-lab.net:4000/getting-started-with-docker-and-the-wonders-of-opensource</id>
   <content type="html">&lt;p&gt;As Docker has been a buzzword lately(last year or so) I though that I should give it a try and really do something with it besides reading articles about how great it is.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;First thing that came to mind and most handy I guess is to build a LAMP stack environment for Wordpress sites. So how do I start? Well, let’s take the LAMP environment and split it into components: we need a database to store data and a web server that can process the Wordpress PHP code. Based on this I decided to create a container for the MySQL database and a container for running Apache plus additional PHP modules. Then I would also like to run multiple Wordpress instances on the same server to make use of all the resources. In order to achieve isolation between the apps we can create separate containers for each WP instance, each with its own database on the MySQL server. Nevertheless since we want all the instances accessible by a single IP address, we also need a load balancer that routes traffic to the webserver containers according to the Host field in the HTTP header. 
Below is a diagram that better describes the flow:
&lt;a href=&quot;http://remote-lab.net:4000/public/images/Containers-start-New-Page1.png&quot;&gt;&lt;img src=&quot;http://remote-lab.net:4000/public/images/Containers-start-New-Page1.png&quot; alt=&quot;Containers start - New Page&quot; width=&quot;1167&quot; height=&quot;657&quot; class=&quot;aligncenter size-full wp-image-303&quot; /&gt;&lt;/a&gt;
So, let’s get started. I got a Fedora21 instance powered up and followed the documentation &lt;a href=&quot;https://docs.docker.com/installation/fedora/&quot;&gt;here&lt;/a&gt;[1] to get Docker up and running. Once I got the docker environment ready I started searching for some examples that would quickly get me started with the apps that I needed. So I started with the MySQL server. A quick search on Google pointed me to the official MySQL &lt;a href=&quot;https://registry.hub.docker.com/_/mysql/&quot;&gt;repo&lt;/a&gt;[2] on Docker Hub that contains pretty straight forward documentation on how to get a running MySQL container.&lt;/p&gt;

&lt;p&gt;Here’s the command that I ran in order to get it running:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run --name db-server -v /srv/db-server/storage:/var/lib/mysql -e &lt;span class=&quot;nv&quot;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;openssl rand -hex 10&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; -d mysql:latest&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What this does is that it creates a container called db-server with the /var/lib/mysql directory mounted from the /srv/db-server/storage directory on the host file system, injecting the MYSQL_ROOT_PASSWORD(some random generated hex string) environment variable that will be used at database server initialization and it uses the image called mysql(pulled from Docker hub) with the tag latest to build from. I chose storing the mysql content to a directory accessible on the host because I am not familiar yet with the Docker images and file system and I would like to preserve the db data in case I mess up something with the containers. Now that we ran the command we should see the container running:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker ps
CONTAINER ID IMAGE 		COMMAND 		CREATED 	  STATUS  PORTS NAMES
c383c56a7e66 mysql:latest	&lt;span class=&quot;s2&quot;&gt;&quot;/entrypoint.sh mysq   About an hour ago   Up 7 seconds        3306/tcp            db-server&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can see that the server is running and it’s exposing the MySQL port 3306. You can check the container properties by running ‘docker inspect db-server’. This should return a json containing all the container properties including the environment variables that were set at start, including the MySQL root password. 
We can actually check the current databases by running this dirty one liner:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;db-server mysql -uroot -p&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;docker inspect --format &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt; db-server | awk &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'print $1'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; | awk -F &lt;span class=&quot;s1&quot;&gt;'='&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'print $2'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; -e &lt;span class=&quot;s1&quot;&gt;'show databases'&lt;/span&gt;
Database
information_schema
domain
mysql
performance_schema&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So now that we have the DB server ready we can proceed further with creating the Apache webserver. First thing before reinventing the wheel is to search if others already created the wheel. As expected I found John Finks docker-wordpress repo &lt;a href=&quot;https://github.com/jbfink/docker-wordpress.git&quot;&gt;here&lt;/a&gt;[3] where he covers a full LAMP stack, including Wordpress container. I didn’t need all that for my webserver containers but it was a great starting point for me. So I forked it, did some changes and it resulted in the following &lt;a href=&quot;https://github.com/remoteur/docker-wordpress.git&quot;&gt;repo&lt;/a&gt;. Let’s take a look at what’s inside the repo. We have a Dockerfile and 2 directories: configs and scripts. The 2 directories actually contain files that are called in the Dockerfile. What is this Dockerfile? It’s the file used for building Docker images. Usually it contains a base image and some additional steps that are ran on top of the base image. For instance my Dockerfile uses the Debian image tagged latest as base, then it adds the Dotdeb repos, installs the packages required for Apache and PHP modules, adds the config files from the config directory inside the image and also the files from the scripts directory that are going to be run when the container starts. Let’s build the image by using this Dockerfile.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git clone https://github.com/remoteur/docker-wordpress.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;docker-wordpress/
docker build -t webnode .&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It takes some time to build the image and after it’s finished we can go ahead and fire up the webnode container.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run --name webnode  -v /srv/webnode/www:/var/www/ --link db-server:mysql -d webnode:latest&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What this does is that it runs a container called webnode which is linked to the db-server container so that it can access it by it’s name (mysql in our example) and it’s using the image that we’ve just built called webnode with the ‘latest’ tag. Again we want the data that’s important to us from the container to be stored directly on the host file system so we mount the /var/www directory from the host’s /srv/webnode/www directory. We can now see both the containers are running:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker ps
CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS               NAMES
4aba6d289230        webnode:latest      &lt;span class=&quot;s2&quot;&gt;&quot;/bin/bash /start.sh   3 minutes ago       Up 3 minutes        80/tcp              webnode
c383c56a7e66        mysql:latest        &quot;&lt;/span&gt;/entrypoint.sh mysq   2 hours ago         Up 32 minutes       3306/tcp            db-server&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At this point we have the database server and webserver running but without any content in the Apache root directory. So in order to get Wordpress automatically installed when running a webnode container I wrote a quick bash script that creates the requirements for the Wordpress instance such as database, database user, pulls the latest Wordpress  and adjusts the wp-config.php file so it matches the db settings. You may find the script &lt;a href=&quot;https://gist.github.com/remoteur/6b12ce450d0005acc287&quot;&gt;here&lt;/a&gt;[5]
After running the container by using this script we have a full runing LAMP environment with Wordpress code installed in the Apache root. The only thing that we’re missing is the load balancer container that will acutally expose the websites publicly by the hosts IP address and route traffic to the webnode containers. Basically this could be done by installing an Nginx container that acts as a reverse proxy. But then we’d need to adjust the Nginx configuration files manually which we don’t want because we hate doing manual operations, right? :) So next step is to search for how others do this, I’m pretty sure I’m not the first one that hit this issue. My searches brought me to Jason Wilder nginx-proxy github &lt;a href=&quot;https://github.com/jwilder/nginx-proxy.git&quot;&gt;repo&lt;/a&gt;[6] which does exactly what I need. Basically the repo contains a Dockerfile that installs nginx plus docker-gen. Docker-gen is a tool that generates files based on templates and docker containers metadata. What this does in our case is that it watches for containers that are ran with the VIRTUAL_HOST env var set, generates the nginx config file containing the server directive with the values passed through VIRTUAL_HOST and reloads the nginx service in the end.&lt;/p&gt;

&lt;p&gt;That’s pretty awesome so let’s start it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run --name loadbalancer -d -p 80:80 -v /var/run/docker.sock:/tmp/docker.sock jwilder/nginx-proxy&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The command runs a container called loadbalancer with it’s port 80 translated to the host’s port 80(listening on all interfaces), the Docker socket file on the host(/var/run/docker.sock) is accessible inside the container by /tmp/docker.sock and it’s using the jwilder/nginx-proxy image to run from. We should now be able to create a new webnode container and access it via the the hosts IP address on port 80. 
Let’s give it a try and see if it works:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;bash create_wordpress
Enter wordress domain:
domain.com
Creating container web root &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /srv/webnode/webnode-domain.com/www
Downloading Wordpress to webnode-domain.com
Creating Wordpress database
Adjusting wp-config.php
Adjusting permissions &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;www-data
c9f7ebb1935f60c293d6feddfb436321afb9b5d1b57800da62d77d49a292dbdb
&lt;span class=&quot;gp&quot;&gt;root@docker:~&amp;gt;&amp;gt; &lt;/span&gt;docker ps
CONTAINER ID        IMAGE                        COMMAND                CREATED             STATUS              PORTS                         NAMES
c9f7ebb1935f        webnode:latest               &lt;span class=&quot;s2&quot;&gt;&quot;/bin/bash /start.sh   34 seconds ago      Up 31 seconds       80/tcp                        webnode-domain.com
812324707acd        jwilder/nginx-proxy:latest   &quot;&lt;/span&gt;forego start -r&lt;span class=&quot;s2&quot;&gt;&quot;      8 minutes ago       Up 8 minutes        443/tcp, 0.0.0.0:80-&amp;gt;80/tcp   loadbalancer
4aba6d289230        webnode:latest               &quot;&lt;/span&gt;/bin/bash /start.sh   39 minutes ago      Up 39 minutes       80/tcp                        webnode
c383c56a7e66        mysql:latest                 &lt;span class=&quot;s2&quot;&gt;&quot;/entrypoint.sh mysq   2 hours ago         Up About an hour    3306/tcp                      db-server&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And the result:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://remote-lab.net:4000/public/images/Screenshot-from-2015-04-05-212408.png&quot;&gt;&lt;img src=&quot;http://remote-lab.net:4000/public/images/Screenshot-from-2015-04-05-212408.png&quot; alt=&quot;Screenshot from 2015-04-05 21:24:08&quot; width=&quot;1430&quot; height=&quot;847&quot; class=&quot;aligncenter size-full wp-image-304&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s pretty awesome given the fact that I was able to do this in a couple of hours on a lazy Sunday. I’m pretty sure Docker has its caveats (building images takes such a long time) but it’s amazing how fast you can achieve this kind of automation and get familiar with the technology. Long live the Open Source community! :)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1] https://docs.docker.com/installation/fedora/
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2] https://registry.hub.docker.com/_/mysql/
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;3] https://github.com/jbfink/docker-wordpress.git
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;4] https://github.com/remoteur/docker-wordpress.git
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;5] https://gist.github.com/remoteur/6b12ce450d0005acc287
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;6] https://github.com/jwilder/nginx-proxy.git&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>OSPF lab provisioning on IOS with Ansible</title>
   <link href="http://remote-lab.net:4000/opsf-on-ios-with-ansible"/>
   <updated>2015-02-24T19:21:31+00:00</updated>
   <id>http://remote-lab.net:4000/ospf-lab-provisioning-on-ios-with-ansible</id>
   <content type="html">&lt;p&gt;In this post we’ll see how we can quickly get a basic OSPF lab deployed by using Ansible. Our setup consists of 3 x Cisco IOS routers which are connected according to the diagram below. All the routers should already have SSH set up and an interface connected to the management network that will be used for retrieving the configuration files from the server. On the server side we need a Linux machine that has Ansible installed.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;http://remote-lab.net:4000/public/images/ansible_ospf-New-Page.png&quot;&gt;&lt;img src=&quot;http://remote-lab.net:4000/public/images/ansible_ospf-New-Page.png&quot; alt=&quot;ansible_ospf - New Page&quot; width=&quot;649&quot; height=&quot;594&quot; class=&quot;aligncenter size-full wp-image-297&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So let’s get started by building the Ansible playbook. I’ll explain the site.yml file below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Run the playbook on the ‘localhost’ server by using the ‘marius’ username with sudo&lt;/li&gt;
  &lt;li&gt;Install and start Apache as the routers will pull the config files over HTTP&lt;/li&gt;
  &lt;li&gt;Install Git - used to clone the netmiko library repo&lt;/li&gt;
  &lt;li&gt;Install paramiko - dependency library for netmiko&lt;/li&gt;
  &lt;li&gt;Clone the netmiko repo and install it as a system module&lt;/li&gt;
  &lt;li&gt;Next we use the netmiko.j2 template to create a script file. The script uses netmiko and takes as arguments the ip address, username, password and command that will be run on the remote Cisco device.&lt;/li&gt;
  &lt;li&gt;We generate the configuration files that are going to be pulled by the routers. For this we use the config.j2 template and write the configuration files on the Apache DocumentRoot. This will results in 3 files: /var/www/html/rtr-A.config, /var/www/html/rtr-B.config, /var/www/html/rtr-C.config containing the configuration commands for each of the routers.&lt;/li&gt;
  &lt;li&gt;We run the script that we have created on step 6 by passing the ‘copy http://server_ip/config_file_name running-config’ command to each of the routers.&lt;/li&gt;
  &lt;li&gt;Define the variables used in the template files and commands.&lt;/li&gt;
&lt;/ul&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/e7129f02662986263018.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Now let’s go through the template files. 
The config.j2 template is used to build the configuration commands that will be loaded by the routers. What this does is basically loop through the interfaces defined for each of the routers and create the ip address statements for each of them. After this, it generates an entry for the ospf process and creates a network statement if the ‘ospf’ variable is set to yes for a specific interface.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/5cd291f364ce422e5797.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;The netmiko.j2 template is just a python script that’s using netmiko to connect to the router, first runs ‘file prompt quiet’ configuration command to disable the save confirmation message. Then it runs the command that’s passed as the 4th argument.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;netmiko&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j2&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;netmiko&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cisco_881&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;'device_type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'cisco_ios'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;'ip'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;'username'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;'password'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;'secret'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'secret'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;'verbose'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SSHClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;netmiko&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssh_dispatcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;device_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cisco_881&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'device_type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;net_connect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSHClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cisco_881&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config_commands&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'file prompt quiet'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;net_connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send_config_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config_commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;net_connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send_command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In order to run this we will also need the /etc/ansible/hosts file to contain the localhost hostname. You can find all the files in this GitHub repo: &lt;a href=&quot;https://github.com/remoteur/ansible-ospflab.git&quot;&gt;https://github.com/remoteur/ansible-ospflab.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once we have all the files in place we can run the playbook by the ‘ansible-playbook site.yml’ command. This is how the output looks like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ansible-playbook site.yml 
PLAY &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;localhost] &lt;span class=&quot;k&quot;&gt;**************************************************************&lt;/span&gt; 
GATHERING FACTS &lt;span class=&quot;k&quot;&gt;***************************************************************&lt;/span&gt;
ok: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;localhost]
TASK: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Install Apache] &lt;span class=&quot;k&quot;&gt;********************************************************&lt;/span&gt;
ok: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;localhost]
TASK: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Start Apache] &lt;span class=&quot;k&quot;&gt;**********************************************************&lt;/span&gt;
ok: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;localhost]
TASK: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Install Git] &lt;span class=&quot;k&quot;&gt;***********************************************************&lt;/span&gt;
ok: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;localhost]
TASK: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Install paramiko] &lt;span class=&quot;k&quot;&gt;******************************************************&lt;/span&gt;
ok: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;localhost]
TASK: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Clone netmiko] &lt;span class=&quot;k&quot;&gt;*********************************************************&lt;/span&gt;
ok: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;localhost]
TASK: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Install netmiko] &lt;span class=&quot;k&quot;&gt;*******************************************************&lt;/span&gt;
changed: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;localhost]
TASK: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Create netmiko script] &lt;span class=&quot;k&quot;&gt;*************************************************&lt;/span&gt;
ok: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;localhost]
TASK: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Generate config file] &lt;span class=&quot;k&quot;&gt;**************************************************&lt;/span&gt;
ok: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;localhost] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mgmt_pass'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'parola'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'int'&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'netmask'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'255.255.255.252'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'ospf'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'yes'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'GigabitEthernet0/1'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'address'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'10.0.0.1'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'netmask'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'255.255.255.252'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'ospf'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'yes'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'GigabitEthernet0/2'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'address'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'10.0.0.5'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'netmask'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'255.255.255.0'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'ospf'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'yes'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'Loopback0'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'address'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'1.1.1.1'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}]&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'rtr-A'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'mgmt_ip'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'192.168.0.81'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'mgmt_user'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'admin'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
ok: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;localhost] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mgmt_pass'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'parola'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'int'&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'netmask'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'255.255.255.252'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'ospf'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'yes'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'GigabitEthernet0/1'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'address'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'10.0.0.2'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'netmask'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'255.255.255.252'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'ospf'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'yes'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'GigabitEthernet0/2'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'address'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'10.0.0.9'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'netmask'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'255.255.255.0'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'ospf'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'yes'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'Loopback0'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'address'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'2.2.2.2'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}]&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'rtr-B'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'mgmt_ip'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'192.168.0.78'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'mgmt_user'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'admin'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
ok: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;localhost] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mgmt_pass'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'parola'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'int'&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'netmask'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'255.255.255.252'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'ospf'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'yes'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'GigabitEthernet0/1'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'address'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'10.0.0.6'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'netmask'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'255.255.255.252'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'ospf'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'yes'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'GigabitEthernet0/2'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'address'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'10.0.0.10'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'netmask'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'255.255.255.0'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'ospf'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'no'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'Loopback0'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'address'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'3.3.3.3'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}]&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'rtr-C'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'mgmt_ip'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'192.168.0.79'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'mgmt_user'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'admin'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
TASK: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Connect to routers and pull the config] &lt;span class=&quot;k&quot;&gt;********************************&lt;/span&gt;
changed: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;localhost] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mgmt_pass'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'parola'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'int'&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'netmask'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'255.255.255.252'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'ospf'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'yes'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'GigabitEthernet0/1'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'address'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'10.0.0.1'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'netmask'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'255.255.255.252'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'ospf'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'yes'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'GigabitEthernet0/2'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'address'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'10.0.0.5'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'netmask'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'255.255.255.0'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'ospf'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'yes'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'Loopback0'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'address'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'1.1.1.1'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}]&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'rtr-A'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'mgmt_ip'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'192.168.0.81'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'mgmt_user'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'admin'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
changed: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;localhost] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mgmt_pass'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'parola'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'int'&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'netmask'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'255.255.255.252'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'ospf'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'yes'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'GigabitEthernet0/1'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'address'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'10.0.0.2'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'netmask'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'255.255.255.252'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'ospf'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'yes'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'GigabitEthernet0/2'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'address'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'10.0.0.9'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'netmask'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'255.255.255.0'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'ospf'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'yes'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'Loopback0'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'address'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'2.2.2.2'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}]&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'rtr-B'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'mgmt_ip'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'192.168.0.78'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'mgmt_user'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'admin'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
changed: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;localhost] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mgmt_pass'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'parola'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'int'&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'netmask'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'255.255.255.252'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'ospf'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'yes'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'GigabitEthernet0/1'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'address'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'10.0.0.6'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'netmask'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'255.255.255.252'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'ospf'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'yes'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'GigabitEthernet0/2'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'address'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'10.0.0.10'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'netmask'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'255.255.255.0'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'ospf'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'no'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'Loopback0'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'address'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'3.3.3.3'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}]&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'rtr-C'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'mgmt_ip'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'192.168.0.79'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'mgmt_user'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'admin'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
PLAY RECAP &lt;span class=&quot;k&quot;&gt;********************************************************************&lt;/span&gt;
localhost                  : &lt;span class=&quot;nv&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10   &lt;span class=&quot;nv&quot;&gt;changed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2    &lt;span class=&quot;nv&quot;&gt;unreachable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0    &lt;span class=&quot;nv&quot;&gt;failed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is how one of routers configuration files looks like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/var/www/html/rtr-A.config :
interface GigabitEthernet0/1
no shutdown
ip address 10.0.0.1 255.255.255.252
interface GigabitEthernet0/2
no shutdown
ip address 10.0.0.5 255.255.255.252
interface Loopback0
no shutdown
ip address 1.1.1.1 255.255.255.0
router ospf 1
network 10.0.0.1 0.0.0.0 area 0
network 10.0.0.5 0.0.0.0 area 0
network 1.1.1.1 0.0.0.0 area 0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So now we have the lab up and running. Why bother automating this? In the end it’s a basic test environment. Here’s my motivation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I hate doing repetitive stuff&lt;/li&gt;
  &lt;li&gt;Reproducibility. Manual repetitive stuff results in errored configurations, at least for me. If I do such a setup manually I usually get a terminal started for each of the routers and start writing commands. My problem is that almost all the time I end up messing up something like setting the wrong IP addresses on interfaces. By running this playbook I will always get the same result&lt;/li&gt;
  &lt;li&gt;I have the complete picture in one place and I can check the whole setup before running it, no need to switch through terminals, screens or other stuff&lt;/li&gt;
  &lt;li&gt;Time. I’m running this setup on Openstack by using Cisco vIOS images so getting everything up and running from scratch takes me less than 5 minutes which is pretty awesome&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let me know if you have any questions and I’ll be more than happy to answer. 
Thanks&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>SDN Intro: Basic L2 connectivity by using OVS and POX</title>
   <link href="http://remote-lab.net:4000/sdn-intro-basic-with-ovs-and-pox"/>
   <updated>2014-10-12T21:35:48+00:00</updated>
   <id>http://remote-lab.net:4000/sdn-intro-basic-l2-connectivity-by-using-ovs-and-pox</id>
   <content type="html">&lt;p&gt;You’ve all probably heard about this fancy SDN term that’s been passing around in the networking world in the recent years. I’ll try to explain below what SDN means for me and what are the benefits of using such a model.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;SDN or Software Defined Networking refers to decoupling the data plane from the control plane. The data plane is the process by which the packets are forwarded and it’s done by the hardware silicon. The control plane is the process that instructs the data plane how to behave (routing protocols, firewall policies, etc). In a typical networking device we find those 2 planes coupled in a single box. The SDN model says we can separate them and keep the packet forwarding on a box that’s got the fast hardware silicon and move the control plane on a general purpose computer. Since the 2 planes are separated they need a means of communication which is OpenFlow.&lt;/p&gt;

&lt;p&gt;OpenFlow is a communications protocol that allows remote manipulation of the devices forwarding tables. Think of this protocol like a standard API that you can consume by running any software. This is great because you can purchase the networking device from a specific vendor and run the controller by your own code, open source project or other proprietary software. In my opinion this provides you the freedom to choose and will push the vendors to create better and better software. Personally I’m a big fan of opensource software and I’m dreaming about the moment when the networking world will be able to get the benefits of a big opensource project. 
Another advantage that SDN brings is a central point that controls the network. Think about how we currently manage the networking devices. Even if the network is a whole that provides services to upper applications, we currently log into each separate device and write some commands that configure services. SDN would save us from doing repetitive and boring tasks such as provisioning vlans.
Enough with the talk, let’s start a simple scenario by using the remote-lab.net environment. The lab topology consists of two hosts connected to an OpenvSwitch switch. The OVS switch is connected to an OpenFlow controller running Pox. The controller runs the code that enables L2 connectivity between the hosts but the actual forwarding is done by the OVS switch.
&lt;a href=&quot;http://remote-lab.net:4000/public/images/sdn_lab.png&quot;&gt;&lt;img src=&quot;http://remote-lab.net:4000/public/images/sdn_lab.png&quot; alt=&quot;sdn_lab&quot; width=&quot;686&quot; height=&quot;364&quot; class=&quot;aligncenter size-full wp-image-284&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s first enable the ports the hosts are connected to, set an openvswitch bridge where the hosts are connected, set the IP addreses on the hosts and check we have connectivity between the hosts. By default the L2 learning mechanism is done by the OpenvSwitch internals.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@ovs01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ip link &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;dev eth1 up
&lt;span class=&quot;gp&quot;&gt;root@ovs01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ip link &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;dev eth2 up
&lt;span class=&quot;gp&quot;&gt;root@ovs01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ovs-vsctl add-br sw0
&lt;span class=&quot;gp&quot;&gt;root@ovs01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ovs-vsctl add-port sw0 eth1
&lt;span class=&quot;gp&quot;&gt;root@ovs01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ovs-vsctl add-port sw0 eth2
&lt;span class=&quot;gp&quot;&gt;root@host01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ip l &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;dev eth1 up
&lt;span class=&quot;gp&quot;&gt;root@host01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ip addr add 192.168.0.1/24 dev eth1
&lt;span class=&quot;gp&quot;&gt;root@host01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ip a s dev eth1
3: eth1: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
    link/ether 52:54:00:56:e2:b2 brd ff:ff:ff:ff:ff:ff
    inet 192.168.0.1/24 scope global eth1
    inet6 fe80::5054:ff:fe56:e2b2/64 scope link
       valid_lft forever preferred_lft forever
&lt;span class=&quot;gp&quot;&gt;root@host02:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ip l &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;dev eth1 up
&lt;span class=&quot;gp&quot;&gt;root@host02:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ip addr add 192.168.0.2/24 dev eth1
&lt;span class=&quot;gp&quot;&gt;root@host02:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ip a s dev eth1
3: eth1: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
    link/ether 52:54:00:6e:22:0b brd ff:ff:ff:ff:ff:ff
    inet 192.168.0.2/24 scope global eth1
    inet6 fe80::5054:ff:fe6e:220b/64 scope link
       valid_lft forever preferred_lft forever
&lt;span class=&quot;gp&quot;&gt;root@host02:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ping 192.168.0.1 -c1
PING 192.168.0.1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;192.168.0.1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 56&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;84&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; bytes of data.
64 bytes from 192.168.0.1: &lt;span class=&quot;nv&quot;&gt;icmp_req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.946 ms
--- 192.168.0.1 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, &lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;0ms
rtt min/avg/max/mdev &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0.946/0.946/0.946/0.000 ms&amp;lt;/code&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s go to the controller:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@ctrl01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ls
floodlight  pox&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We see here that we have two directories that contain OpenFlow controller code - Floodlight and Pox. We’ll choose Pox for our example. Pox is platform for the rapid development and prototyping of network control software using Python. Pox comes with some preinstalled components. One of the components is called forwarding.l2_learning and it does what its name says - make OpenFlow switches act as a type of L2 learning switch. You can find the code in the pox/forwarding/l2_learning.py file. We’ll use this component for our example. Let’s start it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@ctrl01:~/pox&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;./pox.py --verbose forwarding.l2_learning
POX 0.2.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;carp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; / Copyright 2011-2013 James McCauley, et al.
DEBUG:core:POX 0.2.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;carp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; going up...
DEBUG:core:Running on CPython &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2.7.3/Jan 2 2013 13:56:14&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
DEBUG:core:Platform is Linux-3.2.0-4-amd64-x86_64-with-debian-7.4
INFO:core:POX 0.2.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;carp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; is up.
DEBUG:openflow.of_01:Listening on 0.0.0.0:6633&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next step is to configure OpenvSwitch to use the POX controller. OpenvSwitch has 2 ways of working with an OpenFlow controller - standalone and secure. In standalone mode, if the connection to the controller fails then it will fall back to using its internal logic to install the flows. While in secure mode it will not install any flows if the connection to the controller fails. We’ll use the standalone mode with 172.16.18.6 being the IP address of the POX controller.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@ovs01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ovs-vsctl &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;-fail-mode sw0 standalone
&lt;span class=&quot;gp&quot;&gt;root@ovs01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ovs-vsctl &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;-controller sw0 tcp:172.16.18.6:6633
&lt;span class=&quot;gp&quot;&gt;root@ovs01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ovs-vsctl show
653dfcd6-85a4-4f72-995f-9fa05b5203f9
    Bridge &lt;span class=&quot;s2&quot;&gt;&quot;sw0&quot;&lt;/span&gt;
        Controller &lt;span class=&quot;s2&quot;&gt;&quot;tcp:172.16.18.6:6633&quot;&lt;/span&gt;
            is_connected: &lt;span class=&quot;nb&quot;&gt;true
        &lt;/span&gt;fail_mode: standalone
        Port &lt;span class=&quot;s2&quot;&gt;&quot;sw0&quot;&lt;/span&gt;
            Interface &lt;span class=&quot;s2&quot;&gt;&quot;sw0&quot;&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;: internal
        Port &lt;span class=&quot;s2&quot;&gt;&quot;eth2&quot;&lt;/span&gt;
            Interface &lt;span class=&quot;s2&quot;&gt;&quot;eth2&quot;&lt;/span&gt;
        Port &lt;span class=&quot;s2&quot;&gt;&quot;eth1&quot;&lt;/span&gt;
            Interface &lt;span class=&quot;s2&quot;&gt;&quot;eth1&quot;&lt;/span&gt;
    ovs_version: &lt;span class=&quot;s2&quot;&gt;&quot;1.9.3&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can see the following message on the OpenFlow controller:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;INFO:openflow.of_01:[46-3e-63-ba-e5-46 1] connected
DEBUG:forwarding.l2_learning:Connection &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;46-3e-63-ba-e5-46 1]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s see what happens when we try to ping one host from the other:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;DEBUG:forwarding.l2_learning:installing flow &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;52:54:00:6e:22:0b.2 -&amp;gt; 52:54:00:56:e2:b2.1
DEBUG:forwarding.l2_learning:installing flow &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;52:54:00:56:e2:b2.1 -&amp;gt; 52:54:00:6e:22:0b.2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check the flows that are installed in the switch. Notice how the flows are defined:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@ovs01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ovs-ofctl dump-flows sw0
NXST_FLOW reply &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;xid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
 &lt;span class=&quot;nv&quot;&gt;cookie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x0, &lt;span class=&quot;nv&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;7.348s, &lt;span class=&quot;nv&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0, &lt;span class=&quot;nv&quot;&gt;n_packets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;7, &lt;span class=&quot;nv&quot;&gt;n_bytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;686, &lt;span class=&quot;nv&quot;&gt;idle_timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10, &lt;span class=&quot;nv&quot;&gt;hard_timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;30, &lt;span class=&quot;nv&quot;&gt;idle_age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1, &lt;span class=&quot;nv&quot;&gt;priority&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;65535,icmp,in_port&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2,vlan_tci&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x0000,dl_src&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;52:54:00:6e:22:0b,dl_dst&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;52:54:00:56:e2:b2,nw_src&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.0.2,nw_dst&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.0.1,nw_tos&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0,icmp_type&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0,icmp_code&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;output:1
 &lt;span class=&quot;nv&quot;&gt;cookie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x0, &lt;span class=&quot;nv&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;6.329s, &lt;span class=&quot;nv&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0, &lt;span class=&quot;nv&quot;&gt;n_packets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;6, &lt;span class=&quot;nv&quot;&gt;n_bytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;588, &lt;span class=&quot;nv&quot;&gt;idle_timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10, &lt;span class=&quot;nv&quot;&gt;hard_timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;30, &lt;span class=&quot;nv&quot;&gt;idle_age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1, &lt;span class=&quot;nv&quot;&gt;priority&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;65535,icmp,in_port&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1,vlan_tci&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x0000,dl_src&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;52:54:00:56:e2:b2,dl_dst&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;52:54:00:6e:22:0b,nw_src&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.0.1,nw_dst&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.0.2,nw_tos&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0,icmp_type&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8,icmp_code&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;output:2
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can take any of these headers and manipulate them as you wish. I believe the whole model provides great flexibility and freedom and it will lead to better networking software.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Ansible playbook: postfix with Mandrill relay</title>
   <link href="http://remote-lab.net:4000/ansible-postfix-with-mandrill"/>
   <updated>2014-09-14T12:52:15+00:00</updated>
   <id>http://remote-lab.net:4000/ansible-playbook-postfix-with-mandrill-relay</id>
   <content type="html">&lt;p&gt;In this post I will show how you can use Ansible to automatically install postfix mail server and configure it to relay through Mandrill. Mandrill is a transactional email platform that allows you to send up to 12.000 emails for free. I use it for my servers to avoid situations where the IP addresses assigned by my ISP are blacklisted on some RBL lists.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Ansible is a config manamegement software that runs agentless over SSH. You only need python installed on the remote nodes. Ansible’s configuration files are called playbooks. Playbooks are written as YAML files and they are used to manage configurations of and deployments to remote machines.&lt;/p&gt;

&lt;p&gt;Below is the playbook that I use to install postfix, add the required configuration to use Mandrill and reload the service in order to use the new configuration. I will explain the playbook below:&lt;/p&gt;

&lt;p&gt;true&lt;script src=&quot;https://gist.github.com/aa3d27a6fc948ed6e857.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;The hosts line contains the hosts group that this playbook will be applied to.
Each play contains a list of tasks, which are actually calls to Ansible modules. We see that the first task is called ‘Installs postfix mail server’ and it uses the apt module to get the postfix package in the installed stated. update_cache=true ensures that ‘apt-get update’ will be run before installing the postfix package. The notify section contains the handlers. Handlers are lists of tasks, not really any different from regular tasks, that are referenced by name. You can find them in the handlers sections. Looking at our example - the ‘start postfix’ handler ensures that the postfix server is started.&lt;/p&gt;

&lt;p&gt;The ‘Upload mandril authentication info’ task copies the /opt/files/postfix/mandril_passwd file on the ansible server to the remote node with /etc/postfix/mandril_passwd as a destination. The mandril_passwd file contains the authentication details for the Mandril platform. The mode key contains the permissions the destination file will have. The register line gets the result of the copy operation stored in the mandril variable. After getting the file copied we need to create the postfix lookup table based on that file. In order to do this we run the ‘postmap mandril_passwd’ handler which runs the ‘postmap /etc/postfix/mandril_passwd’ command only if the copy task was run successfully.&lt;/p&gt;

&lt;p&gt;The ‘Append mandril relay config’ task will add the config lines to the postfix main.cf files. We’ll store the lines in a dictionary. A dictionary is represented in a simple key: and value form:. Each new line will be the value stored in the ‘line’ key of each dictionary element. After adding the lines to main.cf we’ll restart postfix by running the ‘restart postfix’ handler.&lt;/p&gt;

&lt;p&gt;You may find below the output of running the playbook :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@ansible:/etc/ansible/playbooks&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ansible-playbook /etc/ansible/playbooks/playbook.yml
PLAY &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;basenodes] &lt;span class=&quot;k&quot;&gt;**************************************************************&lt;/span&gt; 
GATHERING FACTS &lt;span class=&quot;k&quot;&gt;***************************************************************&lt;/span&gt; 
TASK: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Installs postfix mail server] &lt;span class=&quot;k&quot;&gt;******************************************&lt;/span&gt;
changed: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;node01.remote-lab.net]
TASK: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Upload mandril authentication info] &lt;span class=&quot;k&quot;&gt;************************************&lt;/span&gt;
changed: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;node01.remote-lab.net]
TASK: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Append mandril relay config] &lt;span class=&quot;k&quot;&gt;*******************************************&lt;/span&gt;
changed: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;node01.remote-lab.net] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'line'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'smtp_sasl_auth_enable = yes'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
changed: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;node01.remote-lab.net] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'line'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'smtp_sasl_password_maps = hash:/etc/postfix/mandril_passwd'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
changed: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;node01.remote-lab.net] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'line'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'smtp_sasl_security_options = noanonymous'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
changed: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;node01.remote-lab.net] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'line'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'smtp_use_tls = yes'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
changed: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;node01.remote-lab.net] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'line'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'relayhost = [smtp.mandrillapp.com]'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
NOTIFIED: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;start postfix] &lt;span class=&quot;k&quot;&gt;*****************************************************&lt;/span&gt;
ok: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;node01.remote-lab.net]
NOTIFIED: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;postmap mandril_passwd] &lt;span class=&quot;k&quot;&gt;********************************************&lt;/span&gt;
changed: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;node01.remote-lab.net]
NOTIFIED: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;restart postfix] &lt;span class=&quot;k&quot;&gt;***************************************************&lt;/span&gt;
changed: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;node01.remote-lab.net]
PLAY RECAP &lt;span class=&quot;k&quot;&gt;********************************************************************&lt;/span&gt;
node01.remote-lab.net      : &lt;span class=&quot;nv&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;7    &lt;span class=&quot;nv&quot;&gt;changed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;5    &lt;span class=&quot;nv&quot;&gt;unreachable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0    &lt;span class=&quot;nv&quot;&gt;failed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>Lab - basic OSPF routing scenario</title>
   <link href="http://remote-lab.net:4000/basic-ospf-routing-lab"/>
   <updated>2014-05-21T20:25:28+00:00</updated>
   <id>http://remote-lab.net:4000/lab-basic-ospf-routing-scenario</id>
   <content type="html">&lt;p&gt;In this post post we’ll see how we can do a basic routing scenario by using the remote-lab.net virtual appliances. Below is the logical diagram of the scenario. Our objective is to esatblish connectivity between the 2 clients: host01 - 10.0.0.10 and host02 - 10.0.1.10.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Each of the hosts will be connected to a router that  will be the first hop router for the hosts subnet. The 2 routers will be connected by 2 redundant links. We’ll set up OSPF as a routing protocol between the 2 routers that will be used to advertise the clients subnets. 
rtr01 is an Arista vEOS and rtr02 is running Vyatta core. host01 and host02 are running Debian.
&lt;a href=&quot;http://remote-lab.net:4000/public/images/routing-lab-New-Page.png&quot;&gt;&lt;img src=&quot;http://remote-lab.net:4000/public/images/routing-lab-New-Page.png&quot; alt=&quot;ospf routing lab logical&quot; width=&quot;821&quot; height=&quot;729&quot; class=&quot;aligncenter size-full wp-image-260&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let’s get to the physical setup (which is actually virtual as all the components are VMs ). Each system (clients and routers) will be connected to the layer 2 switch (openvswitch running on Linux). We’ll need to set up the links that connect the routers to the switch as trunks in order to allow multiple vlans to get through. The ports that connect the clients to the switch will be set as access ports. Please note that in a real world scenario you’ll need to connect the routers by 2 different physical links across separate geographical paths to ensure rendundancy. Below is the physical diagram of the setup.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://remote-lab.net:4000/public/images/routing-physical-New-Page.png&quot;&gt;&lt;img src=&quot;http://remote-lab.net:4000/public/images/routing-physical-New-Page.png&quot; alt=&quot;routing lab physical&quot; width=&quot;745&quot; height=&quot;625&quot; class=&quot;aligncenter size-full wp-image-259&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First thing we need to do is to configure the openvswitch. We’ll create a bridge that contains all the ports and set up the client ports in access mode. By default all the openvswitch ports are trunks.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;lab@console01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ovs01
&lt;span class=&quot;gp&quot;&gt;root@ovs01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;i &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;1..4&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;ip l &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;dev eth&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; up;done
&lt;span class=&quot;gp&quot;&gt;root@ovs01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ovs-vsctl add-br l2switch
&lt;span class=&quot;gp&quot;&gt;root@ovs01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ovs-vsctl add-port l2switch eth1 &lt;span class=&quot;nv&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10
&lt;span class=&quot;gp&quot;&gt;root@ovs01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ovs-vsctl add-port l2switch eth2 &lt;span class=&quot;nv&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;20
&lt;span class=&quot;gp&quot;&gt;root@ovs01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ovs-vsctl add-port l2switch eth3
&lt;span class=&quot;gp&quot;&gt;root@ovs01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ovs-vsctl add-port l2switch eth4
&lt;span class=&quot;gp&quot;&gt;root@ovs01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ovs-vsctl show
653dfcd6-85a4-4f72-995f-9fa05b5203f9
    Bridge &lt;span class=&quot;s2&quot;&gt;&quot;l2switch&quot;&lt;/span&gt;
        Port &lt;span class=&quot;s2&quot;&gt;&quot;l2switch&quot;&lt;/span&gt;
            Interface &lt;span class=&quot;s2&quot;&gt;&quot;l2switch&quot;&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;: internal
        Port &lt;span class=&quot;s2&quot;&gt;&quot;eth3&quot;&lt;/span&gt;
            Interface &lt;span class=&quot;s2&quot;&gt;&quot;eth3&quot;&lt;/span&gt;
        Port &lt;span class=&quot;s2&quot;&gt;&quot;eth2&quot;&lt;/span&gt;
            tag: 20
            Interface &lt;span class=&quot;s2&quot;&gt;&quot;eth2&quot;&lt;/span&gt;
        Port &lt;span class=&quot;s2&quot;&gt;&quot;eth4&quot;&lt;/span&gt;
            Interface &lt;span class=&quot;s2&quot;&gt;&quot;eth4&quot;&lt;/span&gt;
        Port &lt;span class=&quot;s2&quot;&gt;&quot;eth1&quot;&lt;/span&gt;
            tag: 10
            Interface &lt;span class=&quot;s2&quot;&gt;&quot;eth1&quot;&lt;/span&gt;
    ovs_version: &lt;span class=&quot;s2&quot;&gt;&quot;1.9.3&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Set up the client interfaces IP addresses and default routes:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;lab@console01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;host01
&lt;span class=&quot;gp&quot;&gt;root@host01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ip l &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;dev eth1 up
&lt;span class=&quot;gp&quot;&gt;root@host01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ip addr add 10.0.0.10/24 dev eth1
&lt;span class=&quot;gp&quot;&gt;root@host01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ip route add default via 10.0.0.1
&lt;span class=&quot;gp&quot;&gt;lab@console01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;host02
&lt;span class=&quot;gp&quot;&gt;root@host02:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ip l &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;dev eth1 up
&lt;span class=&quot;gp&quot;&gt;root@host02:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ip addr add 10.0.1.10/24 dev eth1
&lt;span class=&quot;gp&quot;&gt;root@host01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ip route add default via 10.0.1.1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Configure the vlans and SVI IP addresses on the routers:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;lab@console01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;rtr01
rtr01&amp;gt;en
rtr01#configure
rtr01&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#vlan 10&lt;/span&gt;
rtr01&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-vlan-10&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#name host01-vlan&lt;/span&gt;
rtr01&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-vlan-10&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#vlan 100&lt;/span&gt;
rtr01&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-vlan-100&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#name path1-vlan&lt;/span&gt;
rtr01&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-vlan-100&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#vlan 200&lt;/span&gt;
rtr01&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-vlan-200&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#name path2-vlan&lt;/span&gt;
rtr01&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#int ethernet 1&lt;/span&gt;
rtr01&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-if-Et1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#switchport mode trunk&lt;/span&gt;
rtr01&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-if-Et1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#switchport trunk allowed vlan 10,100,200&lt;/span&gt;
rtr01&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-vlan-200&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#int vlan 10&lt;/span&gt;
rtr01&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-if-Vl10&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#ip address 10.0.0.1/24&lt;/span&gt;
rtr01&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-if-Et1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#int vlan 100&lt;/span&gt;
rtr01&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-if-Vl100&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#ip address 192.168.0.1/30&lt;/span&gt;
rtr01&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-if-Vl100&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#int vlan 200&lt;/span&gt;
rtr01&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-if-Vl200&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#ip address 192.168.0.5/30                                                         &lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;lab@console01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;rtr02
&lt;span class=&quot;gp&quot;&gt;admin@rtr02:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;configure
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;edit]
&lt;span class=&quot;gp&quot;&gt;admin@rtr02# &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;interfaces ethernet eth1 vif 20 address 10.0.1.1/24
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;edit]
&lt;span class=&quot;gp&quot;&gt;admin@rtr02# &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;interfaces ethernet eth1 vif 100 address 192.168.0.2/30
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;edit]
&lt;span class=&quot;gp&quot;&gt;admin@rtr02# &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;interfaces ethernet eth1 vif 200 address 192.168.0.6/30
&lt;span class=&quot;gp&quot;&gt;admin@rtr02# &lt;/span&gt;commit
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;edit]
&lt;span class=&quot;gp&quot;&gt;admin@rtr02# &lt;/span&gt;save
Saving configuration to &lt;span class=&quot;s1&quot;&gt;'/config/config.boot'&lt;/span&gt;...
Done&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s do some connectivity tests:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rtr01&amp;gt;ping 10.0.0.10
PING 10.0.0.10 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;10.0.0.10&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 72&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;100&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; bytes of data.
80 bytes from 10.0.0.10: &lt;span class=&quot;nv&quot;&gt;icmp_req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;12.9 ms    
rtr01&amp;gt;ping 192.168.0.2
PING 192.168.0.2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;192.168.0.2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 72&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;100&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; bytes of data.
80 bytes from 192.168.0.2: &lt;span class=&quot;nv&quot;&gt;icmp_req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;16.7 ms                
rtr01&amp;gt;ping 192.168.0.6
PING 192.168.0.6 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;192.168.0.6&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 72&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;100&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; bytes of data.
80 bytes from 192.168.0.6: &lt;span class=&quot;nv&quot;&gt;icmp_req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;13.2 ms       
&lt;span class=&quot;gp&quot;&gt;admin@rtr02:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ping 10.0.1.10
PING 10.0.1.10 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;10.0.1.10&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 56&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;84&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; bytes of data.
64 bytes from 10.0.1.10: &lt;span class=&quot;nv&quot;&gt;icmp_req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3.74 ms&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that we have the connectivity established on the connected links let’s move forward and set up OSPF :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;lab@console01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;rtr01
rtr01&amp;gt;en
rtr01#configure
rtr01&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#ip routing&lt;/span&gt;
rtr01&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#router ospf 10&lt;/span&gt;
rtr01&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-router-ospf&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#network 10.0.0.1 0.0.0.0 area 0&lt;/span&gt;
rtr01&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-router-ospf&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#network 192.168.0.1 0.0.0.0 area 0&lt;/span&gt;
rtr01&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-router-ospf&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#network 192.168.0.5 0.0.0.0 area 0 &lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;lab@console01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;rtr02
&lt;span class=&quot;gp&quot;&gt;admin@rtr02:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;configure
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;edit]
admin@rtr02#
&lt;span class=&quot;gp&quot;&gt;admin@rtr02# &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;protocols ospf area 0 network 10.0.1.0/24
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;edit]
&lt;span class=&quot;gp&quot;&gt;admin@rtr02# &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;protocols ospf area 0 network 192.168.0.0/30
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;edit]
&lt;span class=&quot;gp&quot;&gt;admin@rtr02# &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;protocols ospf area 0 network 192.168.0.4/30
&lt;span class=&quot;gp&quot;&gt;admin@rtr02# &lt;/span&gt;commit&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once that we have the ospf configuration done we can proceed and check the OSPF neighbor status on the 2 routers. We’ll see that we have 2 equal cost paths to the hosts subnets. This means that the routers will load balance the packets through the 2 links.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rtr01#show ip ospf neighbor
Neighbor ID     VRF    Pri   State            Dead Time   Address         Interface
172.16.18.5     default    1   FULL/BDR         00:00:31    192.168.0.6     Vlan200
172.16.18.5     default    1   FULL/DR          00:00:31    192.168.0.2     Vlan100    
rtr01#show ip route 10.0.1.0/24
Codes: C - connected, S - static, K - kernel,
       O - OSPF, IA - OSPF inter area, E1 - OSPF external &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;1,
       E2 - OSPF external &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;2, N1 - OSPF NSSA external &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;1,
       N2 - OSPF NSSA external type2, B I - iBGP, B E - eBGP,
       R - RIP, I - ISIS, A B - BGP Aggregate, A O - OSPF Summary                                                                                                                             
 O      10.0.1.0/24 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;110/20] via 192.168.0.2, Vlan100
                             via 192.168.0.6, Vlan200                     
&lt;span class=&quot;gp&quot;&gt;admin@rtr02:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;show ip ospf neighbor 
    Neighbor ID Pri State           Dead Time Address         Interface            RXmtL RqstL DBsmL
192.168.0.5       1 Full/Backup       36.750s 192.168.0.1     eth1.100:192.168.0.2     0     0     0
192.168.0.5       1 Full/DR           36.960s 192.168.0.5     eth1.200:192.168.0.6     0     0     0 
&lt;span class=&quot;gp&quot;&gt;admin@rtr02:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;show ip route 10.0.0.0/24
Routing entry &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;10.0.0.0/24
  Known via &lt;span class=&quot;s2&quot;&gt;&quot;ospf&quot;&lt;/span&gt;, distance 110, metric 20, best
  Last update 00:04:42 ago
  &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 192.168.0.1, via eth1.100
  &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 192.168.0.5, via eth1.200&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What if we want to set one of the links as primary ? We need to set a higher cost for the secondary link. At this time both of the paths have a cost of 20 (10 for the network segment that connects the 2 routers + 10 for the host network segment). Let’schoose the vlan 200 as secondary and increase the cost for the secondary link to 11.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rtr01#configure
rtr01&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#int vlan 200&lt;/span&gt;
rtr01&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-if-Vl200&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#ip ospf cost 11&lt;/span&gt;
rtr01&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-if-Vl200&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#show ip route 10.0.1.0/24&lt;/span&gt;
Codes: C - connected, S - static, K - kernel,
       O - OSPF, IA - OSPF inter area, E1 - OSPF external &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;1,
       E2 - OSPF external &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;2, N1 - OSPF NSSA external &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;1,
       N2 - OSPF NSSA external type2, B I - iBGP, B E - eBGP,
       R - RIP, I - ISIS, A B - BGP Aggregate, A O - OSPF Summary                                                                                                                             
 O      10.0.1.0/24 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;110/20] via 192.168.0.2, Vlan100&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can see that the routing table only contains the vlan 100 path. What happens if vlan 100 goes down ?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rtr01&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#int vlan 100&lt;/span&gt;
rtr01&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-if-Vl100&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#shut&lt;/span&gt;
rtr01&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-if-Vl100&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#show ip route 10.0.1.0/24&lt;/span&gt;
Codes: C - connected, S - static, K - kernel,
       O - OSPF, IA - OSPF inter area, E1 - OSPF external &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;1,
       E2 - OSPF external &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;2, N1 - OSPF NSSA external &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;1,
       N2 - OSPF NSSA external type2, B I - iBGP, B E - eBGP,
       R - RIP, I - ISIS, A B - BGP Aggregate, A O - OSPF Summary                                                                                                                             
 O      10.0.1.0/24 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;110/21] via 192.168.0.6, Vlan200&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can see that the vlan 200 path is installed in the routing table with a cost of 21 ( 11 + 10).&lt;/p&gt;

&lt;p&gt;I hope this post is useful for getting an idea of how you can use the virtual lab. Please let me know if you any questions.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Virtualized application infrastructure</title>
   <link href="http://remote-lab.net:4000/virtualized-application-infrastructure"/>
   <updated>2014-05-07T12:32:41+00:00</updated>
   <id>http://remote-lab.net:4000/virtualized-application-infrastructure</id>
   <content type="html">&lt;p&gt;In this post I’ll show how you can build a secure virtualized infrastructure for a basic webapp. We will break the setup into VMs that provide isolated services. You can find below the infrastructure diagram. The followings steps will show how you can set up a bare-metal server running Debian Wheezy to act as a KVM hypervisor and the process of deploying and configuring the VMs and the services they are running.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;http://remote-lab.net:4000/public/images//rlug-New-Page.png&quot;&gt;&lt;img src=&quot;http://remote-lab.net:4000/public/images//rlug-New-Page.png&quot; alt=&quot;rlug - New Page&quot; width=&quot;832&quot; height=&quot;814&quot; class=&quot;aligncenter size-full wp-image-255&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Install kvm and tools:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@vmm:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;aptitude install qemu-kvm libvirt-bin virt-manager virt-viewer&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Install openvswitch :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@vmm:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;aptitude install openvswitch-switch openvswitch-datapath-source&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Build Open vSwitch datapath kernel module:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@vmm:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;module-assistant auto-install openvswitch-datapath&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The management IP address of the hypervisor and the other public IP addresses are assigned on the same interface by the hosting provider. In order to provide Internet connectivity for the VMs we need to create a bridge containing the physical interface where the public IPs are routed and add the VMs ports to this bridge. The trouble is that since this is also the management link we’ll lose connectivity after adding the physical interface to the bridge. After this operation we need to assign the management IP address to the bridge interface. For doing this we’ll edit the /etc/network/interfaces file.&lt;/p&gt;

&lt;p&gt;Add openvswitch bridges:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@vmm:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ovs-vsctl add-br sw-net&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Edit the /etc/network/interfaces file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@vmm:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;cat /etc/network/interfaces
auto sw-net
iface sw-net inet static
  address   46.4.71.66
  broadcast 46.4.71.95
  netmask   255.255.255.224
  gateway   46.4.71.65
pre-up ip link &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;dev eth0 up&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At boot time the openvswitch daemon is started after the network init script so when the network init script is run it won’t find the sw-net interface defined in /etc/network/interfaces file. A dirty workaround for this is to re-run the network init script after all the services are loaded. In order to do this we need to edit the /etc/rc.local file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@vmm:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;cat /etc/rc.local
/etc/init.d/networking restart
&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s add the physical interface to the bridge. After this we should either restart the network service from the console or do a hard reset:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@vmm:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ovs-vsctl add-port sw-net eth0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next step is to add the second bridge, where the internal network ports will be connected&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@vmm:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ovs-vsctl add-br sw-lan&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I prefer using virt-install for new VMs provisioning. The problem with it is that it currently doesn’t support Open vSwitch bridges so we’ll need to adjust it a little by adding the following line to the /usr/lib/pymodules/python2.7/virtinst/VirtualNetworkInterface.py file. This will add the virtualport tag to the VM xml definition:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@vmm:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;diff -u /usr/lib/pymodules/python2.7/virtinst/VirtualNetworkInterface.py /usr/lib/pymodules/python2.7/virtinst/VirtualNetworkInterface.py.orig
--- /usr/lib/pymodules/python2.7/virtinst/VirtualNetworkInterface.py	2014-05-06 22:06:21.396072330 +0200
+++ /usr/lib/pymodules/python2.7/virtinst/VirtualNetworkInterface.py.orig	2014-05-06 22:13:17.121958858 +0200
@@ -384,7 +384,6 @@
         xml +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;      &amp;lt;mac address='%s'/&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; % self.macaddr
         xml +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; target_xml
         xml +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; model_xml
-        xml +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;      &amp;lt;virtualport type='openvswitch'/&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
         xml +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;    &amp;lt;/interface&amp;gt;&quot;&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;xml&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that we have the networking ready the last thing that we need are the storage files that the VMs will use. For creating the files we use the qemu-img utility. I prefer qcow2 files as they provide thin provision and snapshot capabilities. /var/lib/libvirt/images is the default directory used by libvirt so let’s create the storage files here:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@vmm:/var/lib/libvirt/images&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;qemu-img create -f qcow2 rtr01.qcow2 10G
Formatting &lt;span class=&quot;s1&quot;&gt;'rtr01.qcow2'&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;qcow2 &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10737418240 &lt;span class=&quot;nv&quot;&gt;encryption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;off &lt;span class=&quot;nv&quot;&gt;cluster_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;65536&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can now create the VM and start the OS installation. We’ll first install the rtr01 VM as it will provide Internet connectivity for the rest of the VMs in the internal network. The following command will generate a VM called rtr01 with 4 vCPUs, 4GB of ram, storage file located at /var/lib/libvirt/images/rtr01.qcow2 and 2 network interfaces - one in the bridge connected to the Internet and another connected to the internal network, the console is presented over VNC and it will first boot from the cdrom device loaded from the /var/lib/libvirt/images/vyatta-livecd_VC6.6R1_amd64.iso file. The disk and network interface will use paravirtualized drivers to obtain increased I/O performance.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@vmm:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;virt-install --name rtr01 --vcpus&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4 --ram&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4096 --disk &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/lib/libvirt/images/rtr01.qcow2,bus&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;virtio --network &lt;span class=&quot;nv&quot;&gt;bridge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;sw-net,model&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;virtio --network &lt;span class=&quot;nv&quot;&gt;bridge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;sw-lan,model&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;virtio --graphics vnc --cdrom /var/lib/libvirt/images/vyatta-livecd_VC6.6R1_amd64.iso --boot cdrom&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After this command is issued a console windows will pop up and it will prompt the cdrom installation. After finishing the installation we can proceed to configuring the device:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# set interfaces IP addresses&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;interfaces ethernet eth0 mac 00:50:56:00:5e:97
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;interfaces ethernet eth0 address 46.4.71.77/27
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;protocols static route 0.0.0.0/0 next-hop 46.4.71.65
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;system host-name rtr01
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;system domain-name nullzero.me
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;interfaces ethernet eth1 10.0.1.1/24
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;interfaces ethernet eth1 address 10.0.1.1/24
&lt;span class=&quot;c&quot;&gt;# set SNAT for internal network&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;nat &lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;rule 10 &lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;address 10.0.1.0/24
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;nat &lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;rule 10 outbound-interface eth0
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;nat &lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;rule 10 translation address masquerade
&lt;span class=&quot;c&quot;&gt;# set DNAT for the request coming on port tcp 80 on the public IP&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;nat destination rule 10 destination address 46.4.71.77
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;nat destination rule 10 inbound-interface eth0
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;nat destination rule 10 destination port 80
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;nat destination rule 10 translation address 10.0.1.2
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;nat destination rule 10 translation port 80
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;nat destination rule 10 protocol tcp
&lt;span class=&quot;c&quot;&gt;# generate server and client certificates and keys&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;vyatta@rtr01:~$ &lt;/span&gt;sudo -s
&lt;span class=&quot;gp&quot;&gt;vbash-4.1# &lt;/span&gt;cp -R /usr/share/doc/openvpn/examples/easy-rsa/2.0/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; /etc/openvpn/
edit KEY_COUNTRY, KEY_PROVINCE, KEY_CITY, KEY_ORG, KEY_EMAIL variables
&lt;span class=&quot;gp&quot;&gt;vbash-4.1# &lt;/span&gt;vi /etc/openvpn/vars
&lt;span class=&quot;gp&quot;&gt;vbash-4.1# &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /etc/openvpn
&lt;span class=&quot;gp&quot;&gt;vbash-4.1# &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;vars
&lt;span class=&quot;gp&quot;&gt;vbash-4.1# &lt;/span&gt;./clean-all
&lt;span class=&quot;gp&quot;&gt;vbash-4.1# &lt;/span&gt;./build-ca
&lt;span class=&quot;gp&quot;&gt;vbash-4.1# &lt;/span&gt;./build-dh
&lt;span class=&quot;gp&quot;&gt;vbash-4.1# &lt;/span&gt;./build-key-server rtr01
&lt;span class=&quot;gp&quot;&gt;vbash-4.1# &lt;/span&gt;./build-key client
&lt;span class=&quot;gp&quot;&gt;vbash-4.1# &lt;/span&gt;mkdir /config/auth
&lt;span class=&quot;gp&quot;&gt;vbash-4.1# &lt;/span&gt;cp -R /etc/openvpn/keys/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; /config/auth
&lt;span class=&quot;c&quot;&gt;# configure the server certificates and key location&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;interfaces openvpn vtun0 tls ca-cert-file /config/auth/ca.crt
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;interfaces openvpn vtun0 tls cert-file /config/auth/rtr01.crt
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;interfaces openvpn vtun0 tls dh-file /config/auth/dh1024.pem
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;interfaces openvpn vtun0 tls key-file /config/auth/rtr01.key
&lt;span class=&quot;c&quot;&gt;# configure the openvpn server&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;interfaces openvpn vtun0 mode server
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;interfaces openvpn vtun0 server subnet 172.16.17.0/24
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;interfaces openvpn vtun0 server push-route 10.0.1.0/24
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;interfaces openvpn vtun0 openvpn-option &lt;span class=&quot;s2&quot;&gt;&quot;--comp-lzo --mssfix --tun-mtu 1488&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# openvpn client config file&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;marius@remoteur:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;cat /etc/openvpn/nullzero.conf
client
dev tun
proto udp
remote 46.4.71.77 1194
resolv-retry infinite
nobind
persist-key
persist-tun
ca /etc/openvpn/nullzero/ca.crt
cert /etc/openvpn/nullzero/client.crt
key /etc/openvpn/nullzero/client.key
ns-cert-type server
comp-lzo
verb 3
&lt;span class=&quot;c&quot;&gt;#configure firewall&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;firewall state-policy established action &lt;span class=&quot;s1&quot;&gt;'accept'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;firewall state-policy related action &lt;span class=&quot;s1&quot;&gt;'accept'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;firewall all-ping &lt;span class=&quot;s1&quot;&gt;'enable'&lt;/span&gt;
edit firewall name rtr01
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;default-action &lt;span class=&quot;s1&quot;&gt;'drop'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;rule 10 action accept
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;rule 10 destination port 22
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;rule 10 protocol tcp
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;rule 11 action accept
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;rule 11 destination port 80
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;rule 11 protocol tcp
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;rule 12 action accept
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;rule 12 destination port 1194
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;rule 12 protocol udp
&lt;span class=&quot;nb&quot;&gt;exit
set &lt;/span&gt;interfaces ethernet eth0 firewall &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;name rtr01&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After completing these steps we should have a working router, firewall and VPN server.&lt;/p&gt;

&lt;p&gt;Now let’s continue with creating the second VM. We’ll do a network install from minimal CD. First create the storage file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@vmm:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;qemu-img create -f qcow2 /var/lib/libvirt/images/lb01.qcow2 10G
Formatting &lt;span class=&quot;s1&quot;&gt;'/var/lib/libvirt/images/lb01.qcow2'&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;qcow2 &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10737418240 &lt;span class=&quot;nv&quot;&gt;encryption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;off &lt;span class=&quot;nv&quot;&gt;cluster_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;65536&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next we can start the installation process by using the cdrom file located at /var/lib/libvirt/images/debian-7.5.0-amd64-netinst.iso&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@vmm:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;virt-install --name lb01 --vcpus&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2 --ram&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4096 --disk &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/lib/libvirt/images/lb01.qcow2,bus&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;virtio --network &lt;span class=&quot;nv&quot;&gt;bridge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;sw-lan,model&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;virtio  --graphics vnc --cdrom /var/lib/libvirt/images/debian-7.5.0-amd64-netinst.iso --boot cdrom&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After completing the OS installation we have a fresh running Debian Wheezy system. We don’t want to repeat the install process for the other files so we’ll just copy the existing image of the Debian system and modify the IP settings and hostnames. We first copy the base image, then attach it by using qemu-nbd, mount the partition where the file system resides and then edit the files that we need.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@vmm:/var/lib/libvirt/images&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;cp lb01.qcow2 db01.qcow2; cp lb01.qcow2 web01.qcow2
&lt;span class=&quot;gp&quot;&gt;root@vmm:/var/lib/libvirt/images&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;modprobe nbd &lt;span class=&quot;nv&quot;&gt;max_part&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8
&lt;span class=&quot;gp&quot;&gt;root@vmm:/var/lib/libvirt/images&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;qemu-nbd -c /dev/nbd0 web01.qcow2
&lt;span class=&quot;gp&quot;&gt;root@vmm:/var/lib/libvirt/images&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;kpartx -a /dev/nbd0
&lt;span class=&quot;gp&quot;&gt;root@vmm:/var/lib/libvirt/images&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;mount /dev/mapper/nbd0p1 /mnt
&lt;span class=&quot;gp&quot;&gt;root@vmm:/var/lib/libvirt/images&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;vim /mnt/etc/network/interfaces
&lt;span class=&quot;gp&quot;&gt;root@vmm:/var/lib/libvirt/images&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;vim /mnt/etc/hosts
&lt;span class=&quot;gp&quot;&gt;root@vmm:/var/lib/libvirt/images&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;vim /mnt/etc/hostname
&lt;span class=&quot;gp&quot;&gt;root@vmm:/var/lib/libvirt/images&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;umount /mnt
&lt;span class=&quot;gp&quot;&gt;root@vmm:/var/lib/libvirt/images&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;kpartx -d /dev/nbd0
&lt;span class=&quot;gp&quot;&gt;root@vmm:/var/lib/libvirt/images&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;qemu-nbd -d /dev/nbd0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We repeat the steps above for the db01.qcow2 file.
Let’s now create the web01 and db01 VMs. Since we already have the base storage files we don’t need to run the OS installation:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@vmm:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;virt-install --name web01 --vcpus&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4 --ram&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4096 --disk &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/lib/libvirt/images/web01.qcow2,bus&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;virtio --network &lt;span class=&quot;nv&quot;&gt;bridge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;sw-lan,model&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;virtio  --graphics vnc --import
&lt;span class=&quot;gp&quot;&gt;root@vmm:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;virt-install --name db01 --vcpus&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4 --ram&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4096 --disk &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/lib/libvirt/images/db01.qcow2,bus&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;virtio --network &lt;span class=&quot;nv&quot;&gt;bridge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;sw-lan,model&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;virtio  --graphics vnc --import&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once we have booted al the VMs let’s start configuring the services.
On the http load balancer we’ll install varnish and configure the web server as backend:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@lb01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;aptitude install varnish
&lt;span class=&quot;gp&quot;&gt;root@lb01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;sed -i &lt;span class=&quot;s1&quot;&gt;'s/6081/80/'&lt;/span&gt; /etc/default/varnish
&lt;span class=&quot;gp&quot;&gt;root@lb01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;sed -i &lt;span class=&quot;s1&quot;&gt;'s/127.0.0.1/10.0.1.3/'&lt;/span&gt; /etc/varnish/default.vcl
&lt;span class=&quot;gp&quot;&gt;root@lb01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;sed -i &lt;span class=&quot;s1&quot;&gt;'s/8080/80/'&lt;/span&gt; /etc/varnish/default.vcl
&lt;span class=&quot;gp&quot;&gt;root@lb01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;/etc/init.d/varnish restart&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On the web server we’ll install nginx and php-fpm and configure the default vhost:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@web01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;aptitude install nginx php5-fpm php5-mysql&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Add the following location block to the first server block:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    location ~ &lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;php&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        fastcgi_pass   unix:/var/run/php5-fpm.sock;
        fastcgi_index  index.php;
        include        fastcgi_params;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Create an index file in the document root that will query the database server:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@web01:/srv/www&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;cat index.php
&amp;lt;?php
&lt;span class=&quot;nv&quot;&gt;$con&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mysqli_connect&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10.0.1.4&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;user&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;parola&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
&lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; mysqli_query&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$con&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;SELECT * FROM testable&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
&lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; mysqli_fetch_array&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;;
mysqli_close&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$con&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
?&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On the database server we’ll install mysql server and create a dummy database and table;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@db01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;aptitude install mysql-server
&lt;span class=&quot;gp&quot;&gt;root@db01:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;mysql
Welcome to the MySQL monitor.  Commands end with ; or &lt;span class=&quot;se&quot;&gt;\g&lt;/span&gt;.
Your MySQL connection id is 43
Server version: 5.5.37-0+wheezy1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Debian&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Copyright &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 2000, 2014, Oracle and/or its affiliates. All rights reserved.
Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.
Type &lt;span class=&quot;s1&quot;&gt;'help;'&lt;/span&gt; or &lt;span class=&quot;s1&quot;&gt;'\h'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;help. Type &lt;span class=&quot;s1&quot;&gt;'\c'&lt;/span&gt; to clear the current input statement.
&lt;span class=&quot;gp&quot;&gt;mysql&amp;gt; &lt;/span&gt;create database &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;;
&lt;span class=&quot;gp&quot;&gt;mysql&amp;gt; &lt;/span&gt;use &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;;
&lt;span class=&quot;gp&quot;&gt;mysql&amp;gt; &lt;/span&gt;CREATE TABLE testable &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello VARCHAR&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;20&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;;
&lt;span class=&quot;gp&quot;&gt;mysql&amp;gt; &lt;/span&gt;INSERT INTO testable &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hello&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; VALUES&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
&lt;span class=&quot;gp&quot;&gt;mysql&amp;gt; &lt;/span&gt;CREATE USER &lt;span class=&quot;s1&quot;&gt;'user'&lt;/span&gt;@&lt;span class=&quot;s1&quot;&gt;'10.0.1.3'&lt;/span&gt; IDENTIFIED BY &lt;span class=&quot;s1&quot;&gt;'parola'&lt;/span&gt;;
&lt;span class=&quot;gp&quot;&gt;mysql&amp;gt; &lt;/span&gt;GRANT ALL PRIVILEGES ON &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; . &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; TO &lt;span class=&quot;s1&quot;&gt;'user'&lt;/span&gt;@&lt;span class=&quot;s1&quot;&gt;'10.0.1.3'&lt;/span&gt;;
&lt;span class=&quot;gp&quot;&gt;mysql&amp;gt; &lt;/span&gt;FLUSH PRIVILEGES;
&lt;span class=&quot;gp&quot;&gt;mysql&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After this final step we have our setup ready and http://app.nullzero.me/ should show the Hello World!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>JunOS interfaces IP addresses DNS records generator</title>
   <link href="http://remote-lab.net:4000/junos-interfaces-ip-addresses-dns-records-generator"/>
   <updated>2014-02-23T21:28:17+00:00</updated>
   <id>http://remote-lab.net:4000/junos-interfaces-ip-addresses-a-and-ptr-records-generator</id>
   <content type="html">&lt;p&gt;This post is closely related to the previous one where I showed how you can parse the interfaces IP addresses from a curly bracket JunOS config file. The following script will be used to generate A and PTR records for a BIND zone file. Please note that the script needs to be run within the same directory as the Perl parser script and the config file.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The entries will have the following format:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;-fpc-pic-port 300 IN A &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt; IN PTR &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;-fpc-pic-port.hostname.domain&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#/bin/bash&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PERL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/usr/bin/perl'&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PARSER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./parser.pl'&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CONFIG_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'config.txt'&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CONFIG_SYS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'sys'&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CONFIG_INT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'int'&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PERL&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PARSER&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CONFIG_SYS&lt;/span&gt; | grep host-name | sed -e s/host-name// -e s/&lt;span class=&quot;se&quot;&gt;\;&lt;/span&gt;// | tr &lt;span class=&quot;s1&quot;&gt;'\r'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt; | sed -e s/&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;//g&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PERL&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PARSER&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CONFIG_SYS&lt;/span&gt; | grep domain-name | sed -e s/domain-name// -e s/&lt;span class=&quot;se&quot;&gt;\;&lt;/span&gt;// | tr &lt;span class=&quot;s1&quot;&gt;'\r'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt; | sed -e s/&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;//g&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;i &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;grep &lt;span class=&quot;s2&quot;&gt;&quot;ge-[0-9]&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[0-9]&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[0-9] {&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\|&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ae[0-9] {&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\|&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;lo[0-9] {&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CONFIG_FILE&lt;/span&gt; | sed -e s/&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;//g  -e s/&lt;span class=&quot;se&quot;&gt;\{&lt;/span&gt;// | tr &lt;span class=&quot;s1&quot;&gt;'\r'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;do
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;intname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; | sed s/&lt;span class=&quot;se&quot;&gt;\\\/&lt;/span&gt;/-/g&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;j &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PERL&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PARSER&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CONFIG_INT&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; | grep unit | sed -e s/&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;unit//g  -e s/&lt;span class=&quot;se&quot;&gt;\{&lt;/span&gt;// -e s/&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;//g | tr &lt;span class=&quot;s1&quot;&gt;'\r'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;do
                &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;inetaddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PERL&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PARSER&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CONFIG_INT&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$j&lt;/span&gt; | tr &lt;span class=&quot;s1&quot;&gt;'\r'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;lastoct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$inetaddr&lt;/span&gt; | awk -F &lt;span class=&quot;s1&quot;&gt;'.'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'print $4'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$j&lt;/span&gt; -eq 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;then
                    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$intname&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; 300 IN A  &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$inetaddr&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
                    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$lastoct&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;  IN  PTR &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$intname&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$hostname&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$domain&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&quot;&lt;/span&gt;
                    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;&amp;lt;/p&amp;gt;
                &lt;span class=&quot;k&quot;&gt;else
                    if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$j&lt;/span&gt; -eq 10 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;then
                        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$intname&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; 300 IN A  &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$inetaddr&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
                        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$lastoct&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;  IN  PTR &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$intname&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$hostname&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$domain&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&quot;&lt;/span&gt;
                        &lt;span class=&quot;nb&quot;&gt;echo
                    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else
                        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$intname&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-u&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$j&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; 300 IN A  &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$inetaddr&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
                        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$lastoct&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;  IN  PTR &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$intname&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-u&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$j&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$hostname&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$domain&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&quot;&lt;/span&gt;
                        &lt;span class=&quot;nb&quot;&gt;echo
                    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fi
                fi
            done
    done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>JunOS config interfaces IP address parser</title>
   <link href="http://remote-lab.net:4000/junos-curly-brackets-config-parser"/>
   <updated>2014-02-23T20:58:36+00:00</updated>
   <id>http://remote-lab.net:4000/junos-curly-brackets-configuration-parser</id>
   <content type="html">&lt;p&gt;In this post I will show how you can obtain an interface IP address out of a JunOS curly brackets configuration file. You may find below the script and also the source configuration file. Please note that in order to run the script both files need to be placed in the same directory.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Please check it and let me know what you think, it’s my first Perl script so it could definitely be improved.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CONFIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'config.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;&amp;lt;CONFIG&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;};&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;close&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CONFIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$system&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;m{(\bsystem\s*({(?:(?&amp;gt;[^{}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}))}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;die&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;system not found&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$intconfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;m{(\binterfaces\s*({(?:(?&amp;gt;[^{}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}))}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;die&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;interfaces not found&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'sys'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'int'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defined&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$intconfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defined&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$intconfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;m{(\b$ARGV[1]\s*({(?:(?&amp;gt;[^{}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}))}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;die&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$ARGV[1] not found&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defined&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defined&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;m{(\bunit $ARGV[2]\s*({(?:(?&amp;gt;[^{}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}))}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;die&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$ARGV[2] not found&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$inet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;m{(\bfamily inet\s*({(?:(?&amp;gt;[^{}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}))}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;die&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;family inet not found in section&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$inetaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$inet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;m{\baddress\s(\d{1,3}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(?:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;\.\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}){&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;die&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;no IP address&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$inetaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'--help'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defined&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Usage : ./parser.pl sys                              # outputs system section config&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;        ./parser.pl int                              # outputs interfaces section config&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;        ./parser.pl int [int-name]                   # outputs specific interface section config&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;        ./parser.pl int ge-1/1/7                     # outputs ge-1/1/7 interface section config&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;        ./parser.pl int [int-name] [unit-id]         # outputs specific interface unit IP address&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;        ./parser.pl int ge-1/1/7 1001                # outputs ge-1/1/7 interface unit 1001 IP address&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;perl[notools]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;marius@remoteur:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;txt&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;junos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;corporate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;net&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;zone&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Europe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Bucharest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;selection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;redirects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;RO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;interfaces&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;ow&quot;&gt;ge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/0/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Core: R:core1 RP:ge-0/1/4 (ptp, isis)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;mtu&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9192&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;family&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;inet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;192.168.140.29&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;ow&quot;&gt;ge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/0/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Cust: R:cust-a RP:ge-1/0/0 (srx240H)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;family&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;inet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;172.16.166.196&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;ow&quot;&gt;ge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/0/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;flexible&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;vlan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tagging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;native&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;vlan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;mtu&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9192&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Cust: R:cust-b (data, feed A)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;vlan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;family&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;inet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;192.168.136.184&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1001&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Core: R:cust-b (cpe management)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;vlan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;family&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;inet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nv&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Protect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cpe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;10.15.4.6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;ae0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Core: R:colo-vc2 RI:ae5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;aggregated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ether&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;minimum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;links&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;speed&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;family&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;inet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;192.168.140.126&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;lo0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Core: R:primary routing loopback&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;family&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;inet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;192.168.128.166&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>Linux L2TP ethernet pseudowires</title>
   <link href="http://remote-lab.net:4000/linux-l2tp-ethernet-pseudowires"/>
   <updated>2014-02-16T23:29:21+00:00</updated>
   <id>http://remote-lab.net:4000/linux-l2tp-ethernet-pseudowires</id>
   <content type="html">&lt;p&gt;This post describes how you can create L2TP ethernet pseudowires by using Linux kernel’s L2TP drivers and the “ip” utility of iproute2.  L2TP is a protocol that tunnels one or more sessions over an IP tunnel. It is commonly used for VPNs (L2TP/IPSec) and by ISPs to tunnel subscriber PPP sessions over an IP network infrastructure. With L2TPv3, it is also useful as a Layer-2 tunneling infrastructure.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Our topology consists of 5 virtual machines running Debian Wheezy with Linux Kernel 3.2.0. Our scenario objective is to ensure L2 connectivity between HOST01 and HOST02. In order to accomplish this we’ll create a tunnel between TUNNEL01 and TUNNEL02 that will encapsulate packets coming from the 192.168.0.0/24 network. The INTERNET box just acts as a router for the packets exchanged by TUNNEL01 and TUNNEL02. 
&lt;a href=&quot;http://remote-lab.net:4000/public/images/L2TP.png&quot;&gt;&lt;img src=&quot;http://remote-lab.net:4000/public/images/L2TP.png&quot; alt=&quot;L2TP&quot; width=&quot;851&quot; height=&quot;408&quot; class=&quot;aligncenter size-full wp-image-238&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First thing let’s make sure IP forwarding is enabled on all the machines that’ll forward packets : TUNNEL0[1-2], INTERNET:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@tun01:~# &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;1 &amp;gt; /proc/sys/net/ipv4/ip_forward
&lt;span class=&quot;gp&quot;&gt;root@tun02:~# &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;1 &amp;gt; /proc/sys/net/ipv4/ip_forward
&lt;span class=&quot;gp&quot;&gt;root@tun-inet:~# &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;1 &amp;gt; /proc/sys/net/ipv4/ip_forward&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next thing to do is to establish L3 connectivity between TUNNEL01 and TUNNEL02 by setting static routes:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@tun01:~# &lt;/span&gt;ip route add 2.2.2.0/30 via 1.1.1.1
&lt;span class=&quot;gp&quot;&gt;root@tun02:~# &lt;/span&gt;ip route add 1.1.1.0/30 via 2.2.2.1
&lt;span class=&quot;gp&quot;&gt;root@tun01:~# &lt;/span&gt;ping -c1 2.2.2.2
PING 2.2.2.2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2.2.2.2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 56&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;84&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; bytes of data.
64 bytes from 2.2.2.2: &lt;span class=&quot;nv&quot;&gt;icmp_req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;63 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1.03 ms
&lt;span class=&quot;gp&quot;&gt;root@tun02:~# &lt;/span&gt;ping -c1 1.1.1.2
PING 1.1.1.2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.1.1.2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 56&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;84&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; bytes of data.
64 bytes from 1.1.1.2: &lt;span class=&quot;nv&quot;&gt;icmp_req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;63 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1.20 ms&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once we’ve established L3 connectivity between the tunnel endpoints we can proceed to creating the tunnels. Before configuring the tunnels we need to load the L2TPv3 ethernet pseudowire kernel module:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@tun01:~# &lt;/span&gt;modprobe l2tp_eth
&lt;span class=&quot;gp&quot;&gt;root@tun01:~# &lt;/span&gt;ip l2tp add tunnel tunnel_id 1000 peer_tunnel_id 2000 encap udp &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;1.1.1.2 remote 2.2.2.2 udp_sport 6000 udp_dport 5000
&lt;span class=&quot;gp&quot;&gt;root@tun01:~# &lt;/span&gt;ip l2tp add session tunnel_id 1000 session_id 3000 peer_session_id 4000
&lt;span class=&quot;gp&quot;&gt;root@tun01:~# &lt;/span&gt;ip l2tp show tunnel
Tunnel 1000, encap UDP
  From 1.1.1.2 to 2.2.2.2
  Peer tunnel 2000
  UDP &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; / dest ports: 6000/5000
&lt;span class=&quot;gp&quot;&gt;root@tun01:~# &lt;/span&gt;ip l2tp show session
Session 3000 &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;tunnel 1000
  Peer session 4000, tunnel 2000
  interface name: l2tpeth0
  offset 0, peer offset 0
&lt;span class=&quot;gp&quot;&gt;root@tun02:~# &lt;/span&gt;modprobe l2tp_eth
&lt;span class=&quot;gp&quot;&gt;root@tun02:~# &lt;/span&gt;ip l2tp add tunnel tunnel_id 2000 peer_tunnel_id 1000 encap udp &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;2.2.2.2 remote 1.1.1.2 udp_sport 5000 udp_dport 6000
&lt;span class=&quot;gp&quot;&gt;root@tun02:~# &lt;/span&gt;ip l2tp add session tunnel_id 2000 session_id 4000 peer_session_id 3000
&lt;span class=&quot;gp&quot;&gt;root@tun02:~# &lt;/span&gt;ip l2tp show tunnel
Tunnel 2000, encap UDP
  From 2.2.2.2 to 1.1.1.2
  Peer tunnel 1000
  UDP &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; / dest ports: 5000/6000
&lt;span class=&quot;gp&quot;&gt;root@tun02:~# &lt;/span&gt;ip l2tp show session
Session 4000 &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;tunnel 2000
  Peer session 3000, tunnel 1000
  interface name: l2tpeth0
  offset 0, peer offset 0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll notice a new interface has been created with a MTU of 1488 (1500bytes Ethernet MTU - 12bytes L2TP header):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@tun01:~# &lt;/span&gt;ip a s dev l2tpeth0
5: l2tpeth0: &amp;lt;BROADCAST,MULTICAST&amp;gt; mtu 1488 qdisc noop state DOWN qlen 1000
    link/ether 1a:8f:6e:04:3f:a3 brd ff:ff:ff:ff:ff:ff
&lt;span class=&quot;gp&quot;&gt;root@tun02:~# &lt;/span&gt;ip a s dev l2tpeth0
5: l2tpeth0: &amp;lt;BROADCAST,MULTICAST&amp;gt; mtu 1488 qdisc noop state DOWN qlen 1000
    link/ether 3e:d8:00:8c:d0:a2 brd ff:ff:ff:ff:ff:ff&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next thing to do is install bridge-utils and bridge the l2tp interface with the network interface that’s attached to the LAN segment we want to extend over the tunnel, in our case it’s called eth1:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@tun01:~# &lt;/span&gt;aptitude install bridge-utils
&lt;span class=&quot;gp&quot;&gt;root@tun02:~# &lt;/span&gt;aptitude install bridge-utils
&lt;span class=&quot;gp&quot;&gt;root@tun01:~# &lt;/span&gt;brctl addbr l2tp
&lt;span class=&quot;gp&quot;&gt;root@tun02:~# &lt;/span&gt;brctl addbr l2tp
&lt;span class=&quot;gp&quot;&gt;root@tun01:~# &lt;/span&gt;brctl addif l2tp eth1 l2tpeth0
&lt;span class=&quot;gp&quot;&gt;root@tun02:~# &lt;/span&gt;brctl addif l2tp eth1 l2tpeth0
&lt;span class=&quot;gp&quot;&gt;root@tun01:~# &lt;/span&gt;brctl show
bridge name	        bridge id	    STP enabled	     interfaces
l2tp		  8000.1a8f6e043fa3           no		            eth1 l2tpeth0
&lt;span class=&quot;gp&quot;&gt;root@tun01:~# &lt;/span&gt;ip l &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;dev l2tpeth0 up
&lt;span class=&quot;gp&quot;&gt;root@tun01:~# &lt;/span&gt;ip l &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;dev l2tp up
&lt;span class=&quot;gp&quot;&gt;root@tun02:~# &lt;/span&gt;ip l &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;dev l2tpeth0 up
&lt;span class=&quot;gp&quot;&gt;root@tun02:~# &lt;/span&gt;ip l &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;dev l2tp up&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we should be up and running and have L2 connectivity over the L2TP pseudowire:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@host01:~# &lt;/span&gt;ping -c5 192.168.0.4
PING 192.168.0.4 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;192.168.0.4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 56&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;84&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; bytes of data.
64 bytes from 192.168.0.4: &lt;span class=&quot;nv&quot;&gt;icmp_req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3.85 ms
64 bytes from 192.168.0.4: &lt;span class=&quot;nv&quot;&gt;icmp_req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1.93 ms
64 bytes from 192.168.0.4: &lt;span class=&quot;nv&quot;&gt;icmp_req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1.91 ms
64 bytes from 192.168.0.4: &lt;span class=&quot;nv&quot;&gt;icmp_req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1.87 ms
64 bytes from 192.168.0.4: &lt;span class=&quot;nv&quot;&gt;icmp_req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;5 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1.89 ms&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s go further to the transport layer and do a TCP throughput test:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@host02:~# &lt;/span&gt;nuttcp -S
&lt;span class=&quot;gp&quot;&gt;root@host01:~# &lt;/span&gt;nuttcp 192.168.0.4
nuttcp-t: v6.1.2: Error: server not ACKing data&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Looks that we’ve got a problem. It appears that the TCP session was established with a MSS of 1460bytes. This would cause packets fragmentation through the tunnel interface as the packets would exceed the maximum MTU on the Ethernet link of 1500bytes. Even though the connection should establish correctly and the transfer should run just fine fragmentation could case performance issues due to encapsulation overhead.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://remote-lab.net/wp-content/uploads/2014/02/mss.png&quot;&gt;&lt;img src=&quot;https://remote-lab.net/wp-content/uploads/2014/02/mss-1024x438.png&quot; alt=&quot;mss&quot; width=&quot;960&quot; height=&quot;410&quot; class=&quot;aligncenter size-large wp-image-239&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I thought of lowering the MTU of the internal interfaces and enforcing the MSS for the TCP connections so that all the packets that are transmitted across the tunnel interfaces do not exceed 1500bytes.
Now let’s do some basic maths and find out what’s the maximum TCP payload, also known as the maximum segment size in the TCP header:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;1500B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;20B&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;IP_HEADER&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;+8B&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;UDP_HEADER&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;+12B&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;L2TP_HEADER&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;+14B&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ETH_HEADER&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;+20B&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;IP_HEADER&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;+20B&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;TCP_HEADER&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;+PAYLOAD &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&quot;nv&quot;&gt;PAYLOAD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1406B

&lt;span class=&quot;gp&quot;&gt;root@tun01:~# &lt;/span&gt;ip link &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;eth1 mtu 1446
&lt;span class=&quot;gp&quot;&gt;root@tun01:~# &lt;/span&gt;iptables -A FORWARD -p tcp --tcp-flags SYN,RST SYN -m tcpmss --mss 1406:1536 -j TCPMSS --set-mss 1406
&lt;span class=&quot;gp&quot;&gt;root@tun02:~# &lt;/span&gt;ip link &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;eth1 mtu 1446
&lt;span class=&quot;gp&quot;&gt;root@tun02:~# &lt;/span&gt;iptables -A FORWARD -p tcp --tcp-flags SYN,RST SYN -m tcpmss --mss 1406:1536 -j TCPMSS --set-mss 1406
&lt;span class=&quot;gp&quot;&gt;root@host01:~# &lt;/span&gt;nuttcp 192.168.0.4
   45.7992 MB /  10.05 sec &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;   38.2292 Mbps 15 %TX 30 %RX 0 retrans 1.89 msRTT&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;All the virtual machines are running on my laptop so I guess it’s a decent throughput as the CPU seems to be the bottleneck.&lt;/p&gt;

&lt;p&gt;I hope you find this post useful. I am going to continue it in a future post by configuring L2TP over IPsec.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>CPU benchmark using sysbench</title>
   <link href="http://remote-lab.net:4000/cpu-benchmark-using-sysbench"/>
   <updated>2014-02-09T12:00:22+00:00</updated>
   <id>http://remote-lab.net:4000/cpu-benchmark-using-sysbench</id>
   <content type="html">&lt;p&gt;Sysbench allows you to do a quick performance benchmark of several system parameters such as file I/O, CPU, scheduler and others.
Below are the results for running a 100000 prime numbers calculation using 4 threads on my Intel Core i5-3427U CPU:&lt;/p&gt;

&lt;hr /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;marius@remoteur:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;sysbench --num-threads&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4 --test&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;cpu --cpu-max-prime&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;100000 run
sysbench 0.4.12:  multi-threaded system evaluation benchmark
Running the &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;with following options:
Number of threads: 4
Doing CPU performance benchmark
Threads started!
Done.
Maximum prime number checked &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;CPU &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;: 100000
Test execution summary:
    total &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;:                          86.6428s
    total number of events:              10000
    total &lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;taken by event execution: 346.5374
    per-request statistics:
         min:                                 33.06ms
         avg:                                 34.65ms
         max:                                158.58ms
         approx.  95 percentile:              37.12ms
Threads fairness:
    events &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;avg/stddev&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:           2500.0000/14.25
    execution &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;avg/stddev&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:   86.6344/0.01&amp;lt;/code&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>Bash create file by using heredocs</title>
   <link href="http://remote-lab.net:4000/bash-heredocs"/>
   <updated>2014-02-01T22:51:47+00:00</updated>
   <id>http://remote-lab.net:4000/bash-create-file-by-using-heredocs</id>
   <content type="html">&lt;p&gt;By using the heredocs format you instruct the shell to read input from the current source until a line containing only a certain word is seen. I find this useful for quickly writing or copying script files. You may find below an example of how you can use this kind of redirection:&lt;/p&gt;

&lt;hr /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;marius@remoteur:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;cat &amp;gt; script &lt;span class=&quot;sh&quot;&gt;&amp;lt;&amp;lt; EOF
&amp;gt; echo &quot;This is the script&quot;
&amp;gt; EOF
marius@remoteur:~&amp;gt;&amp;gt;&amp;gt; bash script
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;This is the script&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>Linux reload partition table</title>
   <link href="http://remote-lab.net:4000/linux-update-partition-table"/>
   <updated>2014-02-01T22:14:56+00:00</updated>
   <id>http://remote-lab.net:4000/linux-update-partition-table</id>
   <content type="html">&lt;p&gt;Below are the steps you can use in order to be able to create a filesystem on a newly created partition (vda3 in our example) without reboot:&lt;/p&gt;

&lt;hr /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@lfs:~# &lt;/span&gt;fdisk -l
Disk /dev/vda: 16.1 GB, 16106127360 bytes
16 heads, 63 sectors/track, 31207 cylinders, total 31457280 sectors
Units &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; sectors of 1 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 512 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 512 bytes
Sector size &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;logical/physical&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 512 bytes / 512 bytes
I/O size &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;minimum/optimal&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 512 bytes / 512 bytes
Disk identifier: 0x0003d859
   Device Boot      Start         End      Blocks   Id  System
/dev/vda1            2048     1953791      975872   82  Linux swap / Solaris
/dev/vda2   &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;     1953792    11718655     4882432   83  Linux
/dev/vda3        11718656    31457279     9869312   83  Linux
&lt;span class=&quot;gp&quot;&gt;root@lfs:~# &lt;/span&gt;ls /dev/vda
vda   vda1  vda2
&lt;span class=&quot;gp&quot;&gt;root@lfs:~# &lt;/span&gt;aptitude install parted
&lt;span class=&quot;gp&quot;&gt;root@lfs:~# &lt;/span&gt;partprobe
&lt;span class=&quot;gp&quot;&gt;root@lfs:~# &lt;/span&gt;ls /dev/vda
vda   vda1  vda2  vda3
&lt;span class=&quot;gp&quot;&gt;root@lfs:~# &lt;/span&gt;mkfs.ext4 /dev/vda3&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>Introducing Lanyon</title>
   <link href="http://remote-lab.net:4000/2014/01/02/introducing-lanyon/"/>
   <updated>2014-01-02T00:00:00+00:00</updated>
   <id>http://remote-lab.net:4000/2014/01/02/introducing-lanyon</id>
   <content type="html">&lt;p&gt;Lanyon is an unassuming &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; theme that places content first by tucking away navigation in a hidden drawer. It’s based on &lt;a href=&quot;http://getpoole.com&quot;&gt;Poole&lt;/a&gt;, the Jekyll butler.&lt;/p&gt;

&lt;h3 id=&quot;built-on-poole&quot;&gt;Built on Poole&lt;/h3&gt;

&lt;p&gt;Poole is the Jekyll Butler, serving as an upstanding and effective foundation for Jekyll themes by &lt;a href=&quot;https://twitter.com/mdo&quot;&gt;@mdo&lt;/a&gt;. Poole, and every theme built on it (like Lanyon here) includes the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Complete Jekyll setup included (layouts, config, &lt;a href=&quot;/404&quot;&gt;404&lt;/a&gt;, &lt;a href=&quot;/atom.xml&quot;&gt;RSS feed&lt;/a&gt;, posts, and &lt;a href=&quot;/about&quot;&gt;example page&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Mobile friendly design and development&lt;/li&gt;
  &lt;li&gt;Easily scalable text and component sizing with &lt;code class=&quot;highlighter-rouge&quot;&gt;rem&lt;/code&gt; units in the CSS&lt;/li&gt;
  &lt;li&gt;Support for a wide gamut of HTML elements&lt;/li&gt;
  &lt;li&gt;Related posts (time-based, because Jekyll) below each post&lt;/li&gt;
  &lt;li&gt;Syntax highlighting, courtesy Pygments (the Python-based code snippet highlighter)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;lanyon-features&quot;&gt;Lanyon features&lt;/h3&gt;

&lt;p&gt;In addition to the features of Poole, Lanyon adds the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Toggleable sliding sidebar (built with only CSS) via &lt;strong&gt;☰&lt;/strong&gt; link in top corner&lt;/li&gt;
  &lt;li&gt;Sidebar includes support for textual modules and a dynamically generated navigation with active link support&lt;/li&gt;
  &lt;li&gt;Two orientations for content and sidebar, default (left sidebar) and &lt;a href=&quot;https://github.com/poole/lanyon#reverse-layout&quot;&gt;reverse&lt;/a&gt; (right sidebar), available via &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; classes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/poole/lanyon#themes&quot;&gt;Eight optional color schemes&lt;/a&gt;, available via &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; classes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/poole/lanyon#readme&quot;&gt;Head to the readme&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;h3 id=&quot;browser-support&quot;&gt;Browser support&lt;/h3&gt;

&lt;p&gt;Lanyon is by preference a forward-thinking project. In addition to the latest versions of Chrome, Safari (mobile and desktop), and Firefox, it is only compatible with Internet Explorer 9 and above.&lt;/p&gt;

&lt;h3 id=&quot;download&quot;&gt;Download&lt;/h3&gt;

&lt;p&gt;Lanyon is developed on and hosted with GitHub. Head to the &lt;a href=&quot;https://github.com/poole/lanyon&quot;&gt;GitHub repository&lt;/a&gt; for downloads, bug reports, and features requests.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Example content</title>
   <link href="http://remote-lab.net:4000/2014/01/01/example-content/"/>
   <updated>2014-01-01T00:00:00+00:00</updated>
   <id>http://remote-lab.net:4000/2014/01/01/example-content</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
  Howdy! This is an example blog post that shows several types of HTML content supported in this theme.
&lt;/div&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis &lt;a href=&quot;#&quot;&gt;dis parturient montes&lt;/a&gt;, nascetur ridiculus mus. &lt;em&gt;Aenean eu leo quam.&lt;/em&gt; Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed posuere consectetur est at lobortis. Cras mattis consectetur purus sit amet fermentum.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Curabitur blandit tempus porttitor. Nullam quis risus eget urna mollis ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Etiam porta &lt;strong&gt;sem malesuada magna&lt;/strong&gt; mollis euismod. Cras mattis consectetur purus sit amet fermentum. Aenean lacinia bibendum nulla sed consectetur.&lt;/p&gt;

&lt;h2 id=&quot;inline-html-elements&quot;&gt;Inline HTML elements&lt;/h2&gt;

&lt;p&gt;HTML defines a long list of available inline tags, a complete list of which can be found on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element&quot;&gt;Mozilla Developer Network&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;To bold text&lt;/strong&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;To italicize text&lt;/em&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;em&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Abbreviations, like &lt;abbr title=&quot;HyperText Markup Langage&quot;&gt;HTML&lt;/abbr&gt; should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt;, with an optional &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt; attribute for the full phrase.&lt;/li&gt;
  &lt;li&gt;Citations, like &lt;cite&gt;— Mark otto&lt;/cite&gt;, should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;cite&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Deleted&lt;/del&gt; text should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;del&amp;gt;&lt;/code&gt; and &lt;ins&gt;inserted&lt;/ins&gt; text should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ins&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Superscript &lt;sup&gt;text&lt;/sup&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; and subscript &lt;sub&gt;text&lt;/sub&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of these elements are styled by browsers with few modifications on our part.&lt;/p&gt;

&lt;h2 id=&quot;heading&quot;&gt;Heading&lt;/h2&gt;

&lt;p&gt;Vivamus sagittis lacus vel augue rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.&lt;/p&gt;

&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis &lt;code class=&quot;highlighter-rouge&quot;&gt;code element&lt;/code&gt; montes, nascetur ridiculus mus.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Example can be run directly in your JavaScript console
&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create a function that takes two arguments and returns the sum of those arguments
&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;return a + b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Call the function
&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &amp;gt; 8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa.&lt;/p&gt;

&lt;h3 id=&quot;lists&quot;&gt;Lists&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Praesent commodo cursus magna, vel scelerisque nisl consectetur et.&lt;/li&gt;
  &lt;li&gt;Donec id elit non mi porta gravida at eget metus.&lt;/li&gt;
  &lt;li&gt;Nulla vitae elit libero, a pharetra augue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Donec ullamcorper nulla non metus auctor fringilla. Nulla vitae elit libero, a pharetra augue.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Vestibulum id ligula porta felis euismod semper.&lt;/li&gt;
  &lt;li&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.&lt;/li&gt;
  &lt;li&gt;Maecenas sed diam eget risus varius blandit sit amet non magna.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cras mattis consectetur purus sit amet fermentum. Sed posuere consectetur est at lobortis.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;HyperText Markup Language (HTML)&lt;/dt&gt;
  &lt;dd&gt;The language used to describe and define the content of a Web page&lt;/dd&gt;

  &lt;dt&gt;Cascading Style Sheets (CSS)&lt;/dt&gt;
  &lt;dd&gt;Used to describe the appearance of Web content&lt;/dd&gt;

  &lt;dt&gt;JavaScript (JS)&lt;/dt&gt;
  &lt;dd&gt;The programming language used to build advanced Web sites and applications&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;h3 id=&quot;tables&quot;&gt;Tables&lt;/h3&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Upvotes&lt;/th&gt;
      &lt;th&gt;Downvotes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;Totals&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Alice&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bob&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Charlie&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Nullam id dolor id nibh ultricies vehicula ut id elit. Sed posuere consectetur est at lobortis. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Want to see something else added? &lt;a href=&quot;https://github.com/poole/poole/issues/new&quot;&gt;Open an issue.&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>What's Jekyll?</title>
   <link href="http://remote-lab.net:4000/2013/12/31/whats-jekyll/"/>
   <updated>2013-12-31T00:00:00+00:00</updated>
   <id>http://remote-lab.net:4000/2013/12/31/whats-jekyll</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; is a static site generator, an open-source tool for creating simple yet powerful websites of all shapes and sizes. From &lt;a href=&quot;https://github.com/mojombo/jekyll/blob/master/README.markdown&quot;&gt;the project’s readme&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Jekyll is a simple, blog aware, static site generator. It takes a template directory […] and spits out a complete, static website suitable for serving with Apache or your favorite web server. This is also the engine behind GitHub Pages, which you can use to host your project’s page or blog right here from GitHub.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s an immensely useful tool and one we encourage you to use here with Lanyon.&lt;/p&gt;

&lt;p&gt;Find out more by &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;visiting the project on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Cisco devices SSH autologin</title>
   <link href="http://remote-lab.net:4000/cisco-devices-ssh-autologin"/>
   <updated>2013-08-05T23:20:26+00:00</updated>
   <id>http://remote-lab.net:4000/cisco-devices-ssh-autologin</id>
   <content type="html">&lt;p&gt;Below is a quick expect script that enables you to autologin on Cisco devices with a predefined clear text password by using an OpenSSH client :&lt;/p&gt;

&lt;hr /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/expect&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;password &lt;span class=&quot;s2&quot;&gt;&quot;yourverycleartextpassword&quot;&lt;/span&gt;
spawn ssh &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;lindex &lt;span class=&quot;nv&quot;&gt;$argv&lt;/span&gt; 0] -o &lt;span class=&quot;nv&quot;&gt;PreferredAuthentications&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;keyboard-interactive,password
expect &lt;span class=&quot;s2&quot;&gt;&quot;Password: &quot;&lt;/span&gt;
send &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$password&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
interact
&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>Network attached storage infrastructure</title>
   <link href="http://remote-lab.net:4000/network-storage-infrastructure"/>
   <updated>2013-07-07T00:25:21+00:00</updated>
   <id>http://remote-lab.net:4000/network-attached-storage-infrastructure</id>
   <content type="html">&lt;p&gt;Today we all need storage space and we get it in all kind of flavors: local disks, file servers on the local network, cloud storage, etc. In this post I’ll show you how you can quickly create a basic storage infrastructure that you can use for your data storage.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;http://remote-lab.net:4000/public/images/storage.png&quot;&gt;&lt;img src=&quot;http://remote-lab.net:4000/public/images/storage.png&quot; alt=&quot;storage&quot; width=&quot;614&quot; height=&quot;372&quot; class=&quot;aligncenter size-full wp-image-198&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you may see in the diagram the topology consists of 2 clients, 2 switches and 2 storage servers. All the components in the diagram are KVM virtual machines running on a single host. You can easily create this setup on your own workstation.   Clients need to be able to access the files on the storage servers as they would on their local drives. In order to do that we can export file system paths on the storage servers by protocols such as NFS or SMB/CIFS. NFS is my favorite one so I’ll show how you can use it in this example. The clients will be basic Debian VMs running the NFS clients.&lt;/p&gt;

&lt;p&gt;Hardware always fails so in order for our system to be available we need to have redundant components. The first storage server will act as the primary server, all the clients will access directly. Data on the primary server will be replicated on the second one which will act as a slave (standby). For the storage file systems we will use ZFS which is both a file system and logical volume manager. ZFS ensures data integrity checks and automatic repairs, it provides various software RAID levels and many other great features such as snapshots, compression, deduplication and replication. In addition to this ZFS is a 128-bit file system providing lots and lots of storage space. Unfortunately ZFS is licensed under Suns CDDL which is not compatible with the Linux kernel license: GPLv2. Work is currently being done for a port of ZFS for the Linux kernel ( ZFS on Linux ). In our topology the storage servers will run zfs on FreeBSD 9.1.&lt;/p&gt;

&lt;p&gt;The network infrastructure is very important when we need redundant systems. Each of the storage servers will have 2 NICs grouped in a bridge connected to 2 different switches. In order to prevent bridge loops we need a loop prevention mechanism such as STP. In our environment we will use STP (802.1d) but be aware that in a production network you need other flavors of STP for reduced convergence time. The switches will run Debian as OS and Open vSwitch for the virtual switch.&lt;/p&gt;

&lt;p&gt;We can now proceed and start creating our infrastructure. I will be running Debian jessie which is the current testing release on both the host machine and the virtual machines. For the VMs communications on the hypervisor I will be using Linux bridges. Other tools that we need for the VMs management are libvirt, virt-install or virt-manager which provides a gui.&lt;/p&gt;

&lt;p&gt;Installing required packages for VMs management:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@lab:~# &lt;/span&gt;aptitude install qemu-kvm qemu-utils libvirt-bin virtinst virt-manager bridge-utils&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s create a bridge for each of the vms links plus an additional one used for out of band management. eth0 is my public interface so i will use it for the management bridge.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@lab:~# &lt;/span&gt;brctl addbr mgmt
&lt;span class=&quot;gp&quot;&gt;root@lab:~# &lt;/span&gt;brctl addif mgmt eth0
&lt;span class=&quot;gp&quot;&gt;root@lab:~# &lt;/span&gt;brctl addbr vm1-sw1
&lt;span class=&quot;gp&quot;&gt;root@lab:~# &lt;/span&gt;brctl addbr vm2-sw2
&lt;span class=&quot;gp&quot;&gt;root@lab:~# &lt;/span&gt;brctl addbr sw1-sw2
&lt;span class=&quot;gp&quot;&gt;root@lab:~# &lt;/span&gt;brctl addbr sw1-st1
&lt;span class=&quot;gp&quot;&gt;root@lab:~# &lt;/span&gt;brctl addbr sw1-st2
&lt;span class=&quot;gp&quot;&gt;root@lab:~# &lt;/span&gt;brctl addbr sw2-st2
&lt;span class=&quot;gp&quot;&gt;root@lab:~# &lt;/span&gt;brctl addbr sw2-st1
&lt;span class=&quot;gp&quot;&gt;root@lab:~# &lt;/span&gt;brctl show&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next thing to do is to create the virtual drives of the vms. I will use qcow2 files as they provide copy-on-write support and snapshots. You can use the qemu-img tools for creating the files. Each of the vms will be assigned one 10GB virtual drive for the OS. The storage servers will have 8 additional 260TB disks used for storage.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@lab:/var/lib/libvirt/images# &lt;/span&gt;qemu-img create -f qcow2 vm1.qcow2 10G
&lt;span class=&quot;gp&quot;&gt;root@lab:/var/lib/libvirt/images# &lt;/span&gt;qemu-img info vm1.qcow2
image: file
file format: qcow2
virtual size: 10G &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;10737418240 bytes&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
disk size: 136K
cluster_size: 65536
&lt;span class=&quot;gp&quot;&gt;root@lab:/var/lib/libvirt/images# &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;i &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;1..8&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;qemu-img create -f qcow2 st2.&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;.qcow2 260T;done&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we are ready to shoot the installers. I prefer virt-install which is a CLI tool used for vms installations. You can also use virt-manager which provides a nice GUI. I will do a net install for the Debian VMs and run the installer from an attached cdrom for FreeBSD. You can use different drivers for the I/O devices. For the Linux machines I will use paravirtualized virtio drivers since they offer better performance. I noticed that FreeBSD doesn’t include native virtio support so I will use scsi drives and intel e1000 nics for it. You can even select the cpu model and what cpu features are available to the vm. The extra-args option passes the priority=low to the kernel command line which gets the Debian installer into expert mode.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@lab:~# &lt;/span&gt;virt-install --name vm1 --disk &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/lib/libvirt/images/vm1.qcow2,bus&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;virtio,cache&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;none,format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;qcow2 --network &lt;span class=&quot;nv&quot;&gt;bridge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mgmt,model&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;virtio --network &lt;span class=&quot;nv&quot;&gt;bridge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vm1-sw1,model&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;virtio --location&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ftp://ftp.lug.ro/debian/dists/wheezy/main/installer-amd64/ --ram&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;512 --cpu&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Nehalem --vcpu&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 --extra-args&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;priority=low&quot;&lt;/span&gt; --vnc&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@lab:~# &lt;/span&gt;virt-install --name sw1 --disk &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/lib/libvirt/images/sw1.qcow2,bus&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;virtio,cache&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;none,format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;qcow2 --network &lt;span class=&quot;nv&quot;&gt;bridge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mgmt,model&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;virtio --network &lt;span class=&quot;nv&quot;&gt;bridge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vm1-sw1,model&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;virtio --network &lt;span class=&quot;nv&quot;&gt;bridge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;sw1-st1,model&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;virtio --network &lt;span class=&quot;nv&quot;&gt;bridge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;sw1-st2,model&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;virtio --network &lt;span class=&quot;nv&quot;&gt;bridge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;sw1-sw2,model&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;virtio --location&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ftp://ftp.lug.ro/debian/dists/wheezy/main/installer-amd64/ --ram&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;512 --cpu&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Nehalem --vcpu&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 --extra-args&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;priority=low&quot;&lt;/span&gt; --vnc&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@lab:~# &lt;/span&gt;virt-install --name st2
--disk &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/lib/libvirt/images/st2.qcow2,bus&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;scsi,cache&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;none,format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;qcow2
--disk &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/lib/libvirt/images/st2.1.qcow2,bus&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;scsi,cache&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;none,format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;qcow2
--disk &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/lib/libvirt/images/st2.2.qcow2,bus&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;scsi,cache&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;none,format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;qcow2
--disk &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/lib/libvirt/images/st2.3.qcow2,bus&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;scsi,cache&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;none,format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;qcow2
--disk &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/lib/libvirt/images/st2.4.qcow2,bus&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;scsi,cache&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;none,format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;qcow2
--disk &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/lib/libvirt/images/st2.5.qcow2,bus&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;scsi,cache&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;none,format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;qcow2
--disk &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/lib/libvirt/images/st2.6.qcow2,bus&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;scsi,cache&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;none,format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;qcow2
--disk &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/lib/libvirt/images/st2.7.qcow2,bus&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;scsi,cache&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;none,format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;qcow2
--disk &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/lib/libvirt/images/st2.8.qcow2,bus&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;scsi,cache&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;none,format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;qcow2
--network &lt;span class=&quot;nv&quot;&gt;bridge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mgmt,model&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;e1000 --network &lt;span class=&quot;nv&quot;&gt;bridge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;sw2-st2,model&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;e1000 --network &lt;span class=&quot;nv&quot;&gt;bridge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;sw2-st1,model&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;e1000  --ram&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8192 --cpu&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Nehalem --vcpu&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;6 --cdrom&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/lib/libvirt/images/FreeBSD-9.1-RELEASE-amd64-disc1.iso --vnc&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The installer should be pretty straight forward. Once they are complete we can move forward. We’ll first need to set the IP addresses for the network interfaces and install the required packages. Please note that you need to edit /etc/network/interfaces to make the IP addresses persistent. 
Quick tip: when you debug network connectivity issues always check the link status of the interfaces ( physical, virtual, bridges, etc) and get tcpdump installed on the same line with your favorite text editor.&lt;/p&gt;

&lt;p&gt;NFS Clients:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@vm1:~# &lt;/span&gt;ip addr add 192.168.1.1/24 dev eth1
&lt;span class=&quot;gp&quot;&gt;root@vm1:~# &lt;/span&gt;ip link &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;dev eth1 up
&lt;span class=&quot;gp&quot;&gt;root@vm1:~# &lt;/span&gt;aptitude install nfs-common portmap&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now lets’s configure the switches/bridges. One important thing we need to take care of is the STP root bridge of our topology. We need to make sure that one of the switches will be the root bridge otherwise all the traffic will be forwarded by the storage servers bridges and it’s not their job to do that.&lt;/p&gt;

&lt;p&gt;Open vSwitch:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@sw1:~# &lt;/span&gt;aptitude install openvswitch-switch openvswitch-common
&lt;span class=&quot;gp&quot;&gt;root@sw1:~# &lt;/span&gt;ovs-vsctl add-br sw1
&lt;span class=&quot;gp&quot;&gt;root@sw1:~# &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;i &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;1..4&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;;&lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;ovs-vsctl add-port sw1 eth&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;;&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;;
&lt;span class=&quot;gp&quot;&gt;root@sw1:~# &lt;/span&gt;ovs-vsctl show
8910e761-e507-4aa7-88b5-4c26e2e2276e
    Bridge &lt;span class=&quot;s2&quot;&gt;&quot;sw1&quot;&lt;/span&gt;
        Port &lt;span class=&quot;s2&quot;&gt;&quot;eth4&quot;&lt;/span&gt;
            Interface &lt;span class=&quot;s2&quot;&gt;&quot;eth4&quot;&lt;/span&gt;
        Port &lt;span class=&quot;s2&quot;&gt;&quot;sw1&quot;&lt;/span&gt;
            Interface &lt;span class=&quot;s2&quot;&gt;&quot;sw1&quot;&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;: internal
        Port &lt;span class=&quot;s2&quot;&gt;&quot;eth1&quot;&lt;/span&gt;
            Interface &lt;span class=&quot;s2&quot;&gt;&quot;eth1&quot;&lt;/span&gt;
        Port &lt;span class=&quot;s2&quot;&gt;&quot;eth2&quot;&lt;/span&gt;
            Interface &lt;span class=&quot;s2&quot;&gt;&quot;eth2&quot;&lt;/span&gt;
        Port &lt;span class=&quot;s2&quot;&gt;&quot;eth3&quot;&lt;/span&gt;
            Interface &lt;span class=&quot;s2&quot;&gt;&quot;eth3&quot;&lt;/span&gt;
    ovs_version: &lt;span class=&quot;s2&quot;&gt;&quot;1.4.2&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;root@sw1:~# &lt;/span&gt;ovs-vsctl &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;bridge sw1 &lt;span class=&quot;nv&quot;&gt;stp_enable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;root@sw1:~# &lt;/span&gt;ovs-vsctl &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;bridge sw1 other_config:stp-priority&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x7800
&lt;span class=&quot;gp&quot;&gt;root@sw1:~# &lt;/span&gt;ovs-ofctl show sw1
OFPT_FEATURES_REPLY &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;xid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: ver:0x1, dpid:0000e22d31067b47
n_tables:255, n_buffers:256
features: capabilities:0xc7, actions:0xfff
 1&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;eth2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: addr:52:54:00:b0:d7:e5
     config:     0
     state:      STP_FORWARD
 2&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;eth2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: addr:52:54:00:79:59:68
     config:     0
     state:      STP_FORWARD
 3&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;eth3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: addr:52:54:00:69:dc:5d
     config:     0
     state:      STP_FORWARD
 4&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;eth4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: addr:52:54:00:e1:4d:dd
     config:     0
     state:      STP_FORWARD
 LOCAL&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;sw1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: addr:e2:2d:31:06:7b:47
     config:     PORT_DOWN
     state:      LINK_DOWN
OFPT_GET_CONFIG_REPLY &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;xid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;nv&quot;&gt;frags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;normal &lt;span class=&quot;nv&quot;&gt;miss_send_len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Storage machines networking:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@st1:~# &lt;/span&gt;ifconfig bridge create
&lt;span class=&quot;gp&quot;&gt;root@st1:~# &lt;/span&gt;ifconfig bridge0 addm em1 addm em2 up
&lt;span class=&quot;gp&quot;&gt;root@st1:~# &lt;/span&gt;ifconfig bridge0 proto stp
&lt;span class=&quot;gp&quot;&gt;root@st1:~# &lt;/span&gt;ifconfig bridge0 192.168.1.3 netmask 255.255.255.0
&lt;span class=&quot;gp&quot;&gt;root@st1:~# &lt;/span&gt;ifconfig bridge0
bridge0: &lt;span class=&quot;nv&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8843&amp;lt;UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST&amp;gt; metric 0 mtu 1500
	ether 02:d8:a2:2f:a0:00
	inet 192.168.1.3 netmask 0xffffff00 broadcast 192.168.1.255
	nd6 &lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;29&amp;lt;PERFORMNUD,IFDISABLED,AUTO_LINKLOCAL&amp;gt;
	id 52:54:00:04:1b:42 priority 32768 hellotime 2 fwddelay 15
	maxage 20 holdcnt 6 proto stp maxaddr 2000 timeout 1200
	root id 56:ff:97:ea:f6:4b priority 30617 ifcost 20019 port 3
	member: em2 &lt;span class=&quot;nv&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1c7&amp;lt;LEARNING,DISCOVER,STP,AUTOEDGE,PTP,AUTOPTP&amp;gt;
	        ifmaxaddr 0 port 4 priority 128 path cost 20000 proto stp
	        role root state forwarding
	member: em1 &lt;span class=&quot;nv&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1c7&amp;lt;LEARNING,DISCOVER,STP,AUTOEDGE,PTP,AUTOPTP&amp;gt;
	        ifmaxaddr 0 port 3 priority 128 path cost 20000 proto stp
	        role alternate state discarding&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can notice that one of the physical interfaces is in forwarding state and the other one is discarding. The same settings need to be done on the other machines except IP addresses, hostnames and other things that need to be unique. At this point we have the network infrastructure ready with basic connectivity ensured for all the nodes.&lt;/p&gt;

&lt;p&gt;We can go ahead and do the storage configuration. As mentioned before storage1 will be the primary storage machine so we’ll start with it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@st1:~# &lt;/span&gt;camcontrol devlist
&amp;lt;QEMU QEMU DVD-ROM 1.1.&amp;gt;           at scbus1 target 0 lun 0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;pass0,cd0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&amp;lt;QEMU QEMU HARDDISK 1.1.&amp;gt;          at scbus2 target 0 lun 0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;pass1,da0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&amp;lt;QEMU QEMU HARDDISK 1.1.&amp;gt;          at scbus2 target 1 lun 0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;pass2,da1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&amp;lt;QEMU QEMU HARDDISK 1.1.&amp;gt;          at scbus2 target 2 lun 0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;pass3,da2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&amp;lt;QEMU QEMU HARDDISK 1.1.&amp;gt;          at scbus2 target 3 lun 0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;pass4,da3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&amp;lt;QEMU QEMU HARDDISK 1.1.&amp;gt;          at scbus2 target 4 lun 0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;pass5,da4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&amp;lt;QEMU QEMU HARDDISK 1.1.&amp;gt;          at scbus2 target 5 lun 0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;pass6,da5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&amp;lt;QEMU QEMU HARDDISK 1.1.&amp;gt;          at scbus2 target 6 lun 0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;pass7,da6&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&amp;lt;QEMU QEMU HARDDISK 1.1.&amp;gt;          at scbus3 target 0 lun 0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;pass8,da7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&amp;lt;QEMU QEMU HARDDISK 1.1.&amp;gt;          at scbus3 target 1 lun 0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;pass9,da8&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The list shows us that we have one dvdrom (installer) and 9 drives (1 for the OS and 8 for the storage) attached.&lt;/p&gt;

&lt;p&gt;ZFS:
Let’s create the ZFS storage pool. The pool will be made up of 4 mirrors of 2 x 260TB drives. ZFS mirrors are similar to RAID1 level. All the mirrors are striped so the resulting pool will have a RAID10 like fault tolerance. The total capacity of the pool will be of 1 Petabyte :)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@st1:~# &lt;/span&gt;zpool create storage mirror da1 da2 mirror da3 da4 mirror da5 da6 mirror da7 da8
&lt;span class=&quot;gp&quot;&gt;root@st1:~# &lt;/span&gt;zpool list
NAME      SIZE  ALLOC   FREE    CAP  DEDUP  HEALTH  ALTROOT
storage  1.01P   110M  1.01P     0%  1.00x  ONLINE  -
&lt;span class=&quot;gp&quot;&gt;root@st1:~# &lt;/span&gt;zpool status
  pool: storage
 state: ONLINE
  scan: none requested
config:
	NAME        STATE     READ WRITE CKSUM
	storage     ONLINE       0     0     0
	  mirror-0  ONLINE       0     0     0
	    da1     ONLINE       0     0     0
	    da2     ONLINE       0     0     0
	  mirror-1  ONLINE       0     0     0
	    da3     ONLINE       0     0     0
	    da4     ONLINE       0     0     0
	  mirror-2  ONLINE       0     0     0
	    da5     ONLINE       0     0     0
	    da6     ONLINE       0     0     0
	  mirror-3  ONLINE       0     0     0
	    da7     ONLINE       0     0     0
	    da8     ONLINE       0     0     0
errors: No known data errors
&lt;span class=&quot;gp&quot;&gt;root@st1:~# &lt;/span&gt;zfs get all storage&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can now create a dataset inside the storage pool setting specific attributes. For instance, let’s create a dataset that has compression enabled:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@st1:~# &lt;/span&gt;zfs create -o &lt;span class=&quot;nv&quot;&gt;compression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;on storage/compset
&lt;span class=&quot;gp&quot;&gt;root@st1:~# &lt;/span&gt;zfs get compression storage/compset
NAME             PROPERTY     VALUE     SOURCE
storage/compset  compression  on        &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s ctually see the benefits:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@st1:~# &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /storage/compset/
&lt;span class=&quot;gp&quot;&gt;root@st1:compset# &lt;/span&gt;dd &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/zero &lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10M &lt;span class=&quot;nv&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1M &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10
10+0 records &lt;span class=&quot;k&quot;&gt;in
&lt;/span&gt;10+0 records out
10485760 bytes transferred &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;0.014196 secs &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;738633678 bytes/sec
&lt;span class=&quot;gp&quot;&gt;root@st1:compset# &lt;/span&gt;du -h 10M
512B	 10M
&lt;span class=&quot;gp&quot;&gt;root@st1:compset# &lt;/span&gt;dd &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/random &lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10Mr &lt;span class=&quot;nv&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1M &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10
10+0 records &lt;span class=&quot;k&quot;&gt;in
&lt;/span&gt;10+0 records out
10485760 bytes transferred &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;0.176115 secs &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;59539266 bytes/sec&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;root@st1:compset# &lt;/span&gt;du -h 10Mr
 10M	 10Mr&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s say we need storage space for users. We can create a dataset for that and assign each user a dataset that has an assigned quota:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@st1:storage# &lt;/span&gt;zfs create storage/users
&lt;span class=&quot;gp&quot;&gt;root@st1:storage# &lt;/span&gt;zfs create -o &lt;span class=&quot;nv&quot;&gt;quota&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10M storage/users/01
&lt;span class=&quot;gp&quot;&gt;root@st1:storage# &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /storage/users/01
&lt;span class=&quot;gp&quot;&gt;root@st1:01# &lt;/span&gt;dd &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/random &lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;20M &lt;span class=&quot;nv&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1M &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;20
dd: 20M: Disc quota exceeded
&lt;span class=&quot;gp&quot;&gt;root@st1:01# &lt;/span&gt;du -h 20M
 10M	20M&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Sanpshots:
ZFS provides snapshot functionality which is an image of the file system at the time you snapshot it. Let’s create a new data set called set, create some random files inside it and then snapshot it calling it snap1.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@st1:~# &lt;/span&gt;zfs create storage/set
&lt;span class=&quot;gp&quot;&gt;root@st1:~# &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /storage/set/
&lt;span class=&quot;gp&quot;&gt;root@st1:set# &lt;/span&gt;mkfile 1M 1M
&lt;span class=&quot;gp&quot;&gt;root@st1:set# &lt;/span&gt;mkfile 5M 5M
&lt;span class=&quot;gp&quot;&gt;root@st1:set# &lt;/span&gt;zfs snapshot storage/set@snap1
&lt;span class=&quot;gp&quot;&gt;root@st1:set# &lt;/span&gt;ls .zfs/snapshot/snap1/
1M 5M&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;How can we replicate all the data to the other storage machine ? ZFS enables you to transfer snapshots to another machine by piping zfs send and zfs recive which is pretty awesome. The receiving end will extract the snapshot and recreate the file system.&lt;/p&gt;

&lt;p&gt;We have an empty storage pool called storage on storage2 where we’ll transfer snap1 we have just created. We’ll use netcat for raw tcp piping but you can also use ssh.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@st2:~# &lt;/span&gt;netcat -l -p 9999 | zfs receive storage/set
&lt;span class=&quot;gp&quot;&gt;root@st1:~# &lt;/span&gt;zfs send storage/set@snap1 | netcat st2 9999
&lt;span class=&quot;gp&quot;&gt;root@st2:~# &lt;/span&gt;zfs list
NAME          USED  AVAIL  REFER  MOUNTPOINT
storage      6.14M   508T    32K  /storage
storage/set  6.03M   508T  6.03M  /storage/set
&lt;span class=&quot;gp&quot;&gt;root@st2:~# &lt;/span&gt;ls /storage/set/
1M 5M&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can also send incremental data using zfs send. We’ll create an additional file in /storage/set, create a snapshot and transfer only the differences between the second and the first snapshot. We’ll use ssh this time:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@st1:set# &lt;/span&gt;mkfile 10M 10M
&lt;span class=&quot;gp&quot;&gt;root@st1:set# &lt;/span&gt;zfs snapshot storage/set@snap2
&lt;span class=&quot;gp&quot;&gt;root@st1:set# &lt;/span&gt;zfs send -i storage/set@snap1 storage/set@snap2  | ssh st2 zfs receive storage/set
&lt;span class=&quot;gp&quot;&gt;root@st2:~# &lt;/span&gt;ls /storage/set/
10M 1M  5M&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What happens if we delete a file ?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@st1:set# &lt;/span&gt;rm &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; touch Lala
&lt;span class=&quot;gp&quot;&gt;root@st1:set# &lt;/span&gt;zfs snapshot storage/set@snap3
&lt;span class=&quot;gp&quot;&gt;root@st1:set# &lt;/span&gt;zfs send -i storage/set@snap2 storage/set@snap3  | ssh st2 zfs receive storage/set
&lt;span class=&quot;gp&quot;&gt;root@st2:~# &lt;/span&gt;ls /storage/set/
Lala&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Using the great snapshot and zfs send and receive features we could easily set up a cron job that does periodic incremental transfers thus having all the data on storage1 replicated on storage2. 
Now that we have all the storage prepared let’s mount it on the clients by NFS. On the storage server prepare the /etc/exports file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@st1:set# &lt;/span&gt;cat /etc/exports
/storage/set -maproot&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;root 192.168.1.1
&lt;span class=&quot;gp&quot;&gt;root@st1:set# &lt;/span&gt;/etc/rc.d/mountd onereload
&lt;span class=&quot;gp&quot;&gt;root@vm1:~# &lt;/span&gt;mount st1:/storage/set /mnt -v
&lt;span class=&quot;gp&quot;&gt;root@vm1:~# &lt;/span&gt;df -h | grep st1
Filesystem                                              Size  Used Avail Use% Mounted on
st1:/storage/set                                       1016T     0 1016T   0% /mnt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s go for a failover test of the bridged interfaces on the storage machine. We’ll start writing a random file using dd in vm1:/mnt, shutdown the forwarding interface on storage1 and wait to see what happens.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@vm1:~# &lt;/span&gt;dd &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/vda &lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/root/random &lt;span class=&quot;nv&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1M &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10
&lt;span class=&quot;gp&quot;&gt;root@vm1:~# &lt;/span&gt;md5sum /root/random
9662731c837501f21938b04e09aa02b3  random
&lt;span class=&quot;gp&quot;&gt;root@vm1:~# &lt;/span&gt;dd &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/root/random &lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/mnt/random
&lt;span class=&quot;gp&quot;&gt;root@st1:set# &lt;/span&gt;ifconfig bridge0
bridge0: &lt;span class=&quot;nv&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8843&amp;lt;UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST&amp;gt; metric 0 mtu 1500
	ether 02:d8:a2:2f:a0:00
	inet 192.168.1.3 netmask 0xffffff00 broadcast 192.168.1.255
	nd6 &lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;29&amp;lt;PERFORMNUD,IFDISABLED,AUTO_LINKLOCAL&amp;gt;
	id 52:54:00:04:1b:42 priority 32768 hellotime 2 fwddelay 15
	maxage 20 holdcnt 6 proto stp maxaddr 2000 timeout 1200
	root id 56:ff:97:ea:f6:4b priority 30617 ifcost 20000 port 4
	member: em2 &lt;span class=&quot;nv&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1c7&amp;lt;LEARNING,DISCOVER,STP,AUTOEDGE,PTP,AUTOPTP&amp;gt;
	        ifmaxaddr 0 port 4 priority 128 path cost 20000 proto stp
	        role root state forwarding
	member: em1 &lt;span class=&quot;nv&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1c7&amp;lt;LEARNING,DISCOVER,STP,AUTOEDGE,PTP,AUTOPTP&amp;gt;
	        ifmaxaddr 0 port 3 priority 128 path cost 20000 proto stp
	        role alternate state discarding
&lt;span class=&quot;gp&quot;&gt;root@st1:set# &lt;/span&gt;ifconfig em2 down
&lt;span class=&quot;gp&quot;&gt;root@st1:set# &lt;/span&gt;ifconfig bridge0
bridge0: &lt;span class=&quot;nv&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8843&amp;lt;UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST&amp;gt; metric 0 mtu 1500
	ether 02:d8:a2:2f:a0:00
	inet 192.168.1.3 netmask 0xffffff00 broadcast 192.168.1.255
	nd6 &lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;29&amp;lt;PERFORMNUD,IFDISABLED,AUTO_LINKLOCAL&amp;gt;
	id 52:54:00:04:1b:42 priority 32768 hellotime 2 fwddelay 15
	maxage 20 holdcnt 6 proto stp maxaddr 2000 timeout 1200
	root id 56:ff:97:ea:f6:4b priority 30617 ifcost 20019 port 3
	member: em2 &lt;span class=&quot;nv&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1c7&amp;lt;LEARNING,DISCOVER,STP,AUTOEDGE,PTP,AUTOPTP&amp;gt;
	        ifmaxaddr 0 port 4 priority 128 path cost 20000 proto stp
	        role disabled state discarding
	member: em1 &lt;span class=&quot;nv&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1c7&amp;lt;LEARNING,DISCOVER,STP,AUTOEDGE,PTP,AUTOPTP&amp;gt;
	        ifmaxaddr 0 port 3 priority 128 path cost 20000 proto stp
	        role root state learning
&lt;span class=&quot;gp&quot;&gt;root@st1:set# &lt;/span&gt;ifconfig bridge0
bridge0: &lt;span class=&quot;nv&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8843&amp;lt;UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST&amp;gt; metric 0 mtu 1500
	ether 02:d8:a2:2f:a0:00
	inet 192.168.1.3 netmask 0xffffff00 broadcast 192.168.1.255
	nd6 &lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;29&amp;lt;PERFORMNUD,IFDISABLED,AUTO_LINKLOCAL&amp;gt;
	id 52:54:00:04:1b:42 priority 32768 hellotime 2 fwddelay 15
	maxage 20 holdcnt 6 proto stp maxaddr 2000 timeout 1200
	root id 56:ff:97:ea:f6:4b priority 30617 ifcost 20019 port 3
	member: em2 &lt;span class=&quot;nv&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1c7&amp;lt;LEARNING,DISCOVER,STP,AUTOEDGE,PTP,AUTOPTP&amp;gt;
	        ifmaxaddr 0 port 4 priority 128 path cost 20000 proto stp
	        role disabled state discarding
	member: em1 &lt;span class=&quot;nv&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1c7&amp;lt;LEARNING,DISCOVER,STP,AUTOEDGE,PTP,AUTOPTP&amp;gt;
	        ifmaxaddr 0 port 3 priority 128 path cost 20000 proto stp
	        role root state forwarding&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The result:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@vm1:~# &lt;/span&gt;dd &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/root/random &lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/mnt/random
10+0 records &lt;span class=&quot;k&quot;&gt;in
&lt;/span&gt;10+0 records out
10485760 bytes &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;10 MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; copied, 56.1668 s, 187 kB/s
&lt;span class=&quot;gp&quot;&gt;root@st1:set# &lt;/span&gt;md5 random
MD5 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;random&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 9662731c837501f21938b04e09aa02b&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Transfer was very slow but your data is uncorrupted on the remote storage. 
I hope you enjoyed this long tutorial :) Let me know if you any questions or other observations and I’ll be more than happy to answer.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Dynamic DNS using your own domain</title>
   <link href="http://remote-lab.net:4000/dynamic-dns-using-your-own-domain"/>
   <updated>2013-05-20T13:20:39+00:00</updated>
   <id>http://remote-lab.net:4000/dynamic-dns-using-your-own-domain</id>
   <content type="html">&lt;p&gt;I have recently changed my ISP and the new one is providing me an IP address through PPPoE that’s changing after every disconnect. 
Being in this situation I had two options: set up a dynamic DNS client on my router using a dynamic DNS service such as no-ip.com or use my current DNS server and automatically update its zone records. I decided to go for the latter.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The mechanism I will use is pretty simple: a client inside my LAN will periodically initiate an HTTP request to a particular section of this website that is password protected. The web server I am running remote-lab.net on is also the authoritative name server of remote-lab.net. The server will run a script every couple of minutes that checks the source IP address of completed HTTP requests, it will update the zone file records and increment the zone’s serial number.&lt;/p&gt;

&lt;p&gt;First, let’s install the required servers: Bind9 DNS server and Apache HTTP server:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;aptitude install bind9 apache2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By default Apache’s default DocumentRoot is placed in /var/www. Let’s create a section inside it that is password protected:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@remote-lab:~# &lt;/span&gt;mkdir /var/www/randomstring
&lt;span class=&quot;gp&quot;&gt;root@remote-lab:~# &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Dynamic DNS&quot;&lt;/span&gt; &amp;gt; /var/www/randomstring/index.html
&lt;span class=&quot;gp&quot;&gt;root@remote-lab:~# &lt;/span&gt;vim /var/www/randomstring/.htaccess
AuthUserFile /etc/apache2/htpasswd
AuthName &lt;span class=&quot;s2&quot;&gt;&quot;Please Log In&quot;&lt;/span&gt;
AuthType Basic
require user admin
&lt;span class=&quot;gp&quot;&gt;root@remote-lab:~# &lt;/span&gt;htpasswd -c /etc/apache2/htpasswd admin
New password:
Re-type new password:
Adding password &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;user admin
&lt;span class=&quot;gp&quot;&gt;root@remote-lab:~# &lt;/span&gt;cat /etc/apache2/htpasswd
admin:NA4V0VYvLWlU2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s try a test that sends an HTTP request and see if the server returns a 200 OK.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;marius@remoteur:~\&amp;gt; &lt;/span&gt;curl -s http://admin:pass@www.remote-lab.net/randomstring/index.html&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check the apache logs:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;188.26.130.193, 188.26.130.193 - admin &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;20/Jan/2013:12:21:39 +0200] &lt;span class=&quot;s2&quot;&gt;&quot;GET /randomstring/index.html HTTP/1.1&quot;&lt;/span&gt; 200 23 &lt;span class=&quot;s2&quot;&gt;&quot;-&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;curl/7.26.0&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Setting up the DNS server. I will use bind9 and show the config files used for remote-lab.net domain as example:
Create the zone file of your domain:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@remote-lab:~# &lt;/span&gt;vim /etc/bind/db.remote-lab.net
&lt;span class=&quot;nv&quot;&gt;$TTL&lt;/span&gt;    120
@   IN  SOA ns.remote-lab.net. marius.remote-lab.net. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            2012121951  ; Serial
            120         ; Refresh
            86400       ; Retry
            2419200     ; Expire
            120 &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;   ; Negative Cache TTL
;
@       IN  NS  ns.remote-lab.net.
ns      IN  A   188.240.48.106
@       IN  A   188.240.48.106
@       IN  MX  1 aspmx.l.google.com.
@       IN  MX  5 alt1.aspmx.l.google.com.
@       IN  MX  5 alt2.aspmx.l.google.com.
@       IN  MX  10 aspmx2.googlemail.com.
@       IN  MX  10 aspmx3.googlemail.com.
@       IN  MX  10 aspmx4.googlemail.com.
@       IN  MX  10 aspmx5.googlemail.com.
@       IN  TXT &lt;span class=&quot;s2&quot;&gt;&quot;v=spf1 include:_spf.google.com ip4:188.240.48.106 ~all&quot;&lt;/span&gt;
mail    IN  CNAME  ghs.google.com.
www     IN  CNAME  remote-lab.net.
virtual IN  A   188.26.130.193&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One thing to notice is that I set the TTL value to 3 minutes so that the changes will be quickly propagated. 
virtual.remote-lab.net is the hostname assigned to my lab ip address.
Edit the named.conf.local file and add your zone to the config :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@remote-lab:~# &lt;/span&gt;vim /etc/bind/named.conf.local
zone &lt;span class=&quot;s2&quot;&gt;&quot;remote-lab.net&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;master;
        file &lt;span class=&quot;s2&quot;&gt;&quot;/etc/bind/db.remote-lab.net&quot;&lt;/span&gt;;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@remote-lab:~# &lt;/span&gt;/etc/init.d/bind9 restart&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Restart the server and it should be up and running. You can do a quick test by querying the server for a specific record:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;marius@remoteur:~\&amp;gt; &lt;/span&gt;dig @188.240.48.106 virtual.remote-lab.net
;; QUESTION SECTION:
;virtual.remote-lab.net.		IN      	A
;; ANSWER SECTION:
virtual.remote-lab.net.	120     	IN      	A       	188.26.130.193
;; AUTHORITY SECTION:
remote-lab.net.  	        120     IN      	NS      	ns.remote-lab.net.
;; ADDITIONAL SECTION:
ns.remote-lab.net.	120     	IN      	A       	188.240.48.106&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Create a bash script that checks the web server logs, updates the zone records based on the source IP address of the HTTP requests and sends you an email when a change occurs:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;IPCLIENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;grep &lt;span class=&quot;s1&quot;&gt;'randomstring/index.html HTTP/1.1&quot; 200'&lt;/span&gt; /var/log/apache2/access_log | tail -1 | awk &lt;span class=&quot;s1&quot;&gt;'{print $2}'&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SERIAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;grep Serial /etc/bind/db.remote-lab.net | sed -e &lt;span class=&quot;s1&quot;&gt;'s/; Serial//'&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SERIALNEW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SERIAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;IPLAB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;grep virtual /etc/bind/db.remote-lab.net | awk -F&lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{print $4}'&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$IPCLIENT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$IPLAB&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    :
&lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;sed -i &lt;span class=&quot;s2&quot;&gt;&quot;s/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SERIAL&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SERIALNEW&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&quot;&lt;/span&gt; /etc/bind/db.remote-lab.net
    sed -i &lt;span class=&quot;s2&quot;&gt;&quot;s/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$IPLAB&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$IPCLIENT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&quot;&lt;/span&gt; /etc/bind/db.remote-lab.net
    /etc/init.d/bind9 reload
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;The new LAB IP is &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$IPCLIENT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | mail -s &lt;span class=&quot;s2&quot;&gt;&quot;Your ISP has just changed your assigned IP&quot;&lt;/span&gt; -r root@remote-lab.net marius@remote-lab.net

&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The last thing to do is to add our script to the cron jobs and run every several minutes.&lt;/p&gt;

&lt;p&gt;Please let me know if you have any questions or if I missed something in this setup.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>KVM Installation on Ubuntu 12.10</title>
   <link href="http://remote-lab.net:4000/kvm-installation-on-ubuntu-12-10"/>
   <updated>2013-04-19T16:35:02+00:00</updated>
   <id>http://remote-lab.net:4000/kvm-installation-on-ubuntu-12-10</id>
   <content type="html">&lt;p&gt;In this post I’d like to do an introduction on how you can install KVM and the tools that allow you to easily run VMs.
KVM - Kernel Virtual Machine is a Linux kernel module that enables the user space programs to use the hardware virtualization capabilities of Intel or AMD processors.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;QEMU is a machine emulator that allows you to run instructions for specific architecture on your x86 CPU. It is also a virtualizer that executes the guest VM code directly on the hypervisor CPU, which is our use case providing almost native performance for the guest VMs.&lt;/p&gt;

&lt;p&gt;The libvirt library provides an interface used for the KVM instances management.&lt;/p&gt;

&lt;p&gt;bridge-utils allow you to bridge multiple ethernet devices and it will help you provide connectivity to your VM instances.&lt;/p&gt;

&lt;p&gt;virtinst provides cli tools that allow you to create VMs&lt;/p&gt;

&lt;p&gt;virt-manager is a graphical tool used for the VM management&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;marius@remoteur:~\&amp;gt; &lt;/span&gt;sudo aptitude install qemu-kvm libvirt-bin bridge-utils virtinst virt-manager&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next step is to add our username to the libvirtd group:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;marius@remoteur:~\&amp;gt; &lt;/span&gt;sudo adduser &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;id -un&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; libvirtd&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At this time we should be able to start creating an instance. Let’s prepare the storage and the network our VM will use.
For the storage we will create an emtpy image file of 5GiB size:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;marius@remoteur:~\&amp;gt; &lt;/span&gt;dd &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/zero &lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vm.storage &lt;span class=&quot;nv&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1024 &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;seek&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$[&lt;/span&gt;1024&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;1024&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;5]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We will create a bridge called br0 and add eth0 wich is my laptop wired network interface to it. When created the VM should have an interface called vnet0 that is part of this bridge group:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;marius@remoteur:~\&amp;gt; &lt;/span&gt;sudo brctl add br0
&lt;span class=&quot;gp&quot;&gt;marius@remoteur:~\&amp;gt; &lt;/span&gt;sudo brctl addif br0 eth0
&lt;span class=&quot;gp&quot;&gt;marius@remoteur:~\&amp;gt; &lt;/span&gt;brctl show
bridge name      bridge id        STP enabled      interfaces
br0           8000.c82a141ab88e        no          eth0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s define our VM instance.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;marius@remoteur:~\&amp;gt; &lt;/span&gt;sudo virt-install --name vm --disk &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/marius/vm.storage,bus&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;virtio,cache&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;none --network &lt;span class=&quot;nv&quot;&gt;bridge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;br0,model&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;virtio --location&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ftp://ftp.lug.ro/debian/dists/wheezy/main/installer-amd64/ --cpuset&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;auto --vcpu&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 --ram&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1024 --extra-args&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;priority=low&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After this our install should be starting. You can use virt-manager to manage all the machines that are running on your local or remote hypervisor. It also allows you to access their consoles and adjust different parameters in the VM definition.
&lt;a href=&quot;http://remote-lab.net:4000/public/images/virt-manager.png&quot;&gt;&lt;img class=&quot;aligncenter size-medium wp-image-147&quot; title=&quot;virt-manager&quot; alt=&quot;&quot; src=&quot;http://remote-lab.net:4000/public/images/virt-manager.png&quot; width=&quot;500&quot; height=&quot;465&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Cisco SDM</title>
   <link href="http://remote-lab.net:4000/routing/ios/2013/04/14/cisco-sdm/"/>
   <updated>2013-04-14T00:08:49+00:00</updated>
   <id>http://remote-lab.net:4000/routing/ios/2013/04/14/cisco-sdm</id>
   <content type="html">&lt;p class=&quot;MsoNormal&quot;&gt;&lt;!--[if gte mso 9]&gt;&lt;xml&gt;&lt;/p&gt;
&lt;p&gt;&lt;o:OfficeDocumentSettings&gt;&lt;/p&gt;
&lt;p&gt;&lt;o:AllowPNG/&gt;&lt;/p&gt;
&lt;p&gt;&lt;/o:OfficeDocumentSettings&gt;&lt;/p&gt;
&lt;p&gt;&lt;/xml&gt;&lt;![endif]--&gt; This week I was required to configure for a client a Cisco 3550 remotely, via a console cable connected between his actual router (linux with Quagga) to this new router. His setup was with 2 BGP sessions, on each having the metro table (about 15K routes) + default route - quite easy in theory, but overall, I spent more time with this project that I was planning initially.&lt;/p&gt;
&lt;p&gt;The problems began when I asked him to connect firstly the backup cable / session, to test the functionality. Although the BGP session was UP, the console and the log were filled with messages regarding 'memory fragmentation', 'bad allocation' and stuff like that. After a quick inspection, I thought the issue was caused by the IOS version, so I changed it. When I tested again, the warnings reappeared.&lt;/p&gt;
&lt;p&gt;Well, Cisco has some memory allocation algorithm on several equipment families, like 3550, 3750,2950 etc, called SDM - Switching Database Manager.&lt;/p&gt;
&lt;p&gt;In this way you can allocate the memory of the router / switch based on your desired goals:&lt;/p&gt;
&lt;p&gt;&amp;nbsp;Router(config)#sdm prefer ?&lt;/p&gt;
&lt;p&gt;&amp;nbsp; access&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; multicast and qos/acl bias, drop unicast&lt;/p&gt;
&lt;p&gt;&amp;nbsp; extended-match&amp;nbsp; Using extended match for unicast routing&lt;/p&gt;
&lt;p&gt;&amp;nbsp; routing&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; unicast bias, drop qos/acl&lt;/p&gt;
&lt;p&gt;&amp;nbsp; vlan&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; vlan bias, drop routing&lt;/p&gt;
&lt;p&gt;In my case, it was a gigabit 3550, so the routing template was perfect for my scenario.&amp;nbsp;The last step was to reboot the router and then all was functioning without any errors. In the end, I had this memory allocation:&lt;/p&gt;
&lt;p&gt;&amp;nbsp;Router#sh sdm prefer | i route&lt;/p&gt;
&lt;p&gt;&amp;nbsp;number of unicast routes:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 24K&lt;/p&gt;
&lt;p&gt;&amp;nbsp;number of multicast routes:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 6K&lt;/p&gt;
&lt;p&gt;You can find a lot of documentation on Cisco's website, regarding the differences between templates and further explanations on this topic.&lt;/p&gt;
&lt;p&gt;&lt;!--[if gte mso 9]&gt;&lt;xml&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:WordDocument&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:View&gt;Normal&lt;/w:View&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:Zoom&gt;0&lt;/w:Zoom&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:TrackMoves/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:TrackFormatting/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:PunctuationKerning/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:ValidateAgainstSchemas/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:SaveIfXMLInvalid&gt;false&lt;/w:SaveIfXMLInvalid&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:IgnoreMixedContent&gt;false&lt;/w:IgnoreMixedContent&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:AlwaysShowPlaceholderText&gt;false&lt;/w:AlwaysShowPlaceholderText&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:DoNotPromoteQF/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LidThemeOther&gt;EN-US&lt;/w:LidThemeOther&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LidThemeAsian&gt;X-NONE&lt;/w:LidThemeAsian&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LidThemeComplexScript&gt;X-NONE&lt;/w:LidThemeComplexScript&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:Compatibility&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:BreakWrappedTables/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:SnapToGridInCell/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:WrapTextWithPunct/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:UseAsianBreakRules/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:DontGrowAutofit/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:SplitPgBreakAndParaMark/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:EnableOpenTypeKerning/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:DontFlipMirrorIndents/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:OverrideTableStyleHps/&gt;&lt;/p&gt;
&lt;p&gt;&lt;/w:Compatibility&gt;&lt;/p&gt;
&lt;p&gt;&lt;m:mathPr&gt;&lt;/p&gt;
&lt;p&gt;&lt;m:mathFont m:val=&quot;Cambria Math&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;m:brkBin m:val=&quot;before&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;m:brkBinSub m:val=&quot;--&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;m:smallFrac m:val=&quot;off&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;m:dispDef/&gt;&lt;/p&gt;
&lt;p&gt;&lt;m:lMargin m:val=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;m:rMargin m:val=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;m:defJc m:val=&quot;centerGroup&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;m:wrapIndent m:val=&quot;1440&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;m:intLim m:val=&quot;subSup&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;m:naryLim m:val=&quot;undOvr&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;/m:mathPr&gt;&lt;/w:WordDocument&gt;&lt;/p&gt;
&lt;p&gt;&lt;/xml&gt;&lt;![endif]--&gt;&lt;!--[if gte mso 9]&gt;&lt;xml&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LatentStyles DefLockedState=&quot;false&quot; DefUnhideWhenUsed=&quot;true&quot;   DefSemiHidden=&quot;true&quot; DefQFormat=&quot;false&quot; DefPriority=&quot;99&quot;   LatentStyleCount=&quot;267&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;0&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; QFormat=&quot;true&quot; Name=&quot;Normal&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;9&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; QFormat=&quot;true&quot; Name=&quot;heading 1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;9&quot; QFormat=&quot;true&quot; Name=&quot;heading 2&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;9&quot; QFormat=&quot;true&quot; Name=&quot;heading 3&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;9&quot; QFormat=&quot;true&quot; Name=&quot;heading 4&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;9&quot; QFormat=&quot;true&quot; Name=&quot;heading 5&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;9&quot; QFormat=&quot;true&quot; Name=&quot;heading 6&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;9&quot; QFormat=&quot;true&quot; Name=&quot;heading 7&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;9&quot; QFormat=&quot;true&quot; Name=&quot;heading 8&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;9&quot; QFormat=&quot;true&quot; Name=&quot;heading 9&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;39&quot; Name=&quot;toc 1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;39&quot; Name=&quot;toc 2&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;39&quot; Name=&quot;toc 3&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;39&quot; Name=&quot;toc 4&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;39&quot; Name=&quot;toc 5&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;39&quot; Name=&quot;toc 6&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;39&quot; Name=&quot;toc 7&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;39&quot; Name=&quot;toc 8&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;39&quot; Name=&quot;toc 9&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;35&quot; QFormat=&quot;true&quot; Name=&quot;caption&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;10&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; QFormat=&quot;true&quot; Name=&quot;Title&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;1&quot; Name=&quot;Default Paragraph Font&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;11&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; QFormat=&quot;true&quot; Name=&quot;Subtitle&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;22&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; QFormat=&quot;true&quot; Name=&quot;Strong&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;20&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; QFormat=&quot;true&quot; Name=&quot;Emphasis&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;59&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Table Grid&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; UnhideWhenUsed=&quot;false&quot; Name=&quot;Placeholder Text&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;1&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; QFormat=&quot;true&quot; Name=&quot;No Spacing&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;60&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Light Shading&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;61&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Light List&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;62&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Light Grid&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;63&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium Shading 1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;64&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium Shading 2&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;65&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium List 1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;66&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium List 2&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;67&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium Grid 1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;68&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium Grid 2&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;69&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium Grid 3&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;70&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Dark List&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;71&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Colorful Shading&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;72&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Colorful List&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;73&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Colorful Grid&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;60&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Light Shading Accent 1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;61&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Light List Accent 1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;62&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Light Grid Accent 1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;63&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium Shading 1 Accent 1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;64&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium Shading 2 Accent 1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;65&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium List 1 Accent 1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; UnhideWhenUsed=&quot;false&quot; Name=&quot;Revision&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;34&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; QFormat=&quot;true&quot; Name=&quot;List Paragraph&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;29&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; QFormat=&quot;true&quot; Name=&quot;Quote&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;30&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; QFormat=&quot;true&quot; Name=&quot;Intense Quote&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;66&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium List 2 Accent 1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;67&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium Grid 1 Accent 1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;68&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium Grid 2 Accent 1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;69&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium Grid 3 Accent 1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;70&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Dark List Accent 1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;71&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Colorful Shading Accent 1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;72&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Colorful List Accent 1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;73&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Colorful Grid Accent 1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;60&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Light Shading Accent 2&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;61&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Light List Accent 2&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;62&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Light Grid Accent 2&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;63&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium Shading 1 Accent 2&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;64&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium Shading 2 Accent 2&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;65&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium List 1 Accent 2&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;66&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium List 2 Accent 2&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;67&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium Grid 1 Accent 2&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;68&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium Grid 2 Accent 2&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;69&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium Grid 3 Accent 2&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;70&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Dark List Accent 2&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;71&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Colorful Shading Accent 2&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;72&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Colorful List Accent 2&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;73&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Colorful Grid Accent 2&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;60&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Light Shading Accent 3&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;61&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Light List Accent 3&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;62&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Light Grid Accent 3&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;63&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium Shading 1 Accent 3&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;64&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium Shading 2 Accent 3&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;65&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium List 1 Accent 3&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;66&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium List 2 Accent 3&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;67&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium Grid 1 Accent 3&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;68&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium Grid 2 Accent 3&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;69&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium Grid 3 Accent 3&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;70&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Dark List Accent 3&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;71&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Colorful Shading Accent 3&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;72&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Colorful List Accent 3&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;73&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Colorful Grid Accent 3&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;60&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Light Shading Accent 4&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;61&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Light List Accent 4&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;62&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Light Grid Accent 4&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;63&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium Shading 1 Accent 4&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;64&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium Shading 2 Accent 4&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;65&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium List 1 Accent 4&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;66&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium List 2 Accent 4&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;67&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium Grid 1 Accent 4&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;68&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium Grid 2 Accent 4&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;69&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium Grid 3 Accent 4&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;70&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Dark List Accent 4&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;71&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Colorful Shading Accent 4&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;72&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Colorful List Accent 4&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;73&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Colorful Grid Accent 4&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;60&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Light Shading Accent 5&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;61&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Light List Accent 5&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;62&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Light Grid Accent 5&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;63&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium Shading 1 Accent 5&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;64&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium Shading 2 Accent 5&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;65&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium List 1 Accent 5&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;66&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium List 2 Accent 5&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;67&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium Grid 1 Accent 5&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;68&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium Grid 2 Accent 5&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;69&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium Grid 3 Accent 5&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;70&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Dark List Accent 5&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;71&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Colorful Shading Accent 5&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;72&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Colorful List Accent 5&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;73&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Colorful Grid Accent 5&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;60&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Light Shading Accent 6&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;61&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Light List Accent 6&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;62&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Light Grid Accent 6&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;63&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium Shading 1 Accent 6&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;64&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium Shading 2 Accent 6&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;65&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium List 1 Accent 6&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;66&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium List 2 Accent 6&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;67&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium Grid 1 Accent 6&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;68&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium Grid 2 Accent 6&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;69&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Medium Grid 3 Accent 6&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;70&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Dark List Accent 6&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;71&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Colorful Shading Accent 6&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;72&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Colorful List Accent 6&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;73&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; Name=&quot;Colorful Grid Accent 6&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;19&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; QFormat=&quot;true&quot; Name=&quot;Subtle Emphasis&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;21&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; QFormat=&quot;true&quot; Name=&quot;Intense Emphasis&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;31&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; QFormat=&quot;true&quot; Name=&quot;Subtle Reference&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;32&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; QFormat=&quot;true&quot; Name=&quot;Intense Reference&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;33&quot; SemiHidden=&quot;false&quot;    UnhideWhenUsed=&quot;false&quot; QFormat=&quot;true&quot; Name=&quot;Book Title&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;37&quot; Name=&quot;Bibliography&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;w:LsdException Locked=&quot;false&quot; Priority=&quot;39&quot; QFormat=&quot;true&quot; Name=&quot;TOC Heading&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;/w:LatentStyles&gt;&lt;/p&gt;
&lt;p&gt;&lt;/xml&gt;&lt;![endif]--&gt;&lt;!--[if gte mso 10]&gt;&lt;/p&gt;
&lt;style&gt;
 /* Style Definitions */&lt;/p&gt;
&lt;p&gt;table.MsoNormalTable&lt;/p&gt;
&lt;p&gt;{mso-style-name:&quot;Table Normal&quot;;&lt;/p&gt;
&lt;p&gt;mso-tstyle-rowband-size:0;&lt;/p&gt;
&lt;p&gt;mso-tstyle-colband-size:0;&lt;/p&gt;
&lt;p&gt;mso-style-noshow:yes;&lt;/p&gt;
&lt;p&gt;mso-style-priority:99;&lt;/p&gt;
&lt;p&gt;mso-style-parent:&quot;&quot;;&lt;/p&gt;
&lt;p&gt;mso-padding-alt:0in 5.4pt 0in 5.4pt;&lt;/p&gt;
&lt;p&gt;mso-para-margin-top:0in;&lt;/p&gt;
&lt;p&gt;mso-para-margin-right:0in;&lt;/p&gt;
&lt;p&gt;mso-para-margin-bottom:10.0pt;&lt;/p&gt;
&lt;p&gt;mso-para-margin-left:0in;&lt;/p&gt;
&lt;p&gt;line-height:115%;&lt;/p&gt;
&lt;p&gt;mso-pagination:widow-orphan;&lt;/p&gt;
&lt;p&gt;font-size:11.0pt;&lt;/p&gt;
&lt;p&gt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;&lt;/p&gt;
&lt;p&gt;mso-ascii-font-family:Calibri;&lt;/p&gt;
&lt;p&gt;mso-ascii-theme-font:minor-latin;&lt;/p&gt;
&lt;p&gt;mso-hansi-font-family:Calibri;&lt;/p&gt;
&lt;p&gt;mso-hansi-theme-font:minor-latin;}&lt;/p&gt;
&lt;/style&gt;
&lt;p&gt;&lt;![endif]--&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Pure-FTPd with MySQL backend</title>
   <link href="http://remote-lab.net:4000/pure-ftpd-with-mysql-backend"/>
   <updated>2013-04-13T23:27:26+00:00</updated>
   <id>http://remote-lab.net:4000/pure-ftpd-with-mysql-backend</id>
   <content type="html">&lt;p&gt;This is a quick tutorial on how to install a clean FTP server with MySQL user database backend on a Debian based OS:&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Install MySQL Server, Client and Pure-FTPd server:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;aptitude install mysql-server mysql-client pure-ftpd-mysql&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Connect to the MySQL server using the local console, create the database, grant privileges for the account the FTP server will use to connect to the DB, create the table that will store the user info and populate it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;mysql&amp;gt; &lt;/span&gt;CREATE DATABASE pureftpd;
&lt;span class=&quot;gp&quot;&gt;mysql&amp;gt; &lt;/span&gt;GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP ON pureftpd.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; TO &lt;span class=&quot;s1&quot;&gt;'pureftpd'&lt;/span&gt;@&lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt; IDENTIFIED BY &lt;span class=&quot;s1&quot;&gt;'ftpdpass'&lt;/span&gt;;
&lt;span class=&quot;gp&quot;&gt;mysql&amp;gt; &lt;/span&gt;FLUSH PRIVILEGES;
&lt;span class=&quot;gp&quot;&gt;mysql&amp;gt; &lt;/span&gt;USE pureftpd;
&lt;span class=&quot;gp&quot;&gt;mysql&amp;gt; &lt;/span&gt;CREATE TABLE users &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    -&amp;gt; User varchar&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;16&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; NOT NULL default &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;,
    -&amp;gt; status enum&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'0'&lt;/span&gt;,&lt;span class=&quot;s1&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; NOT NULL default &lt;span class=&quot;s1&quot;&gt;'0'&lt;/span&gt;,
    -&amp;gt; Password varchar&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;64&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; NOT NULL default &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;,
    -&amp;gt; Uid varchar&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;11&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; NOT NULL default &lt;span class=&quot;s1&quot;&gt;'-1'&lt;/span&gt;,
    -&amp;gt; Gid varchar&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;11&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; NOT NULL default &lt;span class=&quot;s1&quot;&gt;'-1'&lt;/span&gt;,
    -&amp;gt; Dir varchar&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;128&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; NOT NULL default &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;,
    -&amp;gt; comment tinytext NOT NULL,
    -&amp;gt; PRIMARY KEY &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;User&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,
    -&amp;gt; UNIQUE KEY User &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;User&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    -&amp;gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;MyISAM;
&lt;span class=&quot;gp&quot;&gt;mysql&amp;gt; &lt;/span&gt;insert into &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;users&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;User&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;, &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;status&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;, &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;Password&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;, &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;Uid&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;, &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;Gid&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;, &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;Dir&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;, &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;comment&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; values &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ftpuser'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'1'&lt;/span&gt;, md5&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'password'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'33'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'33'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'/var/www/'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next, let’s edit the config file used by the PureFTP server to connect to the MySQL server and query the database:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@remote-lab:~# &lt;/span&gt;vim /etc/pure-ftpd/db/mysql.conf
MYSQLSocket      /var/run/mysqld/mysqld.sock
MYSQLServer     localhost
MYSQLPort       3306
MYSQLUser       pureftpd
MYSQLPassword   ftpdpass
MYSQLDatabase   pureftpd
MYSQLCrypt      md5
MYSQLGetPW      SELECT Password FROM users WHERE &lt;span class=&quot;nv&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\L&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; AND &lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;
MYSQLGetUID     SELECT Uid FROM users WHERE &lt;span class=&quot;nv&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\L&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; AND &lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;
MYSQLGetGID     SELECT Gid FROM users WHERE &lt;span class=&quot;nv&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\L&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;AND &lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;
MYSQLGetDir     SELECT Dir FROM users WHERE &lt;span class=&quot;nv&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\L&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;AND &lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A couple of settings I find useful are to chroot the users in their directories and to set PureFTPd not to resolve hostnames. If you want to add users having an UID lower than 1000 you will also have to change the default config file. This is useful for instance if you add ftp users that need access to directories owned by www-data that has 33 UID.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;yes&quot;&lt;/span&gt; &amp;gt; /etc/pure-ftpd/conf/ChrootEveryone
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;yes&quot;&lt;/span&gt; &amp;gt; /etc/pure-ftpd/conf/DontResolve
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;33&quot;&lt;/span&gt; &amp;gt; /etc/pure-ftpd/conf/MinUID&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/etc/init.d/pure-ftpd-mysql restart&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And we should be up and running.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Cisco IOS DHCP search option</title>
   <link href="http://remote-lab.net:4000/cisco-ios-dhcp-search-option"/>
   <updated>2013-04-12T23:50:25+00:00</updated>
   <id>http://remote-lab.net:4000/cisco-ios-dhcp-search-option-2</id>
   <content type="html">&lt;p&gt;I was looking today for a way to set my home Cisco router to push multiple domains in the DHCP search list. I found this very useful post written by Jonathan Perkin: &lt;a href=&quot;http://www.perkin.org.uk/posts/serving-multiple-dns-search-domains-in-ios-dhcp.html&quot;&gt;http://www.perkin.org.uk/posts/serving-multiple-dns-search-domains-in-ios-dhcp.html&lt;/a&gt; where he explains how we can achieve this by using Cisco’s hex sequence in the search option. He also provides a nice python script that converts the domain ASCII string to hex sequence.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Thank you very much, Jonathan, very useful info.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ios&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hexlist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;domain&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hexlist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%02&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;x&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;part&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;hexlist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hex&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hexlist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;00&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; \
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;marius@remoteur:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;./ios-search.py domain.net domain.org domain.com
0664.6f6d.6169.6e03.6e65.7400.0664.6f6d.6169.6e03.6f72.6700.0664.6f6d.6169.6e03.636f.6d00&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;c881.remote-lab.net#show run | s ip dhcp pool
ip dhcp pool HomeLeases
   network 10.0.0.0 255.255.255.0
   default-router 10.0.0.1
   domain-name remote-lab.net
   dns-server 8.8.8.8 8.8.4.4
   option 119 hex 0664.6f6d.6169.6e03.6e65.7400.0664.6f6d.6169.6e03.6f72.6700.0664.6f6d.6169.6e03.636f.6d00&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;marius@remoteur:~&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;grep search /etc/resolv.conf
search remote-lab.net domain.net domain.org domain.com&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>Implementing AAA with TACACS+</title>
   <link href="http://remote-lab.net:4000/implementing-aaa-with-tacacs"/>
   <updated>2013-04-05T23:25:58+00:00</updated>
   <id>http://remote-lab.net:4000/implementing-aaa-with-tacacs</id>
   <content type="html">&lt;p&gt;In today’s post I will showw how you can do a basic configuration of a TACACS+ Linux server and how to enable the AAA on the networking device.
To start with AAA, stands for Authentication, Authorization and Accounting. The authentication is related to the login process: users and their passwords, authorization describes what each of the users is allowed to do on the device and the accounting part logs what commands the users have issued on the device. All these are implemented as a set of attributes stored in a database that can be located locally on the device or hosted remotely on a TACACS+ or RADIUS server.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;http://remote-lab.net:4000/public/images/tacacs.gif&quot;&gt;&lt;img class=&quot;aligncenter size-medium wp-image-147&quot; title=&quot;tacacs&quot; src=&quot;http://remote-lab.net:4000/public/images/tacacs.gif&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;265&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Installing TACACS+ Server:&lt;/p&gt;

&lt;p&gt;I am using Debian Squeeze as OS. TACACS+ comes in Squeeze repositories so installing it is as simple as :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;aptitude install tacacs+&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Its config file is located at /etc/tacacs+/tac_plus.conf. In order to start, stop, restart it you can use the init scripts.&lt;/p&gt;

&lt;p&gt;Let’s do a basic configuration and add 2 users on the database: admin with full privileges and user having restricted access:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#This is the key used by the device to authenticate to the TACACS server.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#We will also set it on the Cisco router&lt;/span&gt;
key &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; testing123 
&lt;span class=&quot;c&quot;&gt;# This is the admin user having full privileges.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# You may generate the login encrypted password using the tac_pwd tool that comes with the tacacs+ package&lt;/span&gt;
user &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; admin &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
default service &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; permit
login &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; des RXs9NfUA2sKIE
service &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
priv-lvl &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 15
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This is the user having restricted privileges.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# As you may see the default policy is deny for all the commands and we then set to allow the show ip * and show interface * commands, everything else is denied.&lt;/span&gt;
user &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; user &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
default service &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; deny
login &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; cleartext &lt;span class=&quot;nb&quot;&gt;test
&lt;/span&gt;cmd &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; show
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
permit ip
permit interface
deny .&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s get to the client side - the Cisco router. We first have to tell the router that it should use TACACS for authentication and the IP address of the server with the authentication key to the server.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;aaa new-model
tacacs-server host &lt;span class=&quot;nv&quot;&gt;$IP_ADDR&lt;/span&gt;
tacacs-server key &lt;span class=&quot;nv&quot;&gt;$SERVER_KEY&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#the same as the one of the server: testing123&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next we will configure the authentication methods:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;aaa authentication login vtymethod group tacacs+ &lt;span class=&quot;nb&quot;&gt;enable&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#uses vtymethod list that first tries the tacacs method and if the server is not reachable users can log in using the enable password&lt;/span&gt;
line vty 0 4
   login authentication vtymethod &lt;span class=&quot;c&quot;&gt;#we tell the router to use the vtymethod list for authenticating the users&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s get to the authorization part. We will set it for both privilege level 1 and 15 commands&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;aaa authorization config-commands &lt;span class=&quot;c&quot;&gt;#does authorization for the configuration mode commands&lt;/span&gt;
aaa authorization commands 1 default group tacacs+ none &lt;span class=&quot;c&quot;&gt;#uses the default authorization list which authorizes all the commands through tacacs and if the server is not reachable it won’t do any authorization&lt;/span&gt;
aaa authorization commands 15 default group tacacs+ none&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Accounting:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;aaa accounting &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;default start-stop tacacs+&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In order to have accouting in place you also need to set the accounting log file location on the server:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;accounting file &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /var/log/tac_plus.acct&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Troubleshooting AAA issues can be done using the debug aaa command. Below is an example of the authorization debug for user when trying to enter configuration mode - which is not allowed and when issuing the show ip int brief command allowed:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Mar 1 03:29:59.859: tty4 AAA/AUTHOR/CMD&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4247381793&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;nv&quot;&gt;Port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'tty4'&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;CMD
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Mar 1 03:29:59.863: AAA/AUTHOR/CMD: tty4&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4247381793&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'user'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Mar 1 03:29:59.863: tty4 AAA/AUTHOR/CMD&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4247381793&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: send AV &lt;span class=&quot;nv&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;shell
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Mar 1 03:29:59.863: tty4 AAA/AUTHOR/CMD&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4247381793&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: send AV &lt;span class=&quot;nv&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;configure
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Mar 1 03:29:59.863: tty4 AAA/AUTHOR/CMD&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4247381793&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: send AV cmd-arg&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;terminal
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Mar 1 03:29:59.863: tty4 AAA/AUTHOR/CMD&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4247381793&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: send AV cmd-arg&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Mar 1 03:29:59.863: tty4 AAA/AUTHOR/CMD&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4247381793&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: found list &lt;span class=&quot;s2&quot;&gt;&quot;default&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Mar 1 03:29:59.863: tty4 AAA/AUTHOR/CMD&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4247381793&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;nv&quot;&gt;Method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;tacacs+ &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;tacacs+&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Mar 1 03:29:59.863: AAA/AUTHOR/TAC+: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4247381793&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;nv&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;user
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Mar 1 03:29:59.863: AAA/AUTHOR/TAC+: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4247381793&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: send AV &lt;span class=&quot;nv&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;shell
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Mar 1 03:29:59.863: AAA/AUTHOR/TAC+: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4247381793&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: send AV &lt;span class=&quot;nv&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;configure
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Mar 1 03:29:59.867: AAA/AUTHOR/TAC+: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4247381793&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: send AV cmd-arg&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;terminal
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Mar 1 03:29:59.867: AAA/AUTHOR/TAC+: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4247381793&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: send AV cmd-arg&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Mar 1 03:30:00.071: TAC+: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;-47585503&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: received author response status &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; FAIL
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Mar 1 03:30:00.071: AAA/AUTHOR &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4247381793&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: Post authorization status &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; FAIL
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Mar 1 03:30:23.575: tty4 AAA/AUTHOR/CMD&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2242867480&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;nv&quot;&gt;Port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'tty4'&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;CMD
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Mar 1 03:30:23.575: AAA/AUTHOR/CMD: tty4&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2242867480&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'user'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Mar 1 03:30:23.575: tty4 AAA/AUTHOR/CMD&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2242867480&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: send AV &lt;span class=&quot;nv&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;shell
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Mar 1 03:30:23.575: tty4 AAA/AUTHOR/CMD&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2242867480&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: send AV &lt;span class=&quot;nv&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;show
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Mar 1 03:30:23.575: tty4 AAA/AUTHOR/CMD&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2242867480&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: send AV cmd-arg&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ip
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Mar 1 03:30:23.575: tty4 AAA/AUTHOR/CMD&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2242867480&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: send AV cmd-arg&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;interface
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Mar 1 03:30:23.575: tty4 AAA/AUTHOR/CMD&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2242867480&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: send AV cmd-arg&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;brief
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Mar 1 03:30:23.575: tty4 AAA/AUTHOR/CMD&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2242867480&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: send AV cmd-arg&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Mar 1 03:30:23.575: tty4 AAA/AUTHOR/CMD&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2242867480&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: found list &lt;span class=&quot;s2&quot;&gt;&quot;default&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Mar 1 03:30:23.583: tty4 AAA/AUTHOR/CMD&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2242867480&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;nv&quot;&gt;Method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;tacacs+ &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;tacacs+&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Mar 1 03:30:23.583: AAA/AUTHOR/TAC+: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2242867480&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;nv&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;user
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Mar 1 03:30:23.583: AAA/AUTHOR/TAC+: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2242867480&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: send AV &lt;span class=&quot;nv&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;shell
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Mar 1 03:30:23.583: AAA/AUTHOR/TAC+: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2242867480&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: send AV &lt;span class=&quot;nv&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;show
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Mar 1 03:30:23.583: AAA/AUTHOR/TAC+: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2242867480&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: send AV cmd-arg&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ip
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Mar 1 03:30:23.583: AAA/AUTHOR/TAC+: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2242867480&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: send AV cmd-arg&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;interface
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Mar 1 03:30:23.583: AAA/AUTHOR/TAC+: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2242867480&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: send AV cmd-arg&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;brief
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Mar 1 03:30:23.583: AAA/AUTHOR/TAC+: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2242867480&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: send AV cmd-arg&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Mar 1 03:30:23.795: TAC+: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;-2052099816&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: received author response status &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; PASS_ADD
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Mar 1 03:30:23.799: AAA/AUTHOR &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2242867480&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: Post authorization status &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; PASS_ADD&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>Running Java Web Start applications on Ubuntu 12.04</title>
   <link href="http://remote-lab.net:4000/running-java-web-start-applications-on-ubuntu-12-04"/>
   <updated>2012-10-06T19:41:33+00:00</updated>
   <id>http://remote-lab.net:4000/running-java-web-start-applications-on-ubuntu-12-04</id>
   <content type="html">&lt;p&gt;In todays post I will present how to install the packages required to run Java web start applications ( .jnlp files) on Ubuntu 12.04.
Most of the KVM(keyboard, video and mouse) devices and several networking management software like Brocade Network Advisor use this kind of apps for remote access.&lt;/p&gt;

&lt;p&gt;IcedTea is a web browser plugin running Java applets and Web Start apps. The icedtea-netx package automatically installs all the required Java Openjdk packages.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;aptitude install icedtea-netx icedtea-netx-common icedtea6-plugin&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>How to restore grub using chroot</title>
   <link href="http://remote-lab.net:4000/how-to-install-grub-from-chroot"/>
   <updated>2012-09-29T22:53:29+00:00</updated>
   <id>http://remote-lab.net:4000/how-to-install-grub-from-chroot</id>
   <content type="html">&lt;p&gt;Below is a small tutorial of how you can install grub by chrooting into the the partition you would like to install the bootloader.&lt;/p&gt;

&lt;p&gt;I found it useful for XEN to KVM virtual machine migration:&lt;/p&gt;

&lt;hr /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mount /dev/sda /mnt/
mount -o &lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt; /dev /mnt/dev
chroot /mnt/
mount -t proc none proc
mount sysfs /sys -t sysfs
grub-install -f /dev/sda
grub-mkconfig -o /boot/grub/grub.cfg
reboot&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>The Spanning Tree Song</title>
   <link href="http://remote-lab.net:4000/the-spanning-tree-song"/>
   <updated>2012-09-23T17:42:32+00:00</updated>
   <id>http://remote-lab.net:4000/the-spanning-tree-song</id>
   <content type="html">&lt;p&gt;The Spanning Tree song performed by Radia Perlman, the inventor of the spanning tree algorithm. It sounds nice :)&lt;/p&gt;

&lt;iframe width=&quot;854&quot; height=&quot;510&quot; src=&quot;https://www.youtube.com/embed/iE_AbM8ZykI&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</content>
 </entry>
 
 <entry>
   <title>Blacklisting Linux kernel modules using the grub command line</title>
   <link href="http://remote-lab.net:4000/blacklisting-kernel-modules"/>
   <updated>2012-09-06T00:10:02+00:00</updated>
   <id>http://remote-lab.net:4000/blacklisting-kernel-modules</id>
   <content type="html">&lt;p&gt;In order the prevent certain modules from being loaded by the kernel using the grub command line you need to pass them as a parameter to the kernel line using the below syntax. It can be useful when you cannot access the OS file system so that you can edit a blacklist with the modules you don’t want to be loaded&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$module_name&lt;/span&gt;.blacklist&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;yes&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>Append and prepend using sed</title>
   <link href="http://remote-lab.net:4000/append-and-prepend-using-sed"/>
   <updated>2012-08-25T20:46:33+00:00</updated>
   <id>http://remote-lab.net:4000/append-and-prepend-using-sed</id>
   <content type="html">&lt;p&gt;Below is a small example that uses sed to create null routes based on the domain name. It can be useful when the domain name resolves to multiple IP addresses :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;host facebook.com| awk &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'print $4'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; | sed -n &lt;span class=&quot;s1&quot;&gt;'/^[1-9].*/p'&lt;/span&gt; | sed &lt;span class=&quot;s1&quot;&gt;'s/^/ip route /;s/$/ 255.255.255.255 null0/'&lt;/span&gt;
The result:
ip route 69.171.234.21 255.255.255.255 null0
ip route 69.171.237.16 255.255.255.255 null0
ip route 69.171.247.21 255.255.255.255 null0
ip route 66.220.149.88 255.255.255.255 null0
ip route 66.220.152.16 255.255.255.255 null0
ip route 66.220.158.70 255.255.255.255 null0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>Cisco IOS Scripting with TCL - Cisco 871 example</title>
   <link href="http://remote-lab.net:4000/ios-scripting-with-tcl-cisco-871"/>
   <updated>2012-03-05T02:58:23+00:00</updated>
   <id>http://remote-lab.net:4000/cisco-ios-scripting-with-tcl-soho-871-example</id>
   <content type="html">&lt;p&gt;In today’s post I will briefly introduce with a simple example how TCL scripting language can be used with the Cisco IOS. Starting with IOS version 12.3(2)T the TCL shell was integrated into Cisco’s IOS. Basically it provides a TCL shell environment where you can make use of all the TCL functions, process variables and configure your Cisco device with the help of these.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;To make an idea of what you can do here’s a simple script that would ping all the hosts in a subnet - with the TCL shell it’s as simple as defining a counter which will be the host part of the IP address and creating a loop where you are repeating the ping command and incrementing the counter. Even more with the help of Cisco Embedded Event Manager you can do even more fancy things. The EEM can trigger TCL scripts based on several policies such as SNMP MIB values or MIB variable thresholds or the matching the output of a local syslog message. You can even set your device to send you email messages based on these events which is pretty awesome.&lt;/p&gt;

&lt;p&gt;My example consists of a script which will configure a Cisco 871 router by interactive prompts asking for the hostname, IP addresses, usernames, timezone and setting up basic services like DHCP, NAT and SSH.
The Cisco 871 has 1 x FastEthernet external WAN port a 1 x 4 FastEthernet port switch. In order to run the script you will have to load it into the router’s flash memory or run it from a TFTP/HTTP server. This script will automatically set up overload NAT on the external FE interface for all the LAN IP addresses and it also set DHCP providing LAN IP addresses except the ones which are on the excluded list. Below you may find below the output of the script I’ve written, the resulted running config and also the actual code.&lt;/p&gt;

&lt;p&gt;Please let me know what you think about this, in my opinion it’s a very powerful tool.&lt;/p&gt;

&lt;p&gt;Download script file here: &lt;a href=&quot;http://remote-lab.net:4000/public/images/871.txt&quot;&gt;871.tcl&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;tcl&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#source flash:871.tcl&lt;/span&gt;
Please enter the hostname of this box: 871_SOHO
Please enter the domain name of this box: HOME.NET
Please enter the username you would like to configure &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;this system: user
Please enter the password &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;user: pass
Please enter the &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;password: cisco
Please enter the WAN IP address: 1.1.1.1
Please enter the WAN netmask: 255.255.255.0
Please enter the default gateway IP address: 1.1.1.2
Please enter the LAN IP address: 192.168.0.1
Please enter the LAN netmask: 255.255.255.240
Configuring the DHCP service...
Please enter the DNS Server IP address: 8.8.8.8
Please enter the excluded IP address from DHCP assignments - separated by spaces 192.168.0.1 192.168.0.2
Configuring NAT ...
Activating SSH ...
Please enter your timezone &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; eg. UTC +2 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;: UTC -5
Done...Your box is waiting &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;some packets!&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;871_SOHO#sh run
Building configuration...
!
version 12.4
no service pad
service timestamps debug datetime msec
service timestamps log datetime msec
service password-encryption
!
hostname 871_SOHO
!
boot-start-marker
boot-end-marker
!
logging message-counter syslog
logging buffered 25000
&lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;secret 5 &lt;span class=&quot;nv&quot;&gt;$1$9xIG$BwuXzBtmLsl6acCURFny31&lt;/span&gt;
!
aaa new-model
!
!
aaa authentication login default &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt;
!
!
aaa session-id common
clock timezone UTC -5
!
!
dot11 syslog
ip &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;-route
!
!
ip dhcp excluded-address 192.168.0.1
ip dhcp excluded-address 192.168.0.2
!
ip dhcp pool DHCP
   network 192.168.0.0 255.255.255.240
   default-router 192.168.0.1
   dns-server 8.8.8.8
!
!
ip cef
no ip domain lookup
ip domain name HOME.NET
no ipv6 cef
ntp server 64.6.144.6
!
multilink bundle-name authenticated
!
!
!
username user privilege 15 password 7 15020A1F17
!
!
!
archive
 log config
  hidekeys
!
!
ip ssh version 2
!
!
!
interface FastEthernet0
 switchport access vlan 55
!
interface FastEthernet1
 switchport access vlan 55
!
interface FastEthernet2
 switchport access vlan 55
!
interface FastEthernet3
 switchport access vlan 55
!
interface FastEthernet4
 ip address 1.1.1.1 255.255.255.0
 ip nat outside
 ip virtual-reassembly
 duplex auto
 speed auto
!
interface Vlan1
 no ip address
 shutdown
!
interface Vlan55
 ip address 192.168.0.1 255.255.255.240
 ip nat inside
 ip virtual-reassembly
!
ip forward-protocol nd
ip route 0.0.0.0 0.0.0.0 1.1.1.2
no ip http server
no ip http secure-server
!
!
ip nat inside &lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;list 1 interface FastEthernet4 overload
!
access-list 1 permit 192.168.0.0 0.0.0.15
!
!
!
!
!
control-plane
!
!
line con 0
 logging synchronous
 no modem &lt;span class=&quot;nb&quot;&gt;enable
&lt;/span&gt;line aux 0
line vty 0 4
 length 0
 transport input ssh
!
scheduler max-task-time 5000
end       &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ios_config &lt;span class=&quot;s2&quot;&gt;&quot;service password-encryption&quot;&lt;/span&gt;
ios_config &lt;span class=&quot;s2&quot;&gt;&quot;no service config&quot;&lt;/span&gt;
ios_config &lt;span class=&quot;s2&quot;&gt;&quot;line con 0&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;logging synchronous&quot;&lt;/span&gt;
puts -nonewline &lt;span class=&quot;s2&quot;&gt;&quot;Please enter the hostname of this box: &quot;&lt;/span&gt;
flush stdout
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;hostname &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; gets stdin &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
puts -nonewline &lt;span class=&quot;s2&quot;&gt;&quot;Please enter the domain name of this box: &quot;&lt;/span&gt;
flush stdout
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;domain &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; gets stdin &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
ios_config &lt;span class=&quot;s2&quot;&gt;&quot;ip domain name &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$domain&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
ios_config &lt;span class=&quot;s2&quot;&gt;&quot;hostname &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$hostname&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
ios_config &lt;span class=&quot;s2&quot;&gt;&quot;logging buffered 25000&quot;&lt;/span&gt;
ios_config &lt;span class=&quot;s2&quot;&gt;&quot;ip cef&quot;&lt;/span&gt;
ios_config &lt;span class=&quot;s2&quot;&gt;&quot;no ip domain lookup&quot;&lt;/span&gt;
ios_config &lt;span class=&quot;s2&quot;&gt;&quot;no ip http server&quot;&lt;/span&gt;
ios_config &lt;span class=&quot;s2&quot;&gt;&quot;aaa new-model&quot;&lt;/span&gt;
ios_config &lt;span class=&quot;s2&quot;&gt;&quot;aaa authentication login default local&quot;&lt;/span&gt;
puts -nonewline &lt;span class=&quot;s2&quot;&gt;&quot;Please enter the username you would like to configure for this system: &quot;&lt;/span&gt;
flush stdout
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;username &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; gets stdin &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
puts -nonewline &lt;span class=&quot;s2&quot;&gt;&quot;Please enter the password for &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$username&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &quot;&lt;/span&gt;
flush stdout
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;password &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; gets stdin &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
ios_config &lt;span class=&quot;s2&quot;&gt;&quot;username &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$username&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; privilege 15 password &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$password&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
puts -nonewline &lt;span class=&quot;s2&quot;&gt;&quot;Please enter the enable password: &quot;&lt;/span&gt;
flush stdout
&lt;span class=&quot;nb&quot;&gt;set enable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; gets stdin &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
ios_config &lt;span class=&quot;s2&quot;&gt;&quot;enable secret &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$enable&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
puts -nonewline &lt;span class=&quot;s2&quot;&gt;&quot;Please enter the WAN IP address: &quot;&lt;/span&gt;
flush stdout
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;wan_ip &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; gets stdin &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
puts -nonewline &lt;span class=&quot;s2&quot;&gt;&quot;Please enter the WAN netmask: &quot;&lt;/span&gt;
flush stdout
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;wan_netmask &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; gets stdin &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
ios_config &lt;span class=&quot;s2&quot;&gt;&quot;interface FastEthernet4&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ip address &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$wan_ip&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$wan_netmask&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
ios_config &lt;span class=&quot;s2&quot;&gt;&quot;interface FastEthernet4&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;no shutdown&quot;&lt;/span&gt;
puts -nonewline &lt;span class=&quot;s2&quot;&gt;&quot;Please enter the default gateway IP address: &quot;&lt;/span&gt;
flush stdout
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;def_gw &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; gets stdin &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
ios_config &lt;span class=&quot;s2&quot;&gt;&quot;ip route 0.0.0.0 0.0.0.0 &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$def_gw&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
puts -nonewline &lt;span class=&quot;s2&quot;&gt;&quot;Please enter the LAN IP address: &quot;&lt;/span&gt;
flush stdout
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;lan_ip &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; gets stdin &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
puts -nonewline &lt;span class=&quot;s2&quot;&gt;&quot;Please enter the LAN netmask: &quot;&lt;/span&gt;
flush stdout
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;lan_netmask &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; gets stdin &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
ios_config &lt;span class=&quot;s2&quot;&gt;&quot;interface vlan 1&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;shutdown&quot;&lt;/span&gt;
ios_config &lt;span class=&quot;s2&quot;&gt;&quot;vlan 55&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;name Local&quot;&lt;/span&gt;
ios_config &lt;span class=&quot;s2&quot;&gt;&quot;interface vlan 55&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ip address &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$lan_ip&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$lan_netmask&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
ios_config &lt;span class=&quot;s2&quot;&gt;&quot;interface vlan 55&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;no shutdown&quot;&lt;/span&gt;
ios_config &lt;span class=&quot;s2&quot;&gt;&quot;interface range FastEthernet 0 - 3&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;switchport mode access&quot;&lt;/span&gt;
ios_config &lt;span class=&quot;s2&quot;&gt;&quot;interface range FastEthernet 0 - 3&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;switchport access vlan 55&quot;&lt;/span&gt;
puts &lt;span class=&quot;s2&quot;&gt;&quot;Configuring the DHCP service...&quot;&lt;/span&gt;
puts -nonewline &lt;span class=&quot;s2&quot;&gt;&quot;Please enter the DNS Server IP address:&quot;&lt;/span&gt;
flush stdout
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;dns_ip &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; gets stdin &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
puts -nonewline &lt;span class=&quot;s2&quot;&gt;&quot;Please enter the excluded IP address from DHCP assignments - separated by spaces &quot;&lt;/span&gt;
flush stdout
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;excluded &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; gets stdin &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
foreach i &lt;span class=&quot;nv&quot;&gt;$excluded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        ios_config &lt;span class=&quot;s2&quot;&gt;&quot;ip dhcp excluded-address &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
ios_config &lt;span class=&quot;s2&quot;&gt;&quot;ip dhcp pool DHCP&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;network &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$lan_ip&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$lan_netmask&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
ios_config &lt;span class=&quot;s2&quot;&gt;&quot;ip dhcp pool DHCP&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;default-route &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$lan_ip&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
ios_config &lt;span class=&quot;s2&quot;&gt;&quot;ip dhcp pool DHCP&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;dns-server &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dns_ip&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
puts &lt;span class=&quot;s2&quot;&gt;&quot;Configuring NAT ...&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;netmask_oct &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;split &lt;span class=&quot;nv&quot;&gt;$lan_netmask&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
foreach j &lt;span class=&quot;nv&quot;&gt;$netmask_oct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;wildcard_o &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;expr &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;255 - &lt;span class=&quot;nv&quot;&gt;$j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}]&lt;/span&gt;
        lappend wildcard &lt;span class=&quot;nv&quot;&gt;$wildcard_o&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;wildcard_o &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;split &lt;span class=&quot;nv&quot;&gt;$wildcard&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;wildcard_o1 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;lindex &lt;span class=&quot;nv&quot;&gt;$wildcard_o&lt;/span&gt; 0]
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;wildcard_o2 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;lindex &lt;span class=&quot;nv&quot;&gt;$wildcard_o&lt;/span&gt; 1]
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;wildcard_o3 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;lindex &lt;span class=&quot;nv&quot;&gt;$wildcard_o&lt;/span&gt; 2]
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;wildcard_o4 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;lindex &lt;span class=&quot;nv&quot;&gt;$wildcard_o&lt;/span&gt; 3]
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;wildcard_mask &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$wildcard_o1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$wildcard_o2&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$wildcard_o3&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$wildcard_o4&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
ios_config &lt;span class=&quot;s2&quot;&gt;&quot;access-list 1 permit &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$lan_ip&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$wildcard_mask&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
ios_config &lt;span class=&quot;s2&quot;&gt;&quot;ip nat inside source list 1 interface FastEthernet4 overload&quot;&lt;/span&gt;
ios_config &lt;span class=&quot;s2&quot;&gt;&quot;interface FastEthernet4&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ip nat outside&quot;&lt;/span&gt;
ios_config &lt;span class=&quot;s2&quot;&gt;&quot;interface Vlan 55&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ip nat inside&quot;&lt;/span&gt;
puts &lt;span class=&quot;s2&quot;&gt;&quot;Activating SSH ...&quot;&lt;/span&gt;
ios_config &lt;span class=&quot;s2&quot;&gt;&quot;line vty 0 4&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;transport input ssh&quot;&lt;/span&gt;
ios_config &lt;span class=&quot;s2&quot;&gt;&quot;crypto key generate rsa general-keys modulus 1024&quot;&lt;/span&gt;
ios_config &lt;span class=&quot;s2&quot;&gt;&quot;ip ssh version 2&quot;&lt;/span&gt;
ios_config &lt;span class=&quot;s2&quot;&gt;&quot;ntp server 64.6.144.6&quot;&lt;/span&gt;
puts -nonewline &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;Please enter your timezone &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; eg. UTC +2 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
flush stdout
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;tzone &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; gets stdin &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
ios_config &lt;span class=&quot;s2&quot;&gt;&quot;clock timezone &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$tzone&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
puts &lt;span class=&quot;s2&quot;&gt;&quot;Done...Your box is waiting for some packets!&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>Cisco IOS disable paging</title>
   <link href="http://remote-lab.net:4000/ios-disable-paging"/>
   <updated>2012-02-25T22:59:54+00:00</updated>
   <id>http://remote-lab.net:4000/cisco-ios-hints</id>
   <content type="html">&lt;p&gt;A nice tip I found about today is how to get rid of the space scrolling when showing a config, log, etc. This may be useful when you want to copy the configuration to a text editor and you don’t want to press space so many times to scroll until the end. &lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Router#terminal length 0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and to have it back to the initial settings:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Router#terminal length 24&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>Debug Cisco laggy 3G Modem</title>
   <link href="http://remote-lab.net:4000/debug-cisco-3g-modem"/>
   <updated>2012-02-25T22:50:10+00:00</updated>
   <id>http://remote-lab.net:4000/cisco-laggy-3g-modem</id>
   <content type="html">&lt;p&gt;I am writing this post as I’ve been having these strange issues with my backup 3G Internet link. My primary data provider was down for approximately 2 days so as I presented in this &lt;a href=&quot;http://www.remote-lab.net/?p=103&quot;&gt;tutorial&lt;/a&gt; my router automatically failovers to the backup 3G data. The dynamic failover got in place just fine but after a couple of minutes of using the link it suddenly got stuck.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I checked the interface, it was up/up but pings just won’t come back - actually I think they didn’t even get to leave my router. After a shut/no shut of the interface everything looked back to normal and packets were passing just fine. I investigated further this issue but nothing indicated to a problem, the link was establish and the radio signal was strong.&lt;/p&gt;

&lt;p&gt;One solution &lt;a href=&quot;http://adminlife.ro/?page_id=10&quot;&gt;Adrian&lt;/a&gt; came with in hist &lt;a href=&quot;http://adminlife.ro/?p=379&quot;&gt;post&lt;/a&gt; is to track the interface and based on its state to action an EEM script. I adapted a little his script to my needs and here’s what I decided to do: I will use the same ip sla to monitor by icmp a core router of my backup data link provider. If within 30 seconds no replies are received then the ip sla goes down and a script which resets the 3G modem is triggered.&lt;/p&gt;

&lt;p&gt;One more thing I need to add is a static route to the IP address that I am monitoring in the IP SLA to go through the 3G interface and write the script lines - they are pretty straight forward.&lt;/p&gt;

&lt;p&gt;Notice that the “test cellular” command is enabled after entering the “service internal” command from the config mode&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ip sla 2
 icmp-echo 213.154.121.1 &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;-interface Dialer2
 timeout 10000
 frequency 10
ip sla schedule 2 life forever start-time now
track 2 ip sla 2 reachability
event manager applet RESET-3G
 event track 2 state down&amp;lt;br /&amp;gt;
 action 1.0 cli &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;enable&quot;&lt;/span&gt;
 action 2.0 cli &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test cellular 0 modem-power-cycle&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>HSRP Timers tuning and Authentication</title>
   <link href="http://remote-lab.net:4000/hsrp-timers-tuning-and-authentication"/>
   <updated>2012-02-22T20:50:59+00:00</updated>
   <id>http://remote-lab.net:4000/hsrp-timers-tuning-and-authentication</id>
   <content type="html">&lt;p&gt;In today’s post we are going to continue with some HSRP implementations. We have the following topology consisting of 2 x L3 switches, 1 x L2 switch and 2 hosts located in 2 separate VLANs. On the L2 switch ports Fa0/3 and Fa0/4 are set as access ports and ports Fa0/1 and Fa0/2 are set as trunks. Also Fa0/1 on the 2 x L3 switches are set as trunks. On the L3 switches we’ll also need to set 2 SVIs used for routing between the 2 vlans we have in place.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img class=&quot;aligncenter size-large wp-image-125&quot; title=&quot;HSRP2&quot; src=&quot;http://remote-lab.net:4000/public/images/HSRP2-1024x822.png&quot; alt=&quot;&quot; width=&quot;550&quot; height=&quot;441&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Going forward to the actual HSRP configuration, we’ll set HSRP group 0 for both the SVIs configured on the L3 switches. By default the active router in the HSRP group sends hello messages once every 3 seconds. The standby router is listening and if the hellos are missed for the duration of the holdtime timer ( 10 seconds by default ) the standby router is free to asume its active role. So this implies a 10 seconds downtime if one of the routers goes down which is unacceptable in todays networks. In order to avoid this kind of situation, we’ll set the hello messages to be sent once every 200ms and the holdtimer to be 600ms so that the actual downtime will be less than a second. This will increase the bandwidth usage for the control plane messages but I don’t think this should be a problem for nowadays links.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;interface Vlan10
 ip address 192.168.10.2 255.255.255.0
 standby 0 ip 192.168.10.1
 standby 0 timers msec 200 msec 600
end
interface Vlan20
 ip address 192.168.20.2 255.255.255.0
 standby 0 ip 192.168.20.1
 standby 0 timers msec 200 msec 600
end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In order to prevent unathorized routers to become part of the HSRP group we need to set an authentication method for the participating devices. You can implement either a plain text or a MD5 authentication method for the HSRP group. With the plain text authentication HSRP messages are sent containing a plain text key string. If the key string in a message matches they key configured on the HSRP router then the message is accepted. With the MD5 authentication a message digest 5 hash value is sent along with the HSRP messages. This value is calculated based on a portion of the message using a secret key string. When the message is received the router recalculates the hash function of the received message and if it matches the hash value received within that message then it’s accepted. MD5 authentication is recommended as it’s far more secure than the plain text authentication. While when using the plain text authentication messages can be sniffed and the actual key string can be seen in the message, with MD5 it’s extremely difficult to reverse the hash value.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;###############PLAIN TEXT AUTHENTICATION##################&lt;/span&gt;
interface Vlan10
 ip address 192.168.10.2 255.255.255.0
 standby 0 ip 192.168.10.1
 standby 0 timers msec 200 msec 600
 standby 0 authentication text AUTH_KEY
!
interface Vlan20
 ip address 192.168.20.2 255.255.255.0
 standby 0 ip 192.168.20.1
 standby 0 timers msec 200 msec 600
 standby 0 authentication text AUTH_KEY
end
&lt;span class=&quot;c&quot;&gt;########## MD5 Authentication########################&lt;/span&gt;
interface Vlan10
 ip address 192.168.10.2 255.255.255.0
 standby 0 ip 192.168.10.1
 standby 0 timers msec 200 msec 600
 standby 0 authentication md5 key-string AUTH_KEY
end
interface Vlan20
 ip address 192.168.20.2 255.255.255.0
 standby 0 ip 192.168.20.1
 standby 0 timers msec 200 msec 600
 standby 0 authentication md5 key-string AUTH_KEY
end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You may see in the following captured packets that the plain text key actually appears in the HSRP header, while when using MD5 auth part of the payload is hased using the key string&lt;/p&gt;

&lt;p&gt;Plain text auth
&lt;a href=&quot;http://remote-lab.net:4000/public/images/plain_text_auth.png&quot;&gt;&lt;img class=&quot;size-large wp-image-126 aligncenter&quot; title=&quot;plain_text_auth&quot; src=&quot;http://remote-lab.net:4000/public/images/plain_text_auth.png&quot; alt=&quot;&quot; width=&quot;550&quot; height=&quot;275&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MD5 Auth
&lt;a href=&quot;http://remote-lab.net:4000/public/images/md5auth.png&quot;&gt;&lt;img class=&quot;size-large wp-image-127 aligncenter&quot; title=&quot;md5auth&quot; src=&quot;http://remote-lab.net:4000/public/images/md5auth.png&quot; alt=&quot;&quot; width=&quot;550&quot; height=&quot;270&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hot Standby Routing Protocol ( HSRP ) Introduction</title>
   <link href="http://remote-lab.net:4000/hot-standby-routing-protocol-hsrp-introduction"/>
   <updated>2012-02-19T21:36:05+00:00</updated>
   <id>http://remote-lab.net:4000/hot-standby-routing-protocol-hsrp-introduction</id>
   <content type="html">&lt;p&gt;In the following article I’ll make a brief introduction over HSRP and a simple lab topology to show its basic utility. HSRP is Cisco’s proprietary protcol which provides non-disruptive IP traffic failover when you’ve got multiple redundant gateways for you LAN segment.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Let’s get back to the basics and remember how 2 hosts communicate on a local subnet: one host broadcasts an ARP request on the local segment, receives the reply, updates its mac address table and then sends frames directly to the learned mac address. When 2 hosts are located on different subnets a router - the default gatway is needed to route packets between the subnets. In this case the hosts operating system checks the destination IP address, sees that it’s not part of the local subnet and tries sending the frame to the default gateway. In order to do that the host first sends an ARP request asking for the mac-address associated to IP address of the default gateway and after it receives it caches the mac address and sends all the frames through the default gateway.&lt;/p&gt;

&lt;p&gt;Now HSRP comes in place where you have multiple default gateways but still on the hosts you can configure a single default gateway. What HSRP does is that it logically groups the multiple gateways providing a virtual IP and mac address for this group. The group can be formed out of a minimum of 2 devices - one of them will be the active gateway and the other one will be in standby mode . The election is based on a priority value ( 0 - 255 ) and the router with a higher priority is elected as the active one. The default priority is 100 and if both the devices have the same priority the one with a higher IP address becomes the active router. The routers exchange hello messages at regular time intervals so that they can be aware of each others state.&lt;/p&gt;

&lt;p&gt;Let’s have a look at a simple HSRP topology and see how we can configure basic functionality of the protocol. As you may see we’ve got 2 LAN segments connected through 2 L3 switches. The HSRP group is configured per interface and as you can see we’ve got HSRP group 0 for both of our LAN segments. This perfectly valid because the HSRP groups are locally significant only on an interface. The virtual IP address is set per interface and it needs to be the same for all the routers in the group and the virtual mac address is formed by 0000.0c07.acxx where xx is the HSRP group number as 2 hex digits.&lt;/p&gt;

&lt;p&gt;In our scenario we will not configure any priority so the elected active router will be the one with the interface which has the higher IP address: GW_2 in our case.&lt;/p&gt;

&lt;p&gt;That should be all you have to configure for basic HSRP. More detailed examples to follow where we shall tune the hello timers, configure authentication methods between the group members and try to load balance the traffic with the help of HSRP.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;aligncenter size-large wp-image-123&quot; title=&quot;HSRP&quot; src=&quot;http://remote-lab.net:4000/public/images/BlankNetworkDiagram-777x1024.png&quot; alt=&quot;&quot; width=&quot;550&quot; height=&quot;724&quot; /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;GW_2#show standby
FastEthernet0/1 - Group 0
  State is Active
    2 state changes, last state change 00:15:09
  Virtual IP address is 192.168.10.1
  Active virtual MAC address is 0000.0c07.ac00
    Local virtual MAC address is 0000.0c07.ac00 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;v1 default&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  Hello &lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;3 sec, hold &lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;10 sec
    Next hello sent &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;1.664 secs
  Preemption disabled
  Active router is &lt;span class=&quot;nb&quot;&gt;local
  &lt;/span&gt;Standby router is 192.168.10.2, priority 100 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;expires &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;10.032 sec&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  Priority 100 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default 100&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  Group name is &lt;span class=&quot;s2&quot;&gt;&quot;hsrp-Fa0/1-0&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
FastEthernet0/2 - Group 0
  State is Active
    2 state changes, last state change 00:15:09
  Virtual IP address is 192.168.20.1
  Active virtual MAC address is 0000.0c07.ac00
    Local virtual MAC address is 0000.0c07.ac00 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;v1 default&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  Hello &lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;3 sec, hold &lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;10 sec
    Next hello sent &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;2.144 secs
  Preemption disabled
  Active router is &lt;span class=&quot;nb&quot;&gt;local
  &lt;/span&gt;Standby router is 192.168.20.2, priority 100 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;expires &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;9.120 sec&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  Priority 100 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default 100&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  Group name is &lt;span class=&quot;s2&quot;&gt;&quot;hsrp-Fa0/2-0&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
GW_2#show run int fa0/1
Building configuration...
Current configuration : 114 bytes
!
interface FastEthernet0/1
 no switchport
 ip address 192.168.10.3 255.255.255.0
 standby 0 ip 192.168.10.1
end
GW_2#show run int fa0/2
Building configuration...
Current configuration : 114 bytes
!
interface FastEthernet0/2
 no switchport
 ip address 192.168.20.3 255.255.255.0
 standby 0 ip 192.168.20.1
end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;GW_1#sh standby
FastEthernet0/1 - Group 0
  State is Standby
    4 state changes, last state change 00:15:52
  Virtual IP address is 192.168.10.1
  Active virtual MAC address is 0000.0c07.ac00
    Local virtual MAC address is 0000.0c07.ac00 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;v1 default&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  Hello &lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;3 sec, hold &lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;10 sec
    Next hello sent &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;0.480 secs
  Preemption disabled
  Active router is 192.168.10.3, priority 100 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;expires &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;10.976 sec&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  Standby router is &lt;span class=&quot;nb&quot;&gt;local
  &lt;/span&gt;Priority 100 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default 100&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  Group name is &lt;span class=&quot;s2&quot;&gt;&quot;hsrp-Fa0/1-0&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
FastEthernet0/2 - Group 0
  State is Standby
    4 state changes, last state change 00:15:54
  Virtual IP address is 192.168.20.1
  Active virtual MAC address is 0000.0c07.ac00
    Local virtual MAC address is 0000.0c07.ac00 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;v1 default&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  Hello &lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;3 sec, hold &lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;10 sec
    Next hello sent &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;0.224 secs
  Preemption disabled
  Active router is 192.168.20.3, priority 100 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;expires &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;10.288 sec&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  Standby router is &lt;span class=&quot;nb&quot;&gt;local
  &lt;/span&gt;Priority 100 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default 100&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  Group name is &lt;span class=&quot;s2&quot;&gt;&quot;hsrp-Fa0/2-0&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
GW_1#sh run int fa0/1
Building configuration...
Current configuration : 114 bytes
!
interface FastEthernet0/1
 no switchport
 ip address 192.168.10.2 255.255.255.0
 standby 0 ip 192.168.10.1
end
GW_1#sh run int fa0/2
Building configuration...
Current configuration : 114 bytes
!
interface FastEthernet0/2
 no switchport
 ip address 192.168.20.2 255.255.255.0
 standby 0 ip 192.168.20.1
end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title> Lantronix ETS8P Terminal Server</title>
   <link href="http://remote-lab.net:4000/lantronix-ets8p-terminal-server"/>
   <updated>2012-02-05T20:14:04+00:00</updated>
   <id>http://remote-lab.net:4000/lantronix-ets8p-terminal-server</id>
   <content type="html">&lt;p&gt;I recently got a terminal server for my lab because as the number of devices grows it was difficult to manage them all by USB console adapters. So i found a cheap and quite old terminal server - Lantronix ETS8P - a terminal server with 8 serial RJ45 ports and 1 x 10Mbps ethernet interface. It’s actually that old that it doesn’t even support SSH, you can remote access it just by telnet.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Anyways, I was very excited when I got it and I got right away a console cable on my laptop and connected to it -  I was thinking I will have it configured in a couple of minutes but in the end it took me a couple of more minutes to have it ready.&lt;/p&gt;

&lt;p&gt;I configured an IP address for it, prepared 8 rollover cables for connecting to Cisco devices, connected my devices and after that there I was trying to access the switches in my lab through the terminal server.&lt;/p&gt;

&lt;p&gt;You may access the console ports by telneting to the terminal server (username ‘admin’, su password ‘system’) and connect from it by “connect local port_x” or by reverse telnet to its IP address, on the port 2000+local_port ( eg. telnet 192.168.0.1 2001 for console port 1).  There are a couple of hints you may want to use if you are using the TS as I do: the console ports are set by default act both as DTE or DCE so we need to enforce those as the DTE side.&lt;/p&gt;

&lt;p&gt;To avoid these situations you have to set the following options for the ports:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;define port all autostart disabled
define port dtrwait enabled&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You may always disconnect a hung session on the local console port by:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;logout &lt;/span&gt;port x&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you are trying to reverse telnet and you get a connection refused it means that the session is probably open or hung.&lt;/p&gt;

&lt;p&gt;It’s unlikely that you will find this device on the market nowadays but if you happen to find it and need some tweaking advice you can contact me and I’ll share my experience.
&lt;img class=&quot;size-medium wp-image-116 aligncenter&quot; title=&quot;lantronix&quot; src=&quot;http://remote-lab.net:4000/public/images/lantronix-300x199.jpg&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;199&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Linux Servers Cluster using HeartBeat</title>
   <link href="http://remote-lab.net:4000/linux-server-cluster-using-heartbeat"/>
   <updated>2012-01-15T22:26:52+00:00</updated>
   <id>http://remote-lab.net:4000/linux-server-cluster-using-heartbeat</id>
   <content type="html">&lt;p&gt;Today I’ve been working to set up a High Availability cluster made up of 2 virtual instances of CentOS Servers using Heartbeat. The cluster will be using one of the servers as primary and the second one as backup. The basic idea behing Heartbeat is that the backup server will be continuously pinging the primary server (using broadcast, multicast or unicast packets). In the eventuality that the active server goes down the backup server sets up a floating IP address, sends a gratious ARP message informing the others hosts on the local network segment that the mac-address corresponding to the floating IP has changed. The floating IP address is an IP address shared by the active and standby servers but it’s assigned just to one of them at a time.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Heartbeat setup is pretty straight forward, I’ll describe in the following lines how you can install it on a CentOS system.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Download the latest epel-release rpm from&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@server1 ~]# wget http://download.fedora.redhat.com/pub/epel/6/i386/epel-release-6-5.noarch.rpm
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@server1 ~]# rpm -uvh epel-release-6-5.noarch.rpm&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Install Heartbeat packages:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@server1 ~]# yum install heartbeat&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;The Heartbeat config files are authkeys, ha.cf and haresources. We have to move thos into /etc/ha.d/ directory and edit them according to our setup.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@server1 ~]# cp /usr/share/doc/heartbeat-3.0.4/authkeys /etc/ha.d
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@server1 ~]# cp /usr/share/doc/heartbeat-3.0.4/ha.cf /etc/ha.d
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@server1 ~]# cp /usr/share/doc/heartbeat-3.0.4/haresources /etc/ha.d/&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Edit authkeys with sha1 as authentication method:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@server1 ~]# vim /etc/ha.d/authkeys&amp;lt;/pre&amp;gt;
auth 2
2 sha1 pass&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Change the permission for /etc/ha.d/authkeys to “600”:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@server1 ~]# chmod 600 /etc/ha.d/authkeys&amp;lt;/pre&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Now let’s edit the ha.cf configuration file:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@server1 ~]# vim /etc/ha.d/ha.cf
logfile /var/log/ha-log &lt;span class=&quot;c&quot;&gt;#File to write log messages to&lt;/span&gt;
logfacility local0 &lt;span class=&quot;c&quot;&gt;#Facility to use for syslog()/logger&lt;/span&gt;
keepalive 1 &lt;span class=&quot;c&quot;&gt;#how long between heartbeats?&lt;/span&gt;
deadtime 5 &lt;span class=&quot;c&quot;&gt;#how long-to-declare-host-dead?&lt;/span&gt;
bcast eth0 &lt;span class=&quot;c&quot;&gt;#What interfaces to broadcast heartbeats over?&lt;/span&gt;
udpport 694 &lt;span class=&quot;c&quot;&gt;#What UDP port to use for bcast/ucast communication?&lt;/span&gt;
auto_failback on &lt;span class=&quot;c&quot;&gt;#if set to on the resource will automatically fail back to the primary server once it restores&lt;/span&gt;
node server1 &lt;span class=&quot;c&quot;&gt;#the hostname of the primary server - must match uname -n&lt;/span&gt;
node server2 &lt;span class=&quot;c&quot;&gt;#the hostname of the secondary server&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Edit the haresources file - it must contain the hostname of the primary server and the floating virtual IP shared by the 2 servers:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@server1 ~]# vim /etc/ha.d/haresources
server1 IPaddr::10.0.0.20/255.255.255.0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Edit the Linux hosts file so that we map each of the hostnames to their corresponind IP address:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@server1 ~]# vim /etc/hosts
 10.0.0.11 server1
 10.0.0.12 server2&amp;lt;/pre&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The steps above must be repeated on Server2, please note that the configuration on both the machines in the cluster must match.
After setting up the config on the machines we are ready to start the Heartbeat service.
- Starting the Heartbeat service:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@server1 ~]# /etc/init.d/heartbeat start
Starting High-Availability services: IPaddr[7248]: INFO: Resource is stopped
Done.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s test configuration, here comes the tricky part where I encountered some issues with my setup:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://remote-lab.net:4000/public/images/cluster_setup.png&quot;&gt;&lt;img class=&quot;aligncenter size-medium wp-image-107&quot; title=&quot;cluster_setup&quot; src=&quot;http://remote-lab.net:4000/public/images/cluster_setup.png&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;295&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So we’ve got server1 (10.0.0.11) and server2 (10.0.0.12) running on 2 virtual machine instances. I’m starting some ping packets from my PC (10.0.0.5) to the floating IP address - 10.0.0.20. I’m checking the ARP table of the PC and I’m seeing that 10.0.0.20 is associated to the mac address of server1, the primary node. Next, I shutdown interface eth0 of server1 and as configured in the ha.cf file I’m expecting for the ping packets to fail just for a couple of seconds more than 5 seconds.&lt;/p&gt;

&lt;p&gt;Unfortunately I don’t get this result with my setup, the ICMP replies start to appear after aproximately 40 seconds.
From what I’m seeing the gratious ARP message which had to be sent by Heartbeat to inform that the HW MAC address corresponding to 10.0.0.20 has changed doesn’t reach my PC. So the PC waits until the OS flushes the ARP entry for 10.0.0.20 and then broadcasts another ARP request for 10.0.0.20.
One thing I don’t understand is that before sending a broadcast ARP in the network to discover who has 10.0.0.20 my PC sends 3 unicast ARP messages to the MAC Address of the host which went down asking for 10.0.0.20.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.remote-lab.net/wp-content/uploads/2012/02/Screenshot.png&quot;&gt;&lt;img class=&quot;aligncenter size-large wp-image-108&quot; title=&quot;ARP&quot; src=&quot;http://www.remote-lab.net/wp-content/uploads/2012/02/Screenshot-1024x110.png&quot; alt=&quot;&quot; width=&quot;550&quot; height=&quot;59&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have got any ideas please let me know how I can improve this behavior.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Cisco 881G - Configuring Dynamic Failover On a Backup 3G Cellular Link</title>
   <link href="http://remote-lab.net:4000/dynamic-routing-with-failover-on-backup-3g-link"/>
   <updated>2012-01-09T21:33:38+00:00</updated>
   <id>http://remote-lab.net:4000/dynamic-routing-with-failover-on-backup-3g-link</id>
   <content type="html">&lt;p&gt;My latest lab toy is a Cisco 881G which integrates a cellular 3G interface used a secondary data link. In the following article I will present the existing scenario and what needs to be acomplished.
&lt;a href=&quot;http://remote-lab.net:4000/public/images/3GBackup.png&quot;&gt;&lt;img class=&quot;aligncenter size-large wp-image-104&quot; title=&quot;3GBackup&quot; src=&quot;http://remote-lab.net:4000/public/images/3GBackup.png&quot; alt=&quot;&quot; width=&quot;550&quot; height=&quot;401&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;What’s the scenario? We have a small LAN using private IP addresses which need to be translated on both the external links. The primary link is an Ethernet drop so it’s very unlikely to change its state to down so that the router can detect the link failure and make the changes in its RIB. In order to detect a failure on the primary link we have to implement a mechanism which takes an external point as reference and measures different parameters.  For instance in my scenario we will send ICMP packets to an external IP address - 8.8.8.8, the Google public DNS server, and measure the RTT. As long as the RTT value is within certain limits the default route will be set on the primary link. If it exceeds that value then the default route set on the primary link will be dropped out of the routing table and a secondary default route - the one from the backup link, which has a higher administrative distance will take its place.&lt;/p&gt;

&lt;p&gt;We have to make sure that the ICMP packets sent for checking the RTT will be sent only from the primary link. Otherwise when the backup link becomes active it checks the RTT and gets a proper value and it install the primary default route thus resulting in a loop of default routes.&lt;/p&gt;

&lt;p&gt;Enough with the words, now let’s get to the config lines:&lt;/p&gt;

&lt;p&gt;First of all, let’s configure the cellular interface so that it can connect to the 3G network:&lt;/p&gt;

&lt;h2 id=&quot;configuring-the-cellular-interface&quot;&gt;Configuring the cellular interface&lt;/h2&gt;
&lt;p&gt;We must ensure that the SIM card is not locked with a PIN code - Cellular 0 is the interface:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Router#cellular 0 gsm sim unlock &lt;span class=&quot;nv&quot;&gt;$PIN&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We need to create a gsm profile with the settings associated with your data account:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Router#cellular 0 gsm profile create 1 internet ipv4 pap cisco cisco
&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt; - Profile number
&lt;span class=&quot;s2&quot;&gt;&quot;internet&quot;&lt;/span&gt; - Access Point Name
&lt;span class=&quot;s2&quot;&gt;&quot;ipv4&quot;&lt;/span&gt; - Packet Data Protocol
&lt;span class=&quot;s2&quot;&gt;&quot;pap&quot;&lt;/span&gt; - Authentication &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;cisco&quot;&lt;/span&gt; - Username
&lt;span class=&quot;s2&quot;&gt;&quot;cisco&quot;&lt;/span&gt; - Password&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next we need to create a chat script which sends commands to the 3G modem to connect to the remote system. The chat script is called CellScript with a timeout value of 30 seconds. Please note that the script may be different depending on the carrier.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#chat-script CellScript &quot;&quot; &quot;ATDT*98*1#&quot; TIMEOUT 30 &quot;CONNECT&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt; - represents the number of the gsm profile created above&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Associate the created chat script to the 3G modem line, for the 881G is line 3:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#line 3&lt;/span&gt;
Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-line&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#script dialer CellScript&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next we should create a Dialer interface:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#interface Dialer2&lt;/span&gt;
Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#ip address negotiated&lt;/span&gt;
Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#ip virtual-reassembly in&lt;/span&gt;
Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#encapsulation ppp&lt;/span&gt;
Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#dialer pool 2&lt;/span&gt;
Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#dialer idle-timeout 0&lt;/span&gt;
Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#dialer string CellScript&lt;/span&gt;
Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#dialer persistent&lt;/span&gt;
Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#dialer-group 2&lt;/span&gt;
Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#ppp authentication pap callin&lt;/span&gt;
Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#ppp pap password 7 045F1E0B0238&lt;/span&gt;
Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#ppp ipcp dns request&lt;/span&gt;
Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#no cdp enable&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next step required is to configure the Cellular interface&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#interface Cellular0&lt;/span&gt;
Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#ip address negotiated&lt;/span&gt;
Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#ip virtual-reassembly in&lt;/span&gt;
Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#encapsulation ppp&lt;/span&gt;
Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#dialer in-band&lt;/span&gt;
Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#dialer pool-member 2&lt;/span&gt;
Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#dialer idle-timeout 0&lt;/span&gt;
Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#dialer-group 2&lt;/span&gt;
Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#async mode interactive&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Create a dialer list which allows IP packets for the interfaces in dialer group 2:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#dialer-list 2 protocol ip permit&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Add a default route and you should have a working 3G data link:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#ip route 0.0.0.0 0.0.0.0 Dialer2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;configuring-nat-with-multiple-pools&quot;&gt;Configuring NAT with multiple pools&lt;/h2&gt;
&lt;p&gt;OK, now that we have set the 3G backup data link I assume that you know how to configure the primary Ethernet link so we can pass to the next section: how to get Network Address Translation work on both interfaces.
First we need to set an access list which identifies our private addresses - in my case: 10.0.0.0/28&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#access-list 10 permit 10.0.0.0 0.0.0.15&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next we’ll create route maps which identify both the private ip addresses by the ACL created above and the external interface:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#route-map PRIMARY permit 1 ; 1 is a sequence number in the route map function&lt;/span&gt;
Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-route-map&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#match ip address 10 ; matches all IP traffic identified by ACL 10&lt;/span&gt;
Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-route-map&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#match interface FastEthernet4&lt;/span&gt;
Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#route-map BACKUP permit 1&lt;/span&gt;
Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-route-map&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#match ip address 10&lt;/span&gt;
Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-route-map&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#match interface Dialer2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Last we have to set the NAT direction on the interfaces we are interested in:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#interface Vlan 55&lt;/span&gt;
Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#ip nat inside&lt;/span&gt;
Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#interface FastEthernet4&lt;/span&gt;
Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#ip nat outside&lt;/span&gt;
Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#interface Dialer2&lt;/span&gt;
Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#ip nat outside&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that we have the route maps set we need the create the NAT translation rules. On both of the interfaces I will set NAT overload as I have a single IP address assigned by the ISP:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# ip nat inside source route-map PRIMARY interface FastEthernet4 overload&lt;/span&gt;
Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# ip nat inside source route-map BACKUP interface Dialer2 overload&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;configuring-dynamic-failover-with-cisco-ip-slas&quot;&gt;Configuring dynamic failover with Cisco IP SLAs&lt;/h2&gt;
&lt;p&gt;The address translation is complete too. In the next section we will implement the dynamic failover mechanism using Cisco IP Service Level Agreements ( SLAs ). The Cisco IOS IP SLA is a powerful tool which can help improve your networks services. It allows you to monitor traffic parameters like round-trip delay, one-way delay, one-way jitter, packet loss, TCP connection time, DNS lookup time and many others. Let’s get to the config line and show how we should implement the SLAs.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#ip sla 1&lt;/span&gt;
Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#icmp-echo 8.8.8.8 interface FastEthernet 4 ; pings 8.8.8.8 with the source address of Fa4&lt;/span&gt;
Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#timeout 150 ; the amount of time in milliseconds the IP SLA operation waits a response from its request packet&lt;/span&gt;
Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#frequency  2 ; the amount of time in seconds at which the IP SLA operation performs&lt;/span&gt;
Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#ip sla schedule 1 life forever start-time now&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To review the above config lines: The routers pings 8.8.8.8 with  ICMP REQUEST packets having the source address of Fa4 and if an ICMP REPLY packet isn’t received within 150ms the IP SLA operation is considered to have failed. This process is repeated once every 2 seconds.
We set this process to start now and occur forever.&lt;/p&gt;

&lt;p&gt;Now what happens if the IP SLA operation fails? In the following lines we’ll tell the router what to do in that case:&lt;/p&gt;

&lt;p&gt;We need to create a track object to monitor the status of the IP SLA we have created:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#track 1 ip sla 1 reachability&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The track object informs the static route if a state change of the IP SLA occurs.&lt;/p&gt;

&lt;p&gt;Next we will associate the primary default route with the tracker.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#ip route 0.0.0.0 0.0.0.0 FastEthernet4 track 1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and assign a higher administrative distance to the secondary default route:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Router&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#ip route 0.0.0.0 0.0.0.0 Dialer2 10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And that should be all. You should now have a dynamic failover route without having to enable dynamic routing protocols.
Pretty cool :)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>VirtualBox Web Interface</title>
   <link href="http://remote-lab.net:4000/virtualbox-web-interface"/>
   <updated>2011-11-22T03:34:53+00:00</updated>
   <id>http://remote-lab.net:4000/virtualbox-web-interface</id>
   <content type="html">&lt;p&gt;I am personally using &lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;VirtualBox&lt;/a&gt; as a virtualization solution as it fits my needs and it integrates well with Ubuntu. I recently found that you can set up a web interface and manage Virtualbox through it. In the following article I’ll describe how you can set up the web interface for VirtualBox using &lt;a href=&quot;http://code.google.com/p/phpvirtualbox/&quot;&gt;phpVirtualBox&lt;/a&gt; and I’d also like to thank the developers for doing this great job.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Firstly as with any web interface a web server is required so you’ll need to install apache web server with php support :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;root@localhost#apt-get install apache2 php5 libapache2-mod-php5&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After this you’ll have a fully working webserver with php support having its root directory into /var/www/&lt;/p&gt;

&lt;p&gt;Now we will need to install VirtualBox. I prefer using the latest version so we’ll install VirtualBox 4.1&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;root@localhost#apt-get install virtualbox-4.1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;phpVirtualBox requires vboxwebserv service to run so you’ll have to run the following command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;root@localhost#vboxwebsrv -b --host &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;ip_address&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; --port 18083
b: background
host: the ip address of the interface used by the server to listen 
port: the port used  by the server&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Download phpVirtualBox and move it to you web server’s root&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;root@localhost#wget http://phpvirtualbox.googlecode.com/files/phpvirtualbox-4.1-5.zip 
root@localhost#unzip  phpvirtualbox-4.1-5.zip 
root@localhost#mv phpvirtualbox-4.1-5 /var/www/vbox 
root@localhost#cd /var/www/vbox&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Edit the config.php file by modifying the following variables to match your system’s:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;root@localhost#vim config.php
 /&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Username / Password &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;system user that runs VirtualBox &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/
 var &lt;span class=&quot;nv&quot;&gt;$username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ‘vbox’;
 var &lt;span class=&quot;nv&quot;&gt;$password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ‘your-password’;
 var &lt;span class=&quot;nv&quot;&gt;$location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ‘http://&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;ip_address&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;:18083/’;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And now you should have an accessible web interface for your VirtualBox which can be accessed at http://{ip_address}/vbox. The default username and password are admin/admin.&lt;/p&gt;

&lt;p&gt;In order to access the VMs consoles through the web interface you have to install the &lt;a href=&quot;http://download.virtualbox.org/virtualbox/4.1.6/Oracle_VM_VirtualBox_Extension_Pack-4.1.6-74713.vbox-extpack&quot;&gt;VirtualBox Extension Pack&lt;/a&gt; and set the display settings to activate the remote display.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;aligncenter size-full wp-image-93&quot; title=&quot;phpvbsm&quot; src=&quot;http://remote-lab.net:4000/public/images/phpvbsm.png&quot; alt=&quot;&quot; width=&quot;675&quot; height=&quot;500&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Free US local number pointed to your Cisco VoIP gateway</title>
   <link href="http://remote-lab.net:4000/voip-us-number"/>
   <updated>2011-11-20T20:26:37+00:00</updated>
   <id>http://remote-lab.net:4000/89</id>
   <content type="html">&lt;p&gt;In today’s post I will show how to get a free US DID - a local number and point it to your VoIP network. For this setup I will use an analog phone plugged into a FXS port of a Cisco 1751-V router. The use of a voice router isn’t necessary, you may also use an ATA - Analog Telephone Adapter.
&lt;img class=&quot;aligncenter size-full wp-image-90&quot; title=&quot;Diagram1&quot; src=&quot;http://remote-lab.net:4000/public/images/Diagram1.png&quot; alt=&quot;&quot; width=&quot;286&quot; height=&quot;360&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;So now let’s get to the steps involved in having this done:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Go to &lt;a href=&quot;http://www.ipkall.com/&quot;&gt;http://www.ipkall.com/&lt;/a&gt; , sign up and you will receive your DID by email. After receiving the email you should login and change the SIP Phone Number to whatever number you’d like to send to your SIP server. Also the SIP Proxy must match your server’s IP address used for receiving the calls, in my case this will be the Cisco 1751 voice gateway.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Configure the voice router:
In order to have the calls completed you must tell the router what to do when receiving a calls:&lt;/li&gt;
  &lt;li&gt;Create an inbound voip dial-peer:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;dial-peer voice 1 voip
 destination-pattern .T
 session protocol sipv2
 codec g711ulaw&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Create a pots dial-peer which routes the calls made to 2064248860 - the DID I received from IPKall - on the analog voice port 2/0:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;dial-peer voice 2 pots
 destination-pattern 2064248860
 port 2/0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Forward the signaling and media ports to the voice gateway:
I am using NAT for my home network so I will have to set the 871 router to forward all the packets coming on the SIP signaling port UDP 5060 and also the RTP media ports - which is the UDP range between 8000 and 32000 to the voice gateway.&lt;/li&gt;
  &lt;li&gt;Create an access list which matches the SIP signaling and the RTP media ports:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ip access-list extended SIP-RTP
 permit udp any any eq 5060
 permit udp any any range 8000 30000&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Create a route map policy which uses the access list created earlier:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;route-map SIP-RTP permit 10
 match ip address SIP-RTP&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Create a static inside NAT entry which matches the ports and translates the private address of the voice gateway to the public address&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ip nat inside &lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;static 10.0.0.10 86.106.164.150 route-map SIP-RTP extendable&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And that should do it, I now have a local US number ringing back to my home phone in Bucharest without any charges :)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Startup scripts in Ubuntu and Debian based Linux distributions</title>
   <link href="http://remote-lab.net:4000/startup-script-in-ubuntu"/>
   <updated>2011-11-20T00:43:37+00:00</updated>
   <id>http://remote-lab.net:4000/startup-script-in-ubuntu</id>
   <content type="html">&lt;p&gt;Here are 2 simple steps which help you to run a script when your Ubuntu machine boots:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Edit your script and add it in /etc/init.d/&lt;/li&gt;
  &lt;li&gt;Run update-rc.d script which creates a link to your script on each of the runlevels  with a set priority.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;root@virtual:/etc/init.d# &lt;/span&gt;update-rc.d vbox.sh defaults 85
update-rc.d: warning: /etc/init.d/vbox.sh missing LSB information
update-rc.d: see &amp;amp;lt;http://wiki.debian.org/LSBInitScripts
 Adding system startup &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; /etc/init.d/vbox.sh ...
   /etc/rc0.d/K85vbox.sh -&amp;amp;gt; ../init.d/vbox.sh
   /etc/rc1.d/K85vbox.sh -&amp;amp;gt; ../init.d/vbox.sh
   /etc/rc6.d/K85vbox.sh -&amp;amp;gt; ../init.d/vbox.sh
   /etc/rc2.d/S85vbox.sh -&amp;amp;gt; ../init.d/vbox.sh
   /etc/rc3.d/S85vbox.sh -&amp;amp;gt; ../init.d/vbox.sh
   /etc/rc4.d/S85vbox.sh -&amp;amp;gt; ../init.d/vbox.sh
   /etc/rc5.d/S85vbox.sh -&amp;amp;gt; ../init.d/vbox.sh&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>Build your OpenWRT image file</title>
   <link href="http://remote-lab.net:4000/build-openwrt-image-file"/>
   <updated>2011-11-07T04:05:12+00:00</updated>
   <id>http://remote-lab.net:4000/build-openwrt-image-file</id>
   <content type="html">&lt;p&gt;As I said in a previous post I will need an OpenWRT image set with the baud rate of 9600 bps for the console port in order to have my improvised USB-RS232-TTL adapters work. I will show the steps on how to build your image. Please note that I am using Ubuntu as OS but it should work with any other Linux distributions, you just have to install the dependencies.&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;Get a terminal window and type in:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$sudo&lt;/span&gt; apt-get install build-essential subversion libncurses5-dev zlib1g-dev gawk bison 
gcc flex
&lt;span class=&quot;nv&quot;&gt;$mkdir&lt;/span&gt; ~/backfire
&lt;span class=&quot;nv&quot;&gt;$cd&lt;/span&gt; ~/backfire
&lt;span class=&quot;nv&quot;&gt;$svn&lt;/span&gt; co svn://svn.openwrt.org/openwrt/branches/backfire .
&lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;/scripts/feeds update -a&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Prepare build&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$make&lt;/span&gt; menuconfig&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here you may choose what chipset you are using, the kernel modules and the packages you would like to install. I will choose the ones specific for the router I have : Asus WL500G. Just to be sure I will also install stty - a tool which can be used to set the baud rate of the console port after boot.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Target System &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Broadcom BCM947xx/953xx &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2.4]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Target Profile &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Generic, Broadcom WiFi &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
Select all packages by default
Image configuration --&amp;gt;;
      Base system
           busybox &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;press enter to open hidden menu&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
               Configuration
                   Coreutils
                      &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; stty&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After choosing all the desired settings you have to save your config.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The next step is to add the 9600 baud rate console option to the kernel:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$vim&lt;/span&gt; ~/backfire/.config&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and add the following line:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CONFIG_CMDLINE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;root=/dev/mtdblock2 rootfstype=squashfs,jffs2 init=/etc/preinit 
noinitrd console=ttyS0,9600&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Start the build process and wait, it will take a while.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$make&lt;/span&gt; world &lt;span class=&quot;nv&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;99&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;When it’s finished you’ll find the image in ~/backfire/bin and you can upload it through TFTP:
Power your router while holding the reset button
Connect one of the LAN interfaces to your computer and set your computers IP address to 192.168.1.x&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$tftp&lt;/span&gt; 192.168.1.1
tftp&amp;gt;binary
tftp&amp;gt;trace 
tftp&amp;gt;put openwrt-brcm-2.4-squashfs.trx&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://remote-lab.net:4000/public/images/Screenshot-1.png&quot;&gt;&lt;img src=&quot;http://remote-lab.net:4000/public/images/Screenshot-1.png&quot; alt=&quot;&quot; title=&quot;OpenWRT&quot; width=&quot;451&quot; height=&quot;275&quot; class=&quot;aligncenter size-full wp-image-79&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Serial console cable for your Linux router</title>
   <link href="http://remote-lab.net:4000/serial-console-cable-for-your-linux-router"/>
   <updated>2011-10-24T22:32:46+00:00</updated>
   <id>http://remote-lab.net:4000/serial-console-cable-for-your-linux-router</id>
   <content type="html">&lt;p&gt;Today I have been trying to get some working console cables for the Asus WL-500 routers I have. The first thing I tried was using an old Nokia CA-42 data cable which includes an Prolific USB to 3.3V TTL converter but unfortunately it ended in getting a messy input and output. So the other solution I thought of was building my own RS232-to-3.3V TTL converter.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Below you may find a scheme of the simplest converter I found.&lt;/p&gt;

&lt;p&gt;&amp;lt;a href=”href=”http://remote-lab.net:4000/public/images/ttltors2320kf.jpg”&amp;gt;&lt;img src=&quot;http://remote-lab.net:4000/public/images/ttltors2320kf.jpg&quot; alt=&quot;&quot; title=&quot;converter&quot; width=&quot;486&quot; height=&quot;263&quot; class=&quot;aligncenter size-full wp-image-54&quot; /&gt;&amp;lt;/a&amp;gt;&lt;/p&gt;

&lt;p&gt;You will need the following components to build it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2 x BC337 transistors&lt;/li&gt;
  &lt;li&gt;1 x 1.5K resistor&lt;/li&gt;
  &lt;li&gt;1 x 22K resistor&lt;/li&gt;
  &lt;li&gt;1 x 4.7K resistor&lt;/li&gt;
  &lt;li&gt;1 x 3.9K resistor&lt;/li&gt;
  &lt;li&gt;1 x DB9 female connector&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This converter did the job for me but only when using it with a computer which had a built-in serial port. When trying it with an USB-to-RS232 converter (Prolific chipset) I got a clean output from the UART port of the router but a messy input. I guess I’ll have to try another type of USB-RS232 converter(other chipset than Prolific) or build an USB-to-3.3V TTL converter from scratch.&lt;/p&gt;

&lt;p&gt;I am also attaching a document containing a complete list of RS232-to-3.3V TTL converters:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://remote-lab.net:4000/public/images/mt1389-serial-interface-gallery.pdf&quot;&gt;Converters list&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Later Edit: I found a workaround for the messy input when using an USB-to-serial adapter. The default OpenWRT image is compiled with a default baud rate of 115200 bps for the console port. You need to recompile the kernel and use a baud rate of 9600 bps, I will later post a tutorial on how this should be done. 
&lt;a href=&quot;http://remote-lab.net:4000/public/images/IMG_0098.jpg&quot;&gt;&lt;img src=&quot;http://remote-lab.net:4000/public/images/IMG_0098.jpg&quot; alt=&quot;&quot; title=&quot;IMG_0098&quot; width=&quot;550&quot; height=&quot;410&quot; class=&quot;aligncenter size-large wp-image-55&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://remote-lab.net:4000/public/images/IMG_0100.jpg&quot;&gt;&lt;img src=&quot;http://remote-lab.net:4000/public/images/IMG_0100.jpg&quot; alt=&quot;&quot; title=&quot;IMG_0100&quot; width=&quot;550&quot; height=&quot;319&quot; class=&quot;aligncenter size-large wp-image-56&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Router on a stick Inter-VLAN routing</title>
   <link href="http://remote-lab.net:4000/router-on-a-stick-inter-vlan-routing"/>
   <updated>2011-10-17T20:01:49+00:00</updated>
   <id>http://remote-lab.net:4000/router-on-a-stick-inter-vlan-routing</id>
   <content type="html">&lt;p&gt;Below you may find a video tutorial on how to set a ROAS scenario using the Remote-Lab.net lab environment:
&lt;a href=&quot;http://remote-lab.net:4000/public/images/router-on-a-stick.jpg&quot;&gt;&lt;img class=&quot;aligncenter size-medium wp-image-62&quot; title=&quot;router-on-a-stick&quot; src=&quot;http://remote-lab.net:4000/public/images/router-on-a-stick.jpg&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;500&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;iframe width=&quot;854&quot; height=&quot;510&quot; src=&quot;https://www.youtube.com/embed/jULM0GLzySg&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</content>
 </entry>
 

</feed>
